// *********** THIS FILE IS GENERATED - DO NOT EDIT ***********
//     See cpp_generator.py for modifications
// ************************************************************
































/*
** Copyright (c) 2017-2023 The Khronos Group Inc.
** Copyright (c) 2019-2023 Collabora, Ltd.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** ---- Exceptions to the Apache 2.0 License: ----
**
** As an exception, if you use this Software to generate code and portions of
** this Software are embedded into the generated code as a result, you may
** redistribute such product without providing attribution as would otherwise
** be required by Sections 4(a), 4(b) and 4(d) of the License.
**
** In addition, if you combine or link code generated by this Software with
** software that is licensed under the GPLv2 or the LGPL v2.0 or 2.1
** ("`Combined Software`") and if a court of competent jurisdiction determines
** that the patent provision (Section 3), the indemnity provision (Section 9)
** or other Section of the License conflicts with the conditions of the
** applicable GPL or LGPL license, you may retroactively and prospectively
** choose to deem waived or otherwise exclude such Section(s) of the License,
** but only in their entirety and only with respect to the Combined Software.
**
*/

/*
** This header is generated from the Khronos OpenXR XML API Registry.
**
*/
#ifndef OPENXR_ATOMS_HPP_
#define OPENXR_ATOMS_HPP_
/**
 * @file
 * @brief C++ projections of OpenXR atom types.
 * @ingroup atoms
 */

#include <openxr/openxr.h>

#ifdef OPENXR_HPP_DOXYGEN
#include <openxr/openxr_platform.h>
#endif
































#if !defined(OPENXR_HPP_INLINE)
#if defined(__clang___)
#if __has_attribute(always_inline)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#else
#define OPENXR_HPP_INLINE inline
#endif
#elif defined(__GNUC__)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#elif defined(_MSC_VER)
#define OPENXR_HPP_INLINE inline
#else
#define OPENXR_HPP_INLINE inline
#endif
#endif  // !OPENXR_HPP_INLINE

#if !defined(OPENXR_HPP_CONSTEXPR)
#if defined(_MSC_VER) && (_MSC_VER <= 1800)
#define OPENXR_HPP_CONSTEXPR
#else
#define OPENXR_HPP_CONSTEXPR constexpr
#endif
#endif  // !OPENXR_HPP_CONSTEXPR

#if !defined(OPENXR_HPP_SWITCH_CONSTEXPR)
//! @todo set this to constexpr in c++14
#define OPENXR_HPP_SWITCH_CONSTEXPR
#endif  // !OPENXR_HPP_SWITCH_CONSTEXPR































#if !defined(OPENXR_HPP_NAMESPACE)
#define OPENXR_HPP_NAMESPACE xr
#endif  // !OPENXR_HPP_NAMESPACE































#if !defined(OPENXR_HPP_STRINGIFY)
#define OPENXR_HPP_STRINGIFY2(text) #text
#define OPENXR_HPP_STRINGIFY(text) OPENXR_HPP_STRINGIFY2(text)
#define OPENXR_HPP_NAMESPACE_STRING OPENXR_HPP_STRINGIFY(OPENXR_HPP_NAMESPACE)
#endif  // !OPENXR_HPP_STRINGIFY
/*!
 * @defgroup atoms Atoms
 * @brief C++ projections of OpenXR atoms: opaque values with no explicit lifetime,
 * but that are only valid within the instance they are retrieved from.
 * @ingroup wrappers
 */
namespace OPENXR_HPP_NAMESPACE {





































































































/*!
 * @brief Type-safe wrapper for an XrSystemId atom.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSystemId>
 * 
 * @xrentity{XrSystemId}
 * @ingroup atoms
 */
class SystemId  {
   public:

    /*!
     * @name Constructors, assignment, and conversions
     * @{
     */
    //! Default constructor.
    OPENXR_HPP_CONSTEXPR SystemId () noexcept = default;

    //! Explicit constructor from raw XrSystemId value
    OPENXR_HPP_CONSTEXPR explicit SystemId (XrSystemId v) noexcept : val_(v) {}



//! Return a null value.
static OPENXR_HPP_CONSTEXPR SystemId null() noexcept { return {}; }
    //! @}
    /*!
     * @name Validity checking
     * @{
     */

    //! Returns true in conditionals if this SystemId value is valid
    OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != XR_NULL_SYSTEM_ID; }

    //! Unary negation: True if this SystemId value is invalid
    OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == XR_NULL_SYSTEM_ID; }

    //! @}
/*!
 * @name Raw XrSystemId manipulation
 * @{
 */
    //! Gets the raw XrSystemId value.
    OPENXR_HPP_CONSTEXPR XrSystemId get() const noexcept {
        return val_;
    }
/*!
 * @brief Clears this value, then returns the address of the raw XrSystemId value,
 * for use in creation/assignment.
 */
    XrSystemId *put(bool clear = true) noexcept {
        if (clear) val_ = XR_NULL_SYSTEM_ID;
        return &val_;
    }
    //! @}

   private:
    XrSystemId val_{XR_NULL_SYSTEM_ID};
};

 static_assert(sizeof(XrSystemId) == sizeof(SystemId), "Original type and wrapper have different size!"); 

/*!
 * @brief Free function for getting the raw XrSystemId from an SystemId value.
 * 
 * @found_by_adl
 * @see SystemId::get()
 * @relates SystemId
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrSystemId get(SystemId v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrSystemId from an SystemId value.
 * 
 * @found_by_adl
 * @see SystemId::put( )
 * @relates SystemId
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrSystemId *put(SystemId &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `==` comparison between SystemId values.
//! @relates SystemId
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(SystemId lhs, SystemId rhs) noexcept {
    return lhs.get()==rhs.get();
}
//! @brief `!=` comparison between SystemId values.
//! @relates SystemId
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(SystemId lhs, SystemId rhs) noexcept {
    return lhs.get()!=rhs.get();
}
//! @brief `==` comparison between SystemId and raw XrSystemId.
//! @relates SystemId
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(SystemId lhs, XrSystemId rhs) noexcept {
    return lhs.get()==rhs;
}
//! @brief `==` comparison between raw XrSystemId and SystemId.
//! @relates SystemId
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrSystemId lhs, SystemId rhs) noexcept {
    return lhs==rhs.get();
}
//! @brief `!=` comparison between SystemId and raw XrSystemId.
//! @relates SystemId
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(SystemId lhs, XrSystemId rhs) noexcept {
    return lhs.get()!=rhs;
}
//! @brief `!=` comparison between raw XrSystemId and SystemId.
//! @relates SystemId
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrSystemId lhs, SystemId rhs) noexcept {
    return lhs!=rhs.get();
}



































































































/*!
 * @brief Type-safe wrapper for an XrPath atom.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPath>
 * 
 * @xrentity{XrPath}
 * @ingroup atoms
 */
class Path  {
   public:

    /*!
     * @name Constructors, assignment, and conversions
     * @{
     */
    //! Default constructor.
    OPENXR_HPP_CONSTEXPR Path () noexcept = default;

    //! Explicit constructor from raw XrPath value
    OPENXR_HPP_CONSTEXPR explicit Path (XrPath v) noexcept : val_(v) {}



//! Return a null value.
static OPENXR_HPP_CONSTEXPR Path null() noexcept { return {}; }
    //! @}
    /*!
     * @name Validity checking
     * @{
     */

    //! Returns true in conditionals if this Path value is valid
    OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != XR_NULL_PATH; }

    //! Unary negation: True if this Path value is invalid
    OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == XR_NULL_PATH; }

    //! @}
/*!
 * @name Raw XrPath manipulation
 * @{
 */
    //! Gets the raw XrPath value.
    OPENXR_HPP_CONSTEXPR XrPath get() const noexcept {
        return val_;
    }
/*!
 * @brief Clears this value, then returns the address of the raw XrPath value,
 * for use in creation/assignment.
 */
    XrPath *put(bool clear = true) noexcept {
        if (clear) val_ = XR_NULL_PATH;
        return &val_;
    }
    //! @}

   private:
    XrPath val_{XR_NULL_PATH};
};

 static_assert(sizeof(XrPath) == sizeof(Path), "Original type and wrapper have different size!"); 

/*!
 * @brief Free function for getting the raw XrPath from an Path value.
 * 
 * @found_by_adl
 * @see Path::get()
 * @relates Path
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrPath get(Path v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrPath from an Path value.
 * 
 * @found_by_adl
 * @see Path::put( )
 * @relates Path
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrPath *put(Path &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `==` comparison between Path values.
//! @relates Path
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(Path lhs, Path rhs) noexcept {
    return lhs.get()==rhs.get();
}
//! @brief `!=` comparison between Path values.
//! @relates Path
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(Path lhs, Path rhs) noexcept {
    return lhs.get()!=rhs.get();
}
//! @brief `==` comparison between Path and raw XrPath.
//! @relates Path
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(Path lhs, XrPath rhs) noexcept {
    return lhs.get()==rhs;
}
//! @brief `==` comparison between raw XrPath and Path.
//! @relates Path
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrPath lhs, Path rhs) noexcept {
    return lhs==rhs.get();
}
//! @brief `!=` comparison between Path and raw XrPath.
//! @relates Path
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(Path lhs, XrPath rhs) noexcept {
    return lhs.get()!=rhs;
}
//! @brief `!=` comparison between raw XrPath and Path.
//! @relates Path
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrPath lhs, Path rhs) noexcept {
    return lhs!=rhs.get();
}



































































































/*!
 * @brief Type-safe wrapper for an XrControllerModelKeyMSFT atom.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrControllerModelKeyMSFT>
 * 
 * @xrentity{XrControllerModelKeyMSFT}
 * @ingroup atoms
 */
class ControllerModelKeyMSFT  {
   public:

    /*!
     * @name Constructors, assignment, and conversions
     * @{
     */
    //! Default constructor.
    OPENXR_HPP_CONSTEXPR ControllerModelKeyMSFT () noexcept = default;

    //! Explicit constructor from raw XrControllerModelKeyMSFT value
    OPENXR_HPP_CONSTEXPR explicit ControllerModelKeyMSFT (XrControllerModelKeyMSFT v) noexcept : val_(v) {}



//! Return a null value.
static OPENXR_HPP_CONSTEXPR ControllerModelKeyMSFT null() noexcept { return {}; }
    //! @}
    /*!
     * @name Validity checking
     * @{
     */

    //! Returns true in conditionals if this ControllerModelKeyMSFT value is valid
    OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != XR_NULL_CONTROLLER_MODEL_KEY_MSFT; }

    //! Unary negation: True if this ControllerModelKeyMSFT value is invalid
    OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == XR_NULL_CONTROLLER_MODEL_KEY_MSFT; }

    //! @}
/*!
 * @name Raw XrControllerModelKeyMSFT manipulation
 * @{
 */
    //! Gets the raw XrControllerModelKeyMSFT value.
    OPENXR_HPP_CONSTEXPR XrControllerModelKeyMSFT get() const noexcept {
        return val_;
    }
/*!
 * @brief Clears this value, then returns the address of the raw XrControllerModelKeyMSFT value,
 * for use in creation/assignment.
 */
    XrControllerModelKeyMSFT *put(bool clear = true) noexcept {
        if (clear) val_ = XR_NULL_CONTROLLER_MODEL_KEY_MSFT;
        return &val_;
    }
    //! @}

   private:
    XrControllerModelKeyMSFT val_{XR_NULL_CONTROLLER_MODEL_KEY_MSFT};
};

 static_assert(sizeof(XrControllerModelKeyMSFT) == sizeof(ControllerModelKeyMSFT), "Original type and wrapper have different size!"); 

/*!
 * @brief Free function for getting the raw XrControllerModelKeyMSFT from an ControllerModelKeyMSFT value.
 * 
 * @found_by_adl
 * @see ControllerModelKeyMSFT::get()
 * @relates ControllerModelKeyMSFT
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrControllerModelKeyMSFT get(ControllerModelKeyMSFT v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrControllerModelKeyMSFT from an ControllerModelKeyMSFT value.
 * 
 * @found_by_adl
 * @see ControllerModelKeyMSFT::put( )
 * @relates ControllerModelKeyMSFT
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrControllerModelKeyMSFT *put(ControllerModelKeyMSFT &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `==` comparison between ControllerModelKeyMSFT values.
//! @relates ControllerModelKeyMSFT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(ControllerModelKeyMSFT lhs, ControllerModelKeyMSFT rhs) noexcept {
    return lhs.get()==rhs.get();
}
//! @brief `!=` comparison between ControllerModelKeyMSFT values.
//! @relates ControllerModelKeyMSFT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(ControllerModelKeyMSFT lhs, ControllerModelKeyMSFT rhs) noexcept {
    return lhs.get()!=rhs.get();
}
//! @brief `==` comparison between ControllerModelKeyMSFT and raw XrControllerModelKeyMSFT.
//! @relates ControllerModelKeyMSFT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(ControllerModelKeyMSFT lhs, XrControllerModelKeyMSFT rhs) noexcept {
    return lhs.get()==rhs;
}
//! @brief `==` comparison between raw XrControllerModelKeyMSFT and ControllerModelKeyMSFT.
//! @relates ControllerModelKeyMSFT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrControllerModelKeyMSFT lhs, ControllerModelKeyMSFT rhs) noexcept {
    return lhs==rhs.get();
}
//! @brief `!=` comparison between ControllerModelKeyMSFT and raw XrControllerModelKeyMSFT.
//! @relates ControllerModelKeyMSFT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(ControllerModelKeyMSFT lhs, XrControllerModelKeyMSFT rhs) noexcept {
    return lhs.get()!=rhs;
}
//! @brief `!=` comparison between raw XrControllerModelKeyMSFT and ControllerModelKeyMSFT.
//! @relates ControllerModelKeyMSFT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrControllerModelKeyMSFT lhs, ControllerModelKeyMSFT rhs) noexcept {
    return lhs!=rhs.get();
}



































































































/*!
 * @brief Type-safe wrapper for an XrAsyncRequestIdFB atom.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrAsyncRequestIdFB>
 * 
 * @xrentity{XrAsyncRequestIdFB}
 * @ingroup atoms
 */
class AsyncRequestIdFB  {
   public:

    /*!
     * @name Constructors, assignment, and conversions
     * @{
     */
    //! Default constructor.
    OPENXR_HPP_CONSTEXPR AsyncRequestIdFB () noexcept = default;

    //! Explicit constructor from raw XrAsyncRequestIdFB value
    OPENXR_HPP_CONSTEXPR explicit AsyncRequestIdFB (XrAsyncRequestIdFB v) noexcept : val_(v) {}



//! Return a null value.
static OPENXR_HPP_CONSTEXPR AsyncRequestIdFB null() noexcept { return {}; }
    //! @}
    /*!
     * @name Validity checking
     * @{
     */

    //! Returns true in conditionals if this AsyncRequestIdFB value is valid
    OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != 0; }

    //! Unary negation: True if this AsyncRequestIdFB value is invalid
    OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == 0; }

    //! @}
/*!
 * @name Raw XrAsyncRequestIdFB manipulation
 * @{
 */
    //! Gets the raw XrAsyncRequestIdFB value.
    OPENXR_HPP_CONSTEXPR XrAsyncRequestIdFB get() const noexcept {
        return val_;
    }
/*!
 * @brief Clears this value, then returns the address of the raw XrAsyncRequestIdFB value,
 * for use in creation/assignment.
 */
    XrAsyncRequestIdFB *put(bool clear = true) noexcept {
        if (clear) val_ = 0;
        return &val_;
    }
    //! @}

   private:
    XrAsyncRequestIdFB val_{0};
};

 static_assert(sizeof(XrAsyncRequestIdFB) == sizeof(AsyncRequestIdFB), "Original type and wrapper have different size!"); 

/*!
 * @brief Free function for getting the raw XrAsyncRequestIdFB from an AsyncRequestIdFB value.
 * 
 * @found_by_adl
 * @see AsyncRequestIdFB::get()
 * @relates AsyncRequestIdFB
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrAsyncRequestIdFB get(AsyncRequestIdFB v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrAsyncRequestIdFB from an AsyncRequestIdFB value.
 * 
 * @found_by_adl
 * @see AsyncRequestIdFB::put( )
 * @relates AsyncRequestIdFB
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrAsyncRequestIdFB *put(AsyncRequestIdFB &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `==` comparison between AsyncRequestIdFB values.
//! @relates AsyncRequestIdFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(AsyncRequestIdFB lhs, AsyncRequestIdFB rhs) noexcept {
    return lhs.get()==rhs.get();
}
//! @brief `!=` comparison between AsyncRequestIdFB values.
//! @relates AsyncRequestIdFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(AsyncRequestIdFB lhs, AsyncRequestIdFB rhs) noexcept {
    return lhs.get()!=rhs.get();
}
//! @brief `==` comparison between AsyncRequestIdFB and raw XrAsyncRequestIdFB.
//! @relates AsyncRequestIdFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(AsyncRequestIdFB lhs, XrAsyncRequestIdFB rhs) noexcept {
    return lhs.get()==rhs;
}
//! @brief `==` comparison between raw XrAsyncRequestIdFB and AsyncRequestIdFB.
//! @relates AsyncRequestIdFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrAsyncRequestIdFB lhs, AsyncRequestIdFB rhs) noexcept {
    return lhs==rhs.get();
}
//! @brief `!=` comparison between AsyncRequestIdFB and raw XrAsyncRequestIdFB.
//! @relates AsyncRequestIdFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(AsyncRequestIdFB lhs, XrAsyncRequestIdFB rhs) noexcept {
    return lhs.get()!=rhs;
}
//! @brief `!=` comparison between raw XrAsyncRequestIdFB and AsyncRequestIdFB.
//! @relates AsyncRequestIdFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrAsyncRequestIdFB lhs, AsyncRequestIdFB rhs) noexcept {
    return lhs!=rhs.get();
}



































































































/*!
 * @brief Type-safe wrapper for an XrRenderModelKeyFB atom.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrRenderModelKeyFB>
 * 
 * @xrentity{XrRenderModelKeyFB}
 * @ingroup atoms
 */
class RenderModelKeyFB  {
   public:

    /*!
     * @name Constructors, assignment, and conversions
     * @{
     */
    //! Default constructor.
    OPENXR_HPP_CONSTEXPR RenderModelKeyFB () noexcept = default;

    //! Explicit constructor from raw XrRenderModelKeyFB value
    OPENXR_HPP_CONSTEXPR explicit RenderModelKeyFB (XrRenderModelKeyFB v) noexcept : val_(v) {}



//! Return a null value.
static OPENXR_HPP_CONSTEXPR RenderModelKeyFB null() noexcept { return {}; }
    //! @}
    /*!
     * @name Validity checking
     * @{
     */

    //! Returns true in conditionals if this RenderModelKeyFB value is valid
    OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != XR_NULL_RENDER_MODEL_KEY_FB; }

    //! Unary negation: True if this RenderModelKeyFB value is invalid
    OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == XR_NULL_RENDER_MODEL_KEY_FB; }

    //! @}
/*!
 * @name Raw XrRenderModelKeyFB manipulation
 * @{
 */
    //! Gets the raw XrRenderModelKeyFB value.
    OPENXR_HPP_CONSTEXPR XrRenderModelKeyFB get() const noexcept {
        return val_;
    }
/*!
 * @brief Clears this value, then returns the address of the raw XrRenderModelKeyFB value,
 * for use in creation/assignment.
 */
    XrRenderModelKeyFB *put(bool clear = true) noexcept {
        if (clear) val_ = XR_NULL_RENDER_MODEL_KEY_FB;
        return &val_;
    }
    //! @}

   private:
    XrRenderModelKeyFB val_{XR_NULL_RENDER_MODEL_KEY_FB};
};

 static_assert(sizeof(XrRenderModelKeyFB) == sizeof(RenderModelKeyFB), "Original type and wrapper have different size!"); 

/*!
 * @brief Free function for getting the raw XrRenderModelKeyFB from an RenderModelKeyFB value.
 * 
 * @found_by_adl
 * @see RenderModelKeyFB::get()
 * @relates RenderModelKeyFB
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrRenderModelKeyFB get(RenderModelKeyFB v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrRenderModelKeyFB from an RenderModelKeyFB value.
 * 
 * @found_by_adl
 * @see RenderModelKeyFB::put( )
 * @relates RenderModelKeyFB
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrRenderModelKeyFB *put(RenderModelKeyFB &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `==` comparison between RenderModelKeyFB values.
//! @relates RenderModelKeyFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(RenderModelKeyFB lhs, RenderModelKeyFB rhs) noexcept {
    return lhs.get()==rhs.get();
}
//! @brief `!=` comparison between RenderModelKeyFB values.
//! @relates RenderModelKeyFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(RenderModelKeyFB lhs, RenderModelKeyFB rhs) noexcept {
    return lhs.get()!=rhs.get();
}
//! @brief `==` comparison between RenderModelKeyFB and raw XrRenderModelKeyFB.
//! @relates RenderModelKeyFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(RenderModelKeyFB lhs, XrRenderModelKeyFB rhs) noexcept {
    return lhs.get()==rhs;
}
//! @brief `==` comparison between raw XrRenderModelKeyFB and RenderModelKeyFB.
//! @relates RenderModelKeyFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrRenderModelKeyFB lhs, RenderModelKeyFB rhs) noexcept {
    return lhs==rhs.get();
}
//! @brief `!=` comparison between RenderModelKeyFB and raw XrRenderModelKeyFB.
//! @relates RenderModelKeyFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(RenderModelKeyFB lhs, XrRenderModelKeyFB rhs) noexcept {
    return lhs.get()!=rhs;
}
//! @brief `!=` comparison between raw XrRenderModelKeyFB and RenderModelKeyFB.
//! @relates RenderModelKeyFB
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrRenderModelKeyFB lhs, RenderModelKeyFB rhs) noexcept {
    return lhs!=rhs.get();
}



































































































/*!
 * @brief Type-safe wrapper for an XrMarkerML atom.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrMarkerML>
 * 
 * @xrentity{XrMarkerML}
 * @ingroup atoms
 */
class MarkerML  {
   public:

    /*!
     * @name Constructors, assignment, and conversions
     * @{
     */
    //! Default constructor.
    OPENXR_HPP_CONSTEXPR MarkerML () noexcept = default;

    //! Explicit constructor from raw XrMarkerML value
    OPENXR_HPP_CONSTEXPR explicit MarkerML (XrMarkerML v) noexcept : val_(v) {}



//! Return a null value.
static OPENXR_HPP_CONSTEXPR MarkerML null() noexcept { return {}; }
    //! @}
    /*!
     * @name Validity checking
     * @{
     */

    //! Returns true in conditionals if this MarkerML value is valid
    OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != 0; }

    //! Unary negation: True if this MarkerML value is invalid
    OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == 0; }

    //! @}
/*!
 * @name Raw XrMarkerML manipulation
 * @{
 */
    //! Gets the raw XrMarkerML value.
    OPENXR_HPP_CONSTEXPR XrMarkerML get() const noexcept {
        return val_;
    }
/*!
 * @brief Clears this value, then returns the address of the raw XrMarkerML value,
 * for use in creation/assignment.
 */
    XrMarkerML *put(bool clear = true) noexcept {
        if (clear) val_ = 0;
        return &val_;
    }
    //! @}

   private:
    XrMarkerML val_{0};
};

 static_assert(sizeof(XrMarkerML) == sizeof(MarkerML), "Original type and wrapper have different size!"); 

/*!
 * @brief Free function for getting the raw XrMarkerML from an MarkerML value.
 * 
 * @found_by_adl
 * @see MarkerML::get()
 * @relates MarkerML
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrMarkerML get(MarkerML v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrMarkerML from an MarkerML value.
 * 
 * @found_by_adl
 * @see MarkerML::put( )
 * @relates MarkerML
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrMarkerML *put(MarkerML &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `==` comparison between MarkerML values.
//! @relates MarkerML
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(MarkerML lhs, MarkerML rhs) noexcept {
    return lhs.get()==rhs.get();
}
//! @brief `!=` comparison between MarkerML values.
//! @relates MarkerML
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(MarkerML lhs, MarkerML rhs) noexcept {
    return lhs.get()!=rhs.get();
}
//! @brief `==` comparison between MarkerML and raw XrMarkerML.
//! @relates MarkerML
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(MarkerML lhs, XrMarkerML rhs) noexcept {
    return lhs.get()==rhs;
}
//! @brief `==` comparison between raw XrMarkerML and MarkerML.
//! @relates MarkerML
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrMarkerML lhs, MarkerML rhs) noexcept {
    return lhs==rhs.get();
}
//! @brief `!=` comparison between MarkerML and raw XrMarkerML.
//! @relates MarkerML
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(MarkerML lhs, XrMarkerML rhs) noexcept {
    return lhs.get()!=rhs;
}
//! @brief `!=` comparison between raw XrMarkerML and MarkerML.
//! @relates MarkerML
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrMarkerML lhs, MarkerML rhs) noexcept {
    return lhs!=rhs.get();
}



































































































/*!
 * @brief Type-safe wrapper for an XrFutureEXT atom.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFutureEXT>
 * 
 * @xrentity{XrFutureEXT}
 * @ingroup atoms
 */
class FutureEXT  {
   public:

    /*!
     * @name Constructors, assignment, and conversions
     * @{
     */
    //! Default constructor.
    OPENXR_HPP_CONSTEXPR FutureEXT () noexcept = default;

    //! Explicit constructor from raw XrFutureEXT value
    OPENXR_HPP_CONSTEXPR explicit FutureEXT (XrFutureEXT v) noexcept : val_(v) {}



//! Return a null value.
static OPENXR_HPP_CONSTEXPR FutureEXT null() noexcept { return {}; }
    //! @}
    /*!
     * @name Validity checking
     * @{
     */

    //! Returns true in conditionals if this FutureEXT value is valid
    OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != 0; }

    //! Unary negation: True if this FutureEXT value is invalid
    OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == 0; }

    //! @}
/*!
 * @name Raw XrFutureEXT manipulation
 * @{
 */
    //! Gets the raw XrFutureEXT value.
    OPENXR_HPP_CONSTEXPR XrFutureEXT get() const noexcept {
        return val_;
    }
/*!
 * @brief Clears this value, then returns the address of the raw XrFutureEXT value,
 * for use in creation/assignment.
 */
    XrFutureEXT *put(bool clear = true) noexcept {
        if (clear) val_ = 0;
        return &val_;
    }
    //! @}

   private:
    XrFutureEXT val_{0};
};

 static_assert(sizeof(XrFutureEXT) == sizeof(FutureEXT), "Original type and wrapper have different size!"); 

/*!
 * @brief Free function for getting the raw XrFutureEXT from an FutureEXT value.
 * 
 * @found_by_adl
 * @see FutureEXT::get()
 * @relates FutureEXT
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrFutureEXT get(FutureEXT v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrFutureEXT from an FutureEXT value.
 * 
 * @found_by_adl
 * @see FutureEXT::put( )
 * @relates FutureEXT
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrFutureEXT *put(FutureEXT &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `==` comparison between FutureEXT values.
//! @relates FutureEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(FutureEXT lhs, FutureEXT rhs) noexcept {
    return lhs.get()==rhs.get();
}
//! @brief `!=` comparison between FutureEXT values.
//! @relates FutureEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(FutureEXT lhs, FutureEXT rhs) noexcept {
    return lhs.get()!=rhs.get();
}
//! @brief `==` comparison between FutureEXT and raw XrFutureEXT.
//! @relates FutureEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(FutureEXT lhs, XrFutureEXT rhs) noexcept {
    return lhs.get()==rhs;
}
//! @brief `==` comparison between raw XrFutureEXT and FutureEXT.
//! @relates FutureEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrFutureEXT lhs, FutureEXT rhs) noexcept {
    return lhs==rhs.get();
}
//! @brief `!=` comparison between FutureEXT and raw XrFutureEXT.
//! @relates FutureEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(FutureEXT lhs, XrFutureEXT rhs) noexcept {
    return lhs.get()!=rhs;
}
//! @brief `!=` comparison between raw XrFutureEXT and FutureEXT.
//! @relates FutureEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrFutureEXT lhs, FutureEXT rhs) noexcept {
    return lhs!=rhs.get();
}



































































































/*!
 * @brief Type-safe wrapper for an XrRenderModelIdEXT atom.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrRenderModelIdEXT>
 * 
 * @xrentity{XrRenderModelIdEXT}
 * @ingroup atoms
 */
class RenderModelIdEXT  {
   public:

    /*!
     * @name Constructors, assignment, and conversions
     * @{
     */
    //! Default constructor.
    OPENXR_HPP_CONSTEXPR RenderModelIdEXT () noexcept = default;

    //! Explicit constructor from raw XrRenderModelIdEXT value
    OPENXR_HPP_CONSTEXPR explicit RenderModelIdEXT (XrRenderModelIdEXT v) noexcept : val_(v) {}



//! Return a null value.
static OPENXR_HPP_CONSTEXPR RenderModelIdEXT null() noexcept { return {}; }
    //! @}
    /*!
     * @name Validity checking
     * @{
     */

    //! Returns true in conditionals if this RenderModelIdEXT value is valid
    OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != 0; }

    //! Unary negation: True if this RenderModelIdEXT value is invalid
    OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == 0; }

    //! @}
/*!
 * @name Raw XrRenderModelIdEXT manipulation
 * @{
 */
    //! Gets the raw XrRenderModelIdEXT value.
    OPENXR_HPP_CONSTEXPR XrRenderModelIdEXT get() const noexcept {
        return val_;
    }
/*!
 * @brief Clears this value, then returns the address of the raw XrRenderModelIdEXT value,
 * for use in creation/assignment.
 */
    XrRenderModelIdEXT *put(bool clear = true) noexcept {
        if (clear) val_ = 0;
        return &val_;
    }
    //! @}

   private:
    XrRenderModelIdEXT val_{0};
};

 static_assert(sizeof(XrRenderModelIdEXT) == sizeof(RenderModelIdEXT), "Original type and wrapper have different size!"); 

/*!
 * @brief Free function for getting the raw XrRenderModelIdEXT from an RenderModelIdEXT value.
 * 
 * @found_by_adl
 * @see RenderModelIdEXT::get()
 * @relates RenderModelIdEXT
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrRenderModelIdEXT get(RenderModelIdEXT v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrRenderModelIdEXT from an RenderModelIdEXT value.
 * 
 * @found_by_adl
 * @see RenderModelIdEXT::put( )
 * @relates RenderModelIdEXT
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrRenderModelIdEXT *put(RenderModelIdEXT &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `==` comparison between RenderModelIdEXT values.
//! @relates RenderModelIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(RenderModelIdEXT lhs, RenderModelIdEXT rhs) noexcept {
    return lhs.get()==rhs.get();
}
//! @brief `!=` comparison between RenderModelIdEXT values.
//! @relates RenderModelIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(RenderModelIdEXT lhs, RenderModelIdEXT rhs) noexcept {
    return lhs.get()!=rhs.get();
}
//! @brief `==` comparison between RenderModelIdEXT and raw XrRenderModelIdEXT.
//! @relates RenderModelIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(RenderModelIdEXT lhs, XrRenderModelIdEXT rhs) noexcept {
    return lhs.get()==rhs;
}
//! @brief `==` comparison between raw XrRenderModelIdEXT and RenderModelIdEXT.
//! @relates RenderModelIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrRenderModelIdEXT lhs, RenderModelIdEXT rhs) noexcept {
    return lhs==rhs.get();
}
//! @brief `!=` comparison between RenderModelIdEXT and raw XrRenderModelIdEXT.
//! @relates RenderModelIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(RenderModelIdEXT lhs, XrRenderModelIdEXT rhs) noexcept {
    return lhs.get()!=rhs;
}
//! @brief `!=` comparison between raw XrRenderModelIdEXT and RenderModelIdEXT.
//! @relates RenderModelIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrRenderModelIdEXT lhs, RenderModelIdEXT rhs) noexcept {
    return lhs!=rhs.get();
}



































































































/*!
 * @brief Type-safe wrapper for an XrSpatialEntityIdBD atom.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpatialEntityIdBD>
 * 
 * @xrentity{XrSpatialEntityIdBD}
 * @ingroup atoms
 */
class SpatialEntityIdBD  {
   public:

    /*!
     * @name Constructors, assignment, and conversions
     * @{
     */
    //! Default constructor.
    OPENXR_HPP_CONSTEXPR SpatialEntityIdBD () noexcept = default;

    //! Explicit constructor from raw XrSpatialEntityIdBD value
    OPENXR_HPP_CONSTEXPR explicit SpatialEntityIdBD (XrSpatialEntityIdBD v) noexcept : val_(v) {}



//! Return a null value.
static OPENXR_HPP_CONSTEXPR SpatialEntityIdBD null() noexcept { return {}; }
    //! @}
    /*!
     * @name Validity checking
     * @{
     */

    //! Returns true in conditionals if this SpatialEntityIdBD value is valid
    OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != 0; }

    //! Unary negation: True if this SpatialEntityIdBD value is invalid
    OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == 0; }

    //! @}
/*!
 * @name Raw XrSpatialEntityIdBD manipulation
 * @{
 */
    //! Gets the raw XrSpatialEntityIdBD value.
    OPENXR_HPP_CONSTEXPR XrSpatialEntityIdBD get() const noexcept {
        return val_;
    }
/*!
 * @brief Clears this value, then returns the address of the raw XrSpatialEntityIdBD value,
 * for use in creation/assignment.
 */
    XrSpatialEntityIdBD *put(bool clear = true) noexcept {
        if (clear) val_ = 0;
        return &val_;
    }
    //! @}

   private:
    XrSpatialEntityIdBD val_{0};
};

 static_assert(sizeof(XrSpatialEntityIdBD) == sizeof(SpatialEntityIdBD), "Original type and wrapper have different size!"); 

/*!
 * @brief Free function for getting the raw XrSpatialEntityIdBD from an SpatialEntityIdBD value.
 * 
 * @found_by_adl
 * @see SpatialEntityIdBD::get()
 * @relates SpatialEntityIdBD
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrSpatialEntityIdBD get(SpatialEntityIdBD v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrSpatialEntityIdBD from an SpatialEntityIdBD value.
 * 
 * @found_by_adl
 * @see SpatialEntityIdBD::put( )
 * @relates SpatialEntityIdBD
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrSpatialEntityIdBD *put(SpatialEntityIdBD &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `==` comparison between SpatialEntityIdBD values.
//! @relates SpatialEntityIdBD
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(SpatialEntityIdBD lhs, SpatialEntityIdBD rhs) noexcept {
    return lhs.get()==rhs.get();
}
//! @brief `!=` comparison between SpatialEntityIdBD values.
//! @relates SpatialEntityIdBD
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(SpatialEntityIdBD lhs, SpatialEntityIdBD rhs) noexcept {
    return lhs.get()!=rhs.get();
}
//! @brief `==` comparison between SpatialEntityIdBD and raw XrSpatialEntityIdBD.
//! @relates SpatialEntityIdBD
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(SpatialEntityIdBD lhs, XrSpatialEntityIdBD rhs) noexcept {
    return lhs.get()==rhs;
}
//! @brief `==` comparison between raw XrSpatialEntityIdBD and SpatialEntityIdBD.
//! @relates SpatialEntityIdBD
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrSpatialEntityIdBD lhs, SpatialEntityIdBD rhs) noexcept {
    return lhs==rhs.get();
}
//! @brief `!=` comparison between SpatialEntityIdBD and raw XrSpatialEntityIdBD.
//! @relates SpatialEntityIdBD
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(SpatialEntityIdBD lhs, XrSpatialEntityIdBD rhs) noexcept {
    return lhs.get()!=rhs;
}
//! @brief `!=` comparison between raw XrSpatialEntityIdBD and SpatialEntityIdBD.
//! @relates SpatialEntityIdBD
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrSpatialEntityIdBD lhs, SpatialEntityIdBD rhs) noexcept {
    return lhs!=rhs.get();
}



































































































/*!
 * @brief Type-safe wrapper for an XrSpatialEntityIdEXT atom.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpatialEntityIdEXT>
 * 
 * @xrentity{XrSpatialEntityIdEXT}
 * @ingroup atoms
 */
class SpatialEntityIdEXT  {
   public:

    /*!
     * @name Constructors, assignment, and conversions
     * @{
     */
    //! Default constructor.
    OPENXR_HPP_CONSTEXPR SpatialEntityIdEXT () noexcept = default;

    //! Explicit constructor from raw XrSpatialEntityIdEXT value
    OPENXR_HPP_CONSTEXPR explicit SpatialEntityIdEXT (XrSpatialEntityIdEXT v) noexcept : val_(v) {}



//! Return a null value.
static OPENXR_HPP_CONSTEXPR SpatialEntityIdEXT null() noexcept { return {}; }
    //! @}
    /*!
     * @name Validity checking
     * @{
     */

    //! Returns true in conditionals if this SpatialEntityIdEXT value is valid
    OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != XR_NULL_SPATIAL_ENTITY_ID_EXT; }

    //! Unary negation: True if this SpatialEntityIdEXT value is invalid
    OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == XR_NULL_SPATIAL_ENTITY_ID_EXT; }

    //! @}
/*!
 * @name Raw XrSpatialEntityIdEXT manipulation
 * @{
 */
    //! Gets the raw XrSpatialEntityIdEXT value.
    OPENXR_HPP_CONSTEXPR XrSpatialEntityIdEXT get() const noexcept {
        return val_;
    }
/*!
 * @brief Clears this value, then returns the address of the raw XrSpatialEntityIdEXT value,
 * for use in creation/assignment.
 */
    XrSpatialEntityIdEXT *put(bool clear = true) noexcept {
        if (clear) val_ = XR_NULL_SPATIAL_ENTITY_ID_EXT;
        return &val_;
    }
    //! @}

   private:
    XrSpatialEntityIdEXT val_{XR_NULL_SPATIAL_ENTITY_ID_EXT};
};

 static_assert(sizeof(XrSpatialEntityIdEXT) == sizeof(SpatialEntityIdEXT), "Original type and wrapper have different size!"); 

/*!
 * @brief Free function for getting the raw XrSpatialEntityIdEXT from an SpatialEntityIdEXT value.
 * 
 * @found_by_adl
 * @see SpatialEntityIdEXT::get()
 * @relates SpatialEntityIdEXT
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrSpatialEntityIdEXT get(SpatialEntityIdEXT v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrSpatialEntityIdEXT from an SpatialEntityIdEXT value.
 * 
 * @found_by_adl
 * @see SpatialEntityIdEXT::put( )
 * @relates SpatialEntityIdEXT
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrSpatialEntityIdEXT *put(SpatialEntityIdEXT &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `==` comparison between SpatialEntityIdEXT values.
//! @relates SpatialEntityIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(SpatialEntityIdEXT lhs, SpatialEntityIdEXT rhs) noexcept {
    return lhs.get()==rhs.get();
}
//! @brief `!=` comparison between SpatialEntityIdEXT values.
//! @relates SpatialEntityIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(SpatialEntityIdEXT lhs, SpatialEntityIdEXT rhs) noexcept {
    return lhs.get()!=rhs.get();
}
//! @brief `==` comparison between SpatialEntityIdEXT and raw XrSpatialEntityIdEXT.
//! @relates SpatialEntityIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(SpatialEntityIdEXT lhs, XrSpatialEntityIdEXT rhs) noexcept {
    return lhs.get()==rhs;
}
//! @brief `==` comparison between raw XrSpatialEntityIdEXT and SpatialEntityIdEXT.
//! @relates SpatialEntityIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrSpatialEntityIdEXT lhs, SpatialEntityIdEXT rhs) noexcept {
    return lhs==rhs.get();
}
//! @brief `!=` comparison between SpatialEntityIdEXT and raw XrSpatialEntityIdEXT.
//! @relates SpatialEntityIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(SpatialEntityIdEXT lhs, XrSpatialEntityIdEXT rhs) noexcept {
    return lhs.get()!=rhs;
}
//! @brief `!=` comparison between raw XrSpatialEntityIdEXT and SpatialEntityIdEXT.
//! @relates SpatialEntityIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrSpatialEntityIdEXT lhs, SpatialEntityIdEXT rhs) noexcept {
    return lhs!=rhs.get();
}



































































































/*!
 * @brief Type-safe wrapper for an XrSpatialBufferIdEXT atom.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpatialBufferIdEXT>
 * 
 * @xrentity{XrSpatialBufferIdEXT}
 * @ingroup atoms
 */
class SpatialBufferIdEXT  {
   public:

    /*!
     * @name Constructors, assignment, and conversions
     * @{
     */
    //! Default constructor.
    OPENXR_HPP_CONSTEXPR SpatialBufferIdEXT () noexcept = default;

    //! Explicit constructor from raw XrSpatialBufferIdEXT value
    OPENXR_HPP_CONSTEXPR explicit SpatialBufferIdEXT (XrSpatialBufferIdEXT v) noexcept : val_(v) {}



//! Return a null value.
static OPENXR_HPP_CONSTEXPR SpatialBufferIdEXT null() noexcept { return {}; }
    //! @}
    /*!
     * @name Validity checking
     * @{
     */

    //! Returns true in conditionals if this SpatialBufferIdEXT value is valid
    OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != XR_NULL_SPATIAL_BUFFER_ID_EXT; }

    //! Unary negation: True if this SpatialBufferIdEXT value is invalid
    OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == XR_NULL_SPATIAL_BUFFER_ID_EXT; }

    //! @}
/*!
 * @name Raw XrSpatialBufferIdEXT manipulation
 * @{
 */
    //! Gets the raw XrSpatialBufferIdEXT value.
    OPENXR_HPP_CONSTEXPR XrSpatialBufferIdEXT get() const noexcept {
        return val_;
    }
/*!
 * @brief Clears this value, then returns the address of the raw XrSpatialBufferIdEXT value,
 * for use in creation/assignment.
 */
    XrSpatialBufferIdEXT *put(bool clear = true) noexcept {
        if (clear) val_ = XR_NULL_SPATIAL_BUFFER_ID_EXT;
        return &val_;
    }
    //! @}

   private:
    XrSpatialBufferIdEXT val_{XR_NULL_SPATIAL_BUFFER_ID_EXT};
};

 static_assert(sizeof(XrSpatialBufferIdEXT) == sizeof(SpatialBufferIdEXT), "Original type and wrapper have different size!"); 

/*!
 * @brief Free function for getting the raw XrSpatialBufferIdEXT from an SpatialBufferIdEXT value.
 * 
 * @found_by_adl
 * @see SpatialBufferIdEXT::get()
 * @relates SpatialBufferIdEXT
 * @ingroup utility_accessors
 */
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE XrSpatialBufferIdEXT get(SpatialBufferIdEXT v) noexcept { return v.get(); }
/*!
 * @brief Free function for clearing (by default) and getting the address of the raw XrSpatialBufferIdEXT from an SpatialBufferIdEXT value.
 * 
 * @found_by_adl
 * @see SpatialBufferIdEXT::put( )
 * @relates SpatialBufferIdEXT
 * @ingroup utility_accessors
 */
static OPENXR_HPP_INLINE XrSpatialBufferIdEXT *put(SpatialBufferIdEXT &v, bool clear = true) noexcept { return v.put(clear); }
//! @brief `==` comparison between SpatialBufferIdEXT values.
//! @relates SpatialBufferIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(SpatialBufferIdEXT lhs, SpatialBufferIdEXT rhs) noexcept {
    return lhs.get()==rhs.get();
}
//! @brief `!=` comparison between SpatialBufferIdEXT values.
//! @relates SpatialBufferIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(SpatialBufferIdEXT lhs, SpatialBufferIdEXT rhs) noexcept {
    return lhs.get()!=rhs.get();
}
//! @brief `==` comparison between SpatialBufferIdEXT and raw XrSpatialBufferIdEXT.
//! @relates SpatialBufferIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(SpatialBufferIdEXT lhs, XrSpatialBufferIdEXT rhs) noexcept {
    return lhs.get()==rhs;
}
//! @brief `==` comparison between raw XrSpatialBufferIdEXT and SpatialBufferIdEXT.
//! @relates SpatialBufferIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator==(XrSpatialBufferIdEXT lhs, SpatialBufferIdEXT rhs) noexcept {
    return lhs==rhs.get();
}
//! @brief `!=` comparison between SpatialBufferIdEXT and raw XrSpatialBufferIdEXT.
//! @relates SpatialBufferIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(SpatialBufferIdEXT lhs, XrSpatialBufferIdEXT rhs) noexcept {
    return lhs.get()!=rhs;
}
//! @brief `!=` comparison between raw XrSpatialBufferIdEXT and SpatialBufferIdEXT.
//! @relates SpatialBufferIdEXT
OPENXR_HPP_CONSTEXPR OPENXR_HPP_INLINE bool operator!=(XrSpatialBufferIdEXT lhs, SpatialBufferIdEXT rhs) noexcept {
    return lhs!=rhs.get();
}
} // namespace OPENXR_HPP_NAMESPACE
































#endif  // ifndef OPENXR_ATOMS_HPP_

