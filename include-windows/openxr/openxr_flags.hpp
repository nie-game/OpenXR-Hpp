// *********** THIS FILE IS GENERATED - DO NOT EDIT ***********
//     See cpp_generator.py for modifications
// ************************************************************
































/*
** Copyright (c) 2017-2023 The Khronos Group Inc.
** Copyright (c) 2019-2023 Collabora, Ltd.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** ---- Exceptions to the Apache 2.0 License: ----
**
** As an exception, if you use this Software to generate code and portions of
** this Software are embedded into the generated code as a result, you may
** redistribute such product without providing attribution as would otherwise
** be required by Sections 4(a), 4(b) and 4(d) of the License.
**
** In addition, if you combine or link code generated by this Software with
** software that is licensed under the GPLv2 or the LGPL v2.0 or 2.1
** ("`Combined Software`") and if a court of competent jurisdiction determines
** that the patent provision (Section 3), the indemnity provision (Section 9)
** or other Section of the License conflicts with the conditions of the
** applicable GPL or LGPL license, you may retroactively and prospectively
** choose to deem waived or otherwise exclude such Section(s) of the License,
** but only in their entirety and only with respect to the Combined Software.
**
*/

/*
** This header is generated from the Khronos OpenXR XML API Registry.
**
*/
#ifndef OPENXR_FLAGS_HPP_
#define OPENXR_FLAGS_HPP_
/**
 * @file
 * @brief C++ projections of OpenXR flag (bitmask) types.
 *
 * @see openxr_enums.hpp
 * @ingroup flags
 */

#include <openxr/openxr.h>

#ifdef OPENXR_HPP_DOXYGEN
#include <openxr/openxr_platform.h>
#endif































































#if !defined(OPENXR_HPP_ASSERT)
#include <cassert>
#define OPENXR_HPP_ASSERT assert
#endif































// 32-bit OpenXR is not typesafe for handles, so don't allow copy constructors
// on this platform by default. To enable this feature on 32-bit platforms
// please define OPENXR_HPP_TYPESAFE_CONVERSION
#if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__)) || defined(_M_X64) || defined(__ia64) || \
    defined(_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)
#if !defined(OPENXR_HPP_TYPESAFE_CONVERSION)
#define OPENXR_HPP_TYPESAFE_CONVERSION
#endif
#endif































#if !defined(OPENXR_HPP_INLINE)
#if defined(__clang___)
#if __has_attribute(always_inline)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#else
#define OPENXR_HPP_INLINE inline
#endif
#elif defined(__GNUC__)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#elif defined(_MSC_VER)
#define OPENXR_HPP_INLINE inline
#else
#define OPENXR_HPP_INLINE inline
#endif
#endif  // !OPENXR_HPP_INLINE

#if !defined(OPENXR_HPP_CONSTEXPR)
#if defined(_MSC_VER) && (_MSC_VER <= 1800)
#define OPENXR_HPP_CONSTEXPR
#else
#define OPENXR_HPP_CONSTEXPR constexpr
#endif
#endif  // !OPENXR_HPP_CONSTEXPR

#if !defined(OPENXR_HPP_SWITCH_CONSTEXPR)
//! @todo set this to constexpr in c++14
#define OPENXR_HPP_SWITCH_CONSTEXPR
#endif  // !OPENXR_HPP_SWITCH_CONSTEXPR































#if !defined(OPENXR_HPP_NAMESPACE)
#define OPENXR_HPP_NAMESPACE xr
#endif  // !OPENXR_HPP_NAMESPACE































#if !defined(OPENXR_HPP_STRINGIFY)
#define OPENXR_HPP_STRINGIFY2(text) #text
#define OPENXR_HPP_STRINGIFY(text) OPENXR_HPP_STRINGIFY2(text)
#define OPENXR_HPP_NAMESPACE_STRING OPENXR_HPP_STRINGIFY(OPENXR_HPP_NAMESPACE)
#endif  // !OPENXR_HPP_STRINGIFY
































namespace OPENXR_HPP_NAMESPACE {

/**
 * @brief Template type for bit flag projection
 *
 * @tparam BitType The projected enum that contains the bits
 * @tparam MaskType The type of the combined flags, typically the default, XrFlags64.
 */
template <typename BitType, typename MaskType = XrFlags64>
class Flags {
   public:
    //! Default constructor
    OPENXR_HPP_CONSTEXPR Flags() : m_mask(0) {}

    //! Implicit constructor from a single bit
    Flags(BitType bit) : m_mask(static_cast<MaskType>(bit)) {}

    //! Copy constructor
    Flags(Flags const &rhs) = default;

    //! Copy assignment
    Flags &operator=(Flags const &rhs) = default;

    //! Explicit constructor from flags value
    explicit Flags(MaskType flags) : m_mask(flags) {}

    //! OR update operator - commonly used for combining flags
    Flags &operator|=(Flags const &rhs) {
        m_mask |= rhs.m_mask;
        return *this;
    }

    //! AND update operator
    Flags &operator&=(Flags const &rhs) {
        m_mask &= rhs.m_mask;
        return *this;
    }

    //! XOR update operator
    Flags &operator^=(Flags const &rhs) {
        m_mask ^= rhs.m_mask;
        return *this;
    }

    //! OR operator, often used for combining flags.
    Flags operator|(Flags const &rhs) const {
        Flags result(*this);
        result |= rhs;
        return result;
    }

    //! AND operator, often used for testing the value of certain bits.
    Flags operator&(Flags const &rhs) const {
        Flags result(*this);
        result &= rhs;
        return result;
    }

    //! XOR operator
    Flags operator^(Flags const &rhs) const {
        Flags result(*this);
        result ^= rhs;
        return result;
    }

    //! Unary negation: true if all bits were false.
    bool operator!() const { return !m_mask; }

    //! Bitwise negation (complement) operator
    Flags operator~() const {
        Flags result(*this);
        result.m_mask ^= static_cast<MaskType>(BitType::AllBits);
        return result;
    }

    //! Accessor for contained value
    MaskType get() const noexcept { return m_mask; }

    //! Equality comparison
    bool operator==(Flags const &rhs) const { return m_mask == rhs.m_mask; }

    //! Inequality comparison
    bool operator!=(Flags const &rhs) const { return m_mask != rhs.m_mask; }

    //! Equality comparison, mainly intended for compare to 0
    bool operator==(int rhs) const { return m_mask == static_cast<MaskType>(rhs); }

    //! Inequality comparison, mainly intended for compare to 0
    bool operator!=(int rhs) const { return m_mask != static_cast<MaskType>(rhs); }

    //! Explicit bool conversion: true if any bits are true.
    explicit operator bool() const { return !!m_mask; }

    //! Explicit conversion operator to the underlying mask type.
    explicit operator MaskType() const { return m_mask; }

   private:
    MaskType m_mask;
};

/**
 * @brief Bitwise OR between a Flags<> value and a single bit.
 *
 * @tparam BitType The projected bit type
 * @param bit The single bit
 * @param flags The Flags<> value
 * @return Flags<BitType>
 *
 * @relates Flags
 */
template <typename BitType, typename MaskType>
Flags<BitType, MaskType> operator|(BitType bit, Flags<BitType, MaskType> const &flags) {
    return flags | bit;
}

/**
 * @brief Bitwise AND between a Flags<> value and a single bit.
 *
 * @tparam BitType The projected bit type
 * @param bit The single bit
 * @param flags The Flags<> value
 * @return Flags<BitType>
 *
 * @relates Flags
 */
template <typename BitType, typename MaskType>
Flags<BitType, MaskType> operator&(BitType bit, Flags<BitType, MaskType> const &flags) {
    return flags & bit;
}

/**
 * @brief Bitwise XOR between a Flags<> value and a single bit.
 *
 * @tparam BitType The projected bit type
 * @param bit The single bit
 * @param flags The Flags<> value
 * @return Flags<BitType>
 *
 * @relates Flags
 */
template <typename BitType, typename MaskType>
Flags<BitType, MaskType> operator^(BitType bit, Flags<BitType, MaskType> const &flags) {
    return flags ^ bit;
}

}  // namespace OPENXR_HPP_NAMESPACE
namespace OPENXR_HPP_NAMESPACE {

/*!
 * @defgroup flags Flags
 * @brief C++ flags classes corresponding to OpenXR C flags and flagbits, plus associated utility functions.
 * @ingroup wrappers
 * @{
 */



































/*!
 * @brief Flag bits for XrInstanceCreateFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrInstanceCreateFlagBits>
 * @xrentity{XrInstanceCreateFlagBits}
 * @see InstanceCreateFlags
 */
enum class InstanceCreateFlagBits : XrFlags64 {
    None = 0,
    AllBits =
 0
};

/*!
 * @brief Flags class projection of XrInstanceCreateFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrInstanceCreateFlags>
 * @xrentity{XrInstanceCreateFlagBits}
 * @see InstanceCreateFlagBits, xr::Flags
 */
using InstanceCreateFlags = Flags<InstanceCreateFlagBits, XrInstanceCreateFlags>;

/*!
 * @brief Bitwise OR operator between two InstanceCreateFlagBits flag bits.
 * @see InstanceCreateFlagBits, InstanceCreateFlags, xr::Flags
 */
OPENXR_HPP_INLINE InstanceCreateFlags operator|( InstanceCreateFlagBits bit0, InstanceCreateFlagBits bit1) {
    return InstanceCreateFlags( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a InstanceCreateFlagBits flag bit.
 * @see InstanceCreateFlagBits, InstanceCreateFlags, xr::Flags
 */
OPENXR_HPP_INLINE InstanceCreateFlags operator~( InstanceCreateFlagBits bits) {
    return ~( InstanceCreateFlags( bits ) );
}




































/*!
 * @brief Flag bits for XrSessionCreateFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSessionCreateFlagBits>
 * @xrentity{XrSessionCreateFlagBits}
 * @see SessionCreateFlags
 */
enum class SessionCreateFlagBits : XrFlags64 {
    None = 0,
    AllBits =
 0
};

/*!
 * @brief Flags class projection of XrSessionCreateFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSessionCreateFlags>
 * @xrentity{XrSessionCreateFlagBits}
 * @see SessionCreateFlagBits, xr::Flags
 */
using SessionCreateFlags = Flags<SessionCreateFlagBits, XrSessionCreateFlags>;

/*!
 * @brief Bitwise OR operator between two SessionCreateFlagBits flag bits.
 * @see SessionCreateFlagBits, SessionCreateFlags, xr::Flags
 */
OPENXR_HPP_INLINE SessionCreateFlags operator|( SessionCreateFlagBits bit0, SessionCreateFlagBits bit1) {
    return SessionCreateFlags( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SessionCreateFlagBits flag bit.
 * @see SessionCreateFlagBits, SessionCreateFlags, xr::Flags
 */
OPENXR_HPP_INLINE SessionCreateFlags operator~( SessionCreateFlagBits bits) {
    return ~( SessionCreateFlags( bits ) );
}




































/*!
 * @brief Flag bits for XrSpaceVelocityFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpaceVelocityFlagBits>
 * @xrentity{XrSpaceVelocityFlagBits}
 * @see SpaceVelocityFlags
 */
enum class SpaceVelocityFlagBits : XrFlags64 {
    None = 0,
    LinearValid = XR_SPACE_VELOCITY_LINEAR_VALID_BIT,
    AngularValid = XR_SPACE_VELOCITY_ANGULAR_VALID_BIT,
    AllBits =
XR_SPACE_VELOCITY_LINEAR_VALID_BIT | XR_SPACE_VELOCITY_ANGULAR_VALID_BIT};

/*!
 * @brief Flags class projection of XrSpaceVelocityFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpaceVelocityFlags>
 * @xrentity{XrSpaceVelocityFlagBits}
 * @see SpaceVelocityFlagBits, xr::Flags
 */
using SpaceVelocityFlags = Flags<SpaceVelocityFlagBits, XrSpaceVelocityFlags>;

/*!
 * @brief Bitwise OR operator between two SpaceVelocityFlagBits flag bits.
 * @see SpaceVelocityFlagBits, SpaceVelocityFlags, xr::Flags
 */
OPENXR_HPP_INLINE SpaceVelocityFlags operator|( SpaceVelocityFlagBits bit0, SpaceVelocityFlagBits bit1) {
    return SpaceVelocityFlags( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SpaceVelocityFlagBits flag bit.
 * @see SpaceVelocityFlagBits, SpaceVelocityFlags, xr::Flags
 */
OPENXR_HPP_INLINE SpaceVelocityFlags operator~( SpaceVelocityFlagBits bits) {
    return ~( SpaceVelocityFlags( bits ) );
}




































/*!
 * @brief Flag bits for XrSpaceLocationFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpaceLocationFlagBits>
 * @xrentity{XrSpaceLocationFlagBits}
 * @see SpaceLocationFlags
 */
enum class SpaceLocationFlagBits : XrFlags64 {
    None = 0,
    OrientationValid = XR_SPACE_LOCATION_ORIENTATION_VALID_BIT,
    PositionValid = XR_SPACE_LOCATION_POSITION_VALID_BIT,
    OrientationTracked = XR_SPACE_LOCATION_ORIENTATION_TRACKED_BIT,
    PositionTracked = XR_SPACE_LOCATION_POSITION_TRACKED_BIT,
    AllBits =
XR_SPACE_LOCATION_ORIENTATION_VALID_BIT | XR_SPACE_LOCATION_POSITION_VALID_BIT | XR_SPACE_LOCATION_ORIENTATION_TRACKED_BIT | XR_SPACE_LOCATION_POSITION_TRACKED_BIT};

/*!
 * @brief Flags class projection of XrSpaceLocationFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpaceLocationFlags>
 * @xrentity{XrSpaceLocationFlagBits}
 * @see SpaceLocationFlagBits, xr::Flags
 */
using SpaceLocationFlags = Flags<SpaceLocationFlagBits, XrSpaceLocationFlags>;

/*!
 * @brief Bitwise OR operator between two SpaceLocationFlagBits flag bits.
 * @see SpaceLocationFlagBits, SpaceLocationFlags, xr::Flags
 */
OPENXR_HPP_INLINE SpaceLocationFlags operator|( SpaceLocationFlagBits bit0, SpaceLocationFlagBits bit1) {
    return SpaceLocationFlags( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SpaceLocationFlagBits flag bit.
 * @see SpaceLocationFlagBits, SpaceLocationFlags, xr::Flags
 */
OPENXR_HPP_INLINE SpaceLocationFlags operator~( SpaceLocationFlagBits bits) {
    return ~( SpaceLocationFlags( bits ) );
}




































/*!
 * @brief Flag bits for XrSwapchainCreateFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSwapchainCreateFlagBits>
 * @xrentity{XrSwapchainCreateFlagBits}
 * @see SwapchainCreateFlags
 */
enum class SwapchainCreateFlagBits : XrFlags64 {
    None = 0,
    ProtectedContent = XR_SWAPCHAIN_CREATE_PROTECTED_CONTENT_BIT,
    StaticImage = XR_SWAPCHAIN_CREATE_STATIC_IMAGE_BIT,
    AllBits =
XR_SWAPCHAIN_CREATE_PROTECTED_CONTENT_BIT | XR_SWAPCHAIN_CREATE_STATIC_IMAGE_BIT};

/*!
 * @brief Flags class projection of XrSwapchainCreateFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSwapchainCreateFlags>
 * @xrentity{XrSwapchainCreateFlagBits}
 * @see SwapchainCreateFlagBits, xr::Flags
 */
using SwapchainCreateFlags = Flags<SwapchainCreateFlagBits, XrSwapchainCreateFlags>;

/*!
 * @brief Bitwise OR operator between two SwapchainCreateFlagBits flag bits.
 * @see SwapchainCreateFlagBits, SwapchainCreateFlags, xr::Flags
 */
OPENXR_HPP_INLINE SwapchainCreateFlags operator|( SwapchainCreateFlagBits bit0, SwapchainCreateFlagBits bit1) {
    return SwapchainCreateFlags( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SwapchainCreateFlagBits flag bit.
 * @see SwapchainCreateFlagBits, SwapchainCreateFlags, xr::Flags
 */
OPENXR_HPP_INLINE SwapchainCreateFlags operator~( SwapchainCreateFlagBits bits) {
    return ~( SwapchainCreateFlags( bits ) );
}




































/*!
 * @brief Flag bits for XrSwapchainUsageFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSwapchainUsageFlagBits>
 * @xrentity{XrSwapchainUsageFlagBits}
 * @see SwapchainUsageFlags
 */
enum class SwapchainUsageFlagBits : XrFlags64 {
    None = 0,
    ColorAttachment = XR_SWAPCHAIN_USAGE_COLOR_ATTACHMENT_BIT,
    DepthStencilAttachment = XR_SWAPCHAIN_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,
    UnorderedAccess = XR_SWAPCHAIN_USAGE_UNORDERED_ACCESS_BIT,
    TransferSrc = XR_SWAPCHAIN_USAGE_TRANSFER_SRC_BIT,
    TransferDst = XR_SWAPCHAIN_USAGE_TRANSFER_DST_BIT,
    Sampled = XR_SWAPCHAIN_USAGE_SAMPLED_BIT,
    MutableFormat = XR_SWAPCHAIN_USAGE_MUTABLE_FORMAT_BIT,
    InputAttachmentBitMND = XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_MND,
    InputAttachmentBitKHR = XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_KHR,
    AllBits =
XR_SWAPCHAIN_USAGE_COLOR_ATTACHMENT_BIT | XR_SWAPCHAIN_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT | XR_SWAPCHAIN_USAGE_UNORDERED_ACCESS_BIT | XR_SWAPCHAIN_USAGE_TRANSFER_SRC_BIT | XR_SWAPCHAIN_USAGE_TRANSFER_DST_BIT | XR_SWAPCHAIN_USAGE_SAMPLED_BIT | XR_SWAPCHAIN_USAGE_MUTABLE_FORMAT_BIT | XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_MND | XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_KHR};

/*!
 * @brief Flags class projection of XrSwapchainUsageFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSwapchainUsageFlags>
 * @xrentity{XrSwapchainUsageFlagBits}
 * @see SwapchainUsageFlagBits, xr::Flags
 */
using SwapchainUsageFlags = Flags<SwapchainUsageFlagBits, XrSwapchainUsageFlags>;

/*!
 * @brief Bitwise OR operator between two SwapchainUsageFlagBits flag bits.
 * @see SwapchainUsageFlagBits, SwapchainUsageFlags, xr::Flags
 */
OPENXR_HPP_INLINE SwapchainUsageFlags operator|( SwapchainUsageFlagBits bit0, SwapchainUsageFlagBits bit1) {
    return SwapchainUsageFlags( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SwapchainUsageFlagBits flag bit.
 * @see SwapchainUsageFlagBits, SwapchainUsageFlags, xr::Flags
 */
OPENXR_HPP_INLINE SwapchainUsageFlags operator~( SwapchainUsageFlagBits bits) {
    return ~( SwapchainUsageFlags( bits ) );
}




































/*!
 * @brief Flag bits for XrCompositionLayerFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrCompositionLayerFlagBits>
 * @xrentity{XrCompositionLayerFlagBits}
 * @see CompositionLayerFlags
 */
enum class CompositionLayerFlagBits : XrFlags64 {
    None = 0,
    CorrectChromaticAberration = XR_COMPOSITION_LAYER_CORRECT_CHROMATIC_ABERRATION_BIT,
    BlendTextureSourceAlpha = XR_COMPOSITION_LAYER_BLEND_TEXTURE_SOURCE_ALPHA_BIT,
    UnpremultipliedAlpha = XR_COMPOSITION_LAYER_UNPREMULTIPLIED_ALPHA_BIT,
    InvertedAlphaBitEXT = XR_COMPOSITION_LAYER_INVERTED_ALPHA_BIT_EXT,
    AllBits =
XR_COMPOSITION_LAYER_CORRECT_CHROMATIC_ABERRATION_BIT | XR_COMPOSITION_LAYER_BLEND_TEXTURE_SOURCE_ALPHA_BIT | XR_COMPOSITION_LAYER_UNPREMULTIPLIED_ALPHA_BIT | XR_COMPOSITION_LAYER_INVERTED_ALPHA_BIT_EXT};

/*!
 * @brief Flags class projection of XrCompositionLayerFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrCompositionLayerFlags>
 * @xrentity{XrCompositionLayerFlagBits}
 * @see CompositionLayerFlagBits, xr::Flags
 */
using CompositionLayerFlags = Flags<CompositionLayerFlagBits, XrCompositionLayerFlags>;

/*!
 * @brief Bitwise OR operator between two CompositionLayerFlagBits flag bits.
 * @see CompositionLayerFlagBits, CompositionLayerFlags, xr::Flags
 */
OPENXR_HPP_INLINE CompositionLayerFlags operator|( CompositionLayerFlagBits bit0, CompositionLayerFlagBits bit1) {
    return CompositionLayerFlags( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a CompositionLayerFlagBits flag bit.
 * @see CompositionLayerFlagBits, CompositionLayerFlags, xr::Flags
 */
OPENXR_HPP_INLINE CompositionLayerFlags operator~( CompositionLayerFlagBits bits) {
    return ~( CompositionLayerFlags( bits ) );
}




































/*!
 * @brief Flag bits for XrViewStateFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrViewStateFlagBits>
 * @xrentity{XrViewStateFlagBits}
 * @see ViewStateFlags
 */
enum class ViewStateFlagBits : XrFlags64 {
    None = 0,
    OrientationValid = XR_VIEW_STATE_ORIENTATION_VALID_BIT,
    PositionValid = XR_VIEW_STATE_POSITION_VALID_BIT,
    OrientationTracked = XR_VIEW_STATE_ORIENTATION_TRACKED_BIT,
    PositionTracked = XR_VIEW_STATE_POSITION_TRACKED_BIT,
    AllBits =
XR_VIEW_STATE_ORIENTATION_VALID_BIT | XR_VIEW_STATE_POSITION_VALID_BIT | XR_VIEW_STATE_ORIENTATION_TRACKED_BIT | XR_VIEW_STATE_POSITION_TRACKED_BIT};

/*!
 * @brief Flags class projection of XrViewStateFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrViewStateFlags>
 * @xrentity{XrViewStateFlagBits}
 * @see ViewStateFlagBits, xr::Flags
 */
using ViewStateFlags = Flags<ViewStateFlagBits, XrViewStateFlags>;

/*!
 * @brief Bitwise OR operator between two ViewStateFlagBits flag bits.
 * @see ViewStateFlagBits, ViewStateFlags, xr::Flags
 */
OPENXR_HPP_INLINE ViewStateFlags operator|( ViewStateFlagBits bit0, ViewStateFlagBits bit1) {
    return ViewStateFlags( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a ViewStateFlagBits flag bit.
 * @see ViewStateFlagBits, ViewStateFlags, xr::Flags
 */
OPENXR_HPP_INLINE ViewStateFlags operator~( ViewStateFlagBits bits) {
    return ~( ViewStateFlags( bits ) );
}




































/*!
 * @brief Flag bits for XrInputSourceLocalizedNameFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrInputSourceLocalizedNameFlagBits>
 * @xrentity{XrInputSourceLocalizedNameFlagBits}
 * @see InputSourceLocalizedNameFlags
 */
enum class InputSourceLocalizedNameFlagBits : XrFlags64 {
    None = 0,
    UserPath = XR_INPUT_SOURCE_LOCALIZED_NAME_USER_PATH_BIT,
    InteractionProfile = XR_INPUT_SOURCE_LOCALIZED_NAME_INTERACTION_PROFILE_BIT,
    Component = XR_INPUT_SOURCE_LOCALIZED_NAME_COMPONENT_BIT,
    AllBits =
XR_INPUT_SOURCE_LOCALIZED_NAME_USER_PATH_BIT | XR_INPUT_SOURCE_LOCALIZED_NAME_INTERACTION_PROFILE_BIT | XR_INPUT_SOURCE_LOCALIZED_NAME_COMPONENT_BIT};

/*!
 * @brief Flags class projection of XrInputSourceLocalizedNameFlags
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrInputSourceLocalizedNameFlags>
 * @xrentity{XrInputSourceLocalizedNameFlagBits}
 * @see InputSourceLocalizedNameFlagBits, xr::Flags
 */
using InputSourceLocalizedNameFlags = Flags<InputSourceLocalizedNameFlagBits, XrInputSourceLocalizedNameFlags>;

/*!
 * @brief Bitwise OR operator between two InputSourceLocalizedNameFlagBits flag bits.
 * @see InputSourceLocalizedNameFlagBits, InputSourceLocalizedNameFlags, xr::Flags
 */
OPENXR_HPP_INLINE InputSourceLocalizedNameFlags operator|( InputSourceLocalizedNameFlagBits bit0, InputSourceLocalizedNameFlagBits bit1) {
    return InputSourceLocalizedNameFlags( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a InputSourceLocalizedNameFlagBits flag bit.
 * @see InputSourceLocalizedNameFlagBits, InputSourceLocalizedNameFlags, xr::Flags
 */
OPENXR_HPP_INLINE InputSourceLocalizedNameFlags operator~( InputSourceLocalizedNameFlagBits bits) {
    return ~( InputSourceLocalizedNameFlags( bits ) );
}



































#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
/*!
 * @brief Flag bits for XrVulkanInstanceCreateFlagsKHR
 * 
 * Provided by the `XR_KHR_vulkan_enable2` extension.
 * Be sure to include `<openxr_platform.h>` before including this header to use it.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrVulkanInstanceCreateFlagBitsKHR>
 * @xrentity{XrVulkanInstanceCreateFlagBitsKHR}
 * @see VulkanInstanceCreateFlagsKHR
 */
enum class VulkanInstanceCreateFlagBitsKHR : XrFlags64 {
    None = 0,
    AllBits =
 0
};

/*!
 * @brief Flags class projection of XrVulkanInstanceCreateFlagsKHR
 * 
 * Provided by the `XR_KHR_vulkan_enable2` extension.
 * Be sure to include `<openxr_platform.h>` before including this header to use it.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrVulkanInstanceCreateFlagsKHR>
 * @xrentity{XrVulkanInstanceCreateFlagBitsKHR}
 * @see VulkanInstanceCreateFlagBitsKHR, xr::Flags
 */
using VulkanInstanceCreateFlagsKHR = Flags<VulkanInstanceCreateFlagBitsKHR, XrVulkanInstanceCreateFlagsKHR>;

/*!
 * @brief Bitwise OR operator between two VulkanInstanceCreateFlagBitsKHR flag bits.
 * @see VulkanInstanceCreateFlagBitsKHR, VulkanInstanceCreateFlagsKHR, xr::Flags
 */
OPENXR_HPP_INLINE VulkanInstanceCreateFlagsKHR operator|( VulkanInstanceCreateFlagBitsKHR bit0, VulkanInstanceCreateFlagBitsKHR bit1) {
    return VulkanInstanceCreateFlagsKHR( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a VulkanInstanceCreateFlagBitsKHR flag bit.
 * @see VulkanInstanceCreateFlagBitsKHR, VulkanInstanceCreateFlagsKHR, xr::Flags
 */
OPENXR_HPP_INLINE VulkanInstanceCreateFlagsKHR operator~( VulkanInstanceCreateFlagBitsKHR bits) {
    return ~( VulkanInstanceCreateFlagsKHR( bits ) );
}

#endif // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

































#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
/*!
 * @brief Flag bits for XrVulkanDeviceCreateFlagsKHR
 * 
 * Provided by the `XR_KHR_vulkan_enable2` extension.
 * Be sure to include `<openxr_platform.h>` before including this header to use it.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrVulkanDeviceCreateFlagBitsKHR>
 * @xrentity{XrVulkanDeviceCreateFlagBitsKHR}
 * @see VulkanDeviceCreateFlagsKHR
 */
enum class VulkanDeviceCreateFlagBitsKHR : XrFlags64 {
    None = 0,
    AllBits =
 0
};

/*!
 * @brief Flags class projection of XrVulkanDeviceCreateFlagsKHR
 * 
 * Provided by the `XR_KHR_vulkan_enable2` extension.
 * Be sure to include `<openxr_platform.h>` before including this header to use it.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrVulkanDeviceCreateFlagsKHR>
 * @xrentity{XrVulkanDeviceCreateFlagBitsKHR}
 * @see VulkanDeviceCreateFlagBitsKHR, xr::Flags
 */
using VulkanDeviceCreateFlagsKHR = Flags<VulkanDeviceCreateFlagBitsKHR, XrVulkanDeviceCreateFlagsKHR>;

/*!
 * @brief Bitwise OR operator between two VulkanDeviceCreateFlagBitsKHR flag bits.
 * @see VulkanDeviceCreateFlagBitsKHR, VulkanDeviceCreateFlagsKHR, xr::Flags
 */
OPENXR_HPP_INLINE VulkanDeviceCreateFlagsKHR operator|( VulkanDeviceCreateFlagBitsKHR bit0, VulkanDeviceCreateFlagBitsKHR bit1) {
    return VulkanDeviceCreateFlagsKHR( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a VulkanDeviceCreateFlagBitsKHR flag bit.
 * @see VulkanDeviceCreateFlagBitsKHR, VulkanDeviceCreateFlagsKHR, xr::Flags
 */
OPENXR_HPP_INLINE VulkanDeviceCreateFlagsKHR operator~( VulkanDeviceCreateFlagBitsKHR bits) {
    return ~( VulkanDeviceCreateFlagsKHR( bits ) );
}

#endif // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

































#ifdef XR_EXT_debug_utils
/*!
 * @brief Flag bits for XrDebugUtilsMessageSeverityFlagsEXT
 * 
 * Provided by the `XR_EXT_debug_utils` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrDebugUtilsMessageSeverityFlagBitsEXT>
 * @xrentity{XrDebugUtilsMessageSeverityFlagBitsEXT}
 * @see DebugUtilsMessageSeverityFlagsEXT
 */
enum class DebugUtilsMessageSeverityFlagBitsEXT : XrFlags64 {
    None = 0,
    Verbose = XR_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT,
    Info = XR_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT,
    Warning = XR_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT,
    Error = XR_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT,
    AllBits =
XR_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT | XR_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT | XR_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | XR_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT};

/*!
 * @brief Flags class projection of XrDebugUtilsMessageSeverityFlagsEXT
 * 
 * Provided by the `XR_EXT_debug_utils` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrDebugUtilsMessageSeverityFlagsEXT>
 * @xrentity{XrDebugUtilsMessageSeverityFlagBitsEXT}
 * @see DebugUtilsMessageSeverityFlagBitsEXT, xr::Flags
 */
using DebugUtilsMessageSeverityFlagsEXT = Flags<DebugUtilsMessageSeverityFlagBitsEXT, XrDebugUtilsMessageSeverityFlagsEXT>;

/*!
 * @brief Bitwise OR operator between two DebugUtilsMessageSeverityFlagBitsEXT flag bits.
 * @see DebugUtilsMessageSeverityFlagBitsEXT, DebugUtilsMessageSeverityFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE DebugUtilsMessageSeverityFlagsEXT operator|( DebugUtilsMessageSeverityFlagBitsEXT bit0, DebugUtilsMessageSeverityFlagBitsEXT bit1) {
    return DebugUtilsMessageSeverityFlagsEXT( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a DebugUtilsMessageSeverityFlagBitsEXT flag bit.
 * @see DebugUtilsMessageSeverityFlagBitsEXT, DebugUtilsMessageSeverityFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE DebugUtilsMessageSeverityFlagsEXT operator~( DebugUtilsMessageSeverityFlagBitsEXT bits) {
    return ~( DebugUtilsMessageSeverityFlagsEXT( bits ) );
}

#endif  // XR_EXT_debug_utils

































#ifdef XR_EXT_debug_utils
/*!
 * @brief Flag bits for XrDebugUtilsMessageTypeFlagsEXT
 * 
 * Provided by the `XR_EXT_debug_utils` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrDebugUtilsMessageTypeFlagBitsEXT>
 * @xrentity{XrDebugUtilsMessageTypeFlagBitsEXT}
 * @see DebugUtilsMessageTypeFlagsEXT
 */
enum class DebugUtilsMessageTypeFlagBitsEXT : XrFlags64 {
    None = 0,
    General = XR_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT,
    Validation = XR_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT,
    Performance = XR_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT,
    Conformance = XR_DEBUG_UTILS_MESSAGE_TYPE_CONFORMANCE_BIT_EXT,
    AllBits =
XR_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | XR_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | XR_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT | XR_DEBUG_UTILS_MESSAGE_TYPE_CONFORMANCE_BIT_EXT};

/*!
 * @brief Flags class projection of XrDebugUtilsMessageTypeFlagsEXT
 * 
 * Provided by the `XR_EXT_debug_utils` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrDebugUtilsMessageTypeFlagsEXT>
 * @xrentity{XrDebugUtilsMessageTypeFlagBitsEXT}
 * @see DebugUtilsMessageTypeFlagBitsEXT, xr::Flags
 */
using DebugUtilsMessageTypeFlagsEXT = Flags<DebugUtilsMessageTypeFlagBitsEXT, XrDebugUtilsMessageTypeFlagsEXT>;

/*!
 * @brief Bitwise OR operator between two DebugUtilsMessageTypeFlagBitsEXT flag bits.
 * @see DebugUtilsMessageTypeFlagBitsEXT, DebugUtilsMessageTypeFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE DebugUtilsMessageTypeFlagsEXT operator|( DebugUtilsMessageTypeFlagBitsEXT bit0, DebugUtilsMessageTypeFlagBitsEXT bit1) {
    return DebugUtilsMessageTypeFlagsEXT( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a DebugUtilsMessageTypeFlagBitsEXT flag bit.
 * @see DebugUtilsMessageTypeFlagBitsEXT, DebugUtilsMessageTypeFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE DebugUtilsMessageTypeFlagsEXT operator~( DebugUtilsMessageTypeFlagBitsEXT bits) {
    return ~( DebugUtilsMessageTypeFlagsEXT( bits ) );
}

#endif  // XR_EXT_debug_utils

































#ifdef XR_EXTX_overlay
/*!
 * @brief Flag bits for XrOverlaySessionCreateFlagsEXTX
 * 
 * Provided by the `XR_EXTX_overlay` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrOverlaySessionCreateFlagBitsEXTX>
 * @xrentity{XrOverlaySessionCreateFlagBitsEXTX}
 * @see OverlaySessionCreateFlagsEXTX
 */
enum class OverlaySessionCreateFlagBitsEXTX : XrFlags64 {
    None = 0,
    AllBits =
 0
};

/*!
 * @brief Flags class projection of XrOverlaySessionCreateFlagsEXTX
 * 
 * Provided by the `XR_EXTX_overlay` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrOverlaySessionCreateFlagsEXTX>
 * @xrentity{XrOverlaySessionCreateFlagBitsEXTX}
 * @see OverlaySessionCreateFlagBitsEXTX, xr::Flags
 */
using OverlaySessionCreateFlagsEXTX = Flags<OverlaySessionCreateFlagBitsEXTX, XrOverlaySessionCreateFlagsEXTX>;

/*!
 * @brief Bitwise OR operator between two OverlaySessionCreateFlagBitsEXTX flag bits.
 * @see OverlaySessionCreateFlagBitsEXTX, OverlaySessionCreateFlagsEXTX, xr::Flags
 */
OPENXR_HPP_INLINE OverlaySessionCreateFlagsEXTX operator|( OverlaySessionCreateFlagBitsEXTX bit0, OverlaySessionCreateFlagBitsEXTX bit1) {
    return OverlaySessionCreateFlagsEXTX( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a OverlaySessionCreateFlagBitsEXTX flag bit.
 * @see OverlaySessionCreateFlagBitsEXTX, OverlaySessionCreateFlagsEXTX, xr::Flags
 */
OPENXR_HPP_INLINE OverlaySessionCreateFlagsEXTX operator~( OverlaySessionCreateFlagBitsEXTX bits) {
    return ~( OverlaySessionCreateFlagsEXTX( bits ) );
}

#endif  // XR_EXTX_overlay

































#ifdef XR_EXTX_overlay
/*!
 * @brief Flag bits for XrOverlayMainSessionFlagsEXTX
 * 
 * Provided by the `XR_EXTX_overlay` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrOverlayMainSessionFlagBitsEXTX>
 * @xrentity{XrOverlayMainSessionFlagBitsEXTX}
 * @see OverlayMainSessionFlagsEXTX
 */
enum class OverlayMainSessionFlagBitsEXTX : XrFlags64 {
    None = 0,
    EnabledCompositionLayerInfoDepth = XR_OVERLAY_MAIN_SESSION_ENABLED_COMPOSITION_LAYER_INFO_DEPTH_BIT_EXTX,
    AllBits =
XR_OVERLAY_MAIN_SESSION_ENABLED_COMPOSITION_LAYER_INFO_DEPTH_BIT_EXTX};

/*!
 * @brief Flags class projection of XrOverlayMainSessionFlagsEXTX
 * 
 * Provided by the `XR_EXTX_overlay` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrOverlayMainSessionFlagsEXTX>
 * @xrentity{XrOverlayMainSessionFlagBitsEXTX}
 * @see OverlayMainSessionFlagBitsEXTX, xr::Flags
 */
using OverlayMainSessionFlagsEXTX = Flags<OverlayMainSessionFlagBitsEXTX, XrOverlayMainSessionFlagsEXTX>;

/*!
 * @brief Bitwise OR operator between two OverlayMainSessionFlagBitsEXTX flag bits.
 * @see OverlayMainSessionFlagBitsEXTX, OverlayMainSessionFlagsEXTX, xr::Flags
 */
OPENXR_HPP_INLINE OverlayMainSessionFlagsEXTX operator|( OverlayMainSessionFlagBitsEXTX bit0, OverlayMainSessionFlagBitsEXTX bit1) {
    return OverlayMainSessionFlagsEXTX( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a OverlayMainSessionFlagBitsEXTX flag bit.
 * @see OverlayMainSessionFlagBitsEXTX, OverlayMainSessionFlagsEXTX, xr::Flags
 */
OPENXR_HPP_INLINE OverlayMainSessionFlagsEXTX operator~( OverlayMainSessionFlagBitsEXTX bits) {
    return ~( OverlayMainSessionFlagsEXTX( bits ) );
}

#endif  // XR_EXTX_overlay

































#ifdef XR_FB_composition_layer_image_layout
/*!
 * @brief Flag bits for XrCompositionLayerImageLayoutFlagsFB
 * 
 * Provided by the `XR_FB_composition_layer_image_layout` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrCompositionLayerImageLayoutFlagBitsFB>
 * @xrentity{XrCompositionLayerImageLayoutFlagBitsFB}
 * @see CompositionLayerImageLayoutFlagsFB
 */
enum class CompositionLayerImageLayoutFlagBitsFB : XrFlags64 {
    None = 0,
    VerticalFlip = XR_COMPOSITION_LAYER_IMAGE_LAYOUT_VERTICAL_FLIP_BIT_FB,
    AllBits =
XR_COMPOSITION_LAYER_IMAGE_LAYOUT_VERTICAL_FLIP_BIT_FB};

/*!
 * @brief Flags class projection of XrCompositionLayerImageLayoutFlagsFB
 * 
 * Provided by the `XR_FB_composition_layer_image_layout` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrCompositionLayerImageLayoutFlagsFB>
 * @xrentity{XrCompositionLayerImageLayoutFlagBitsFB}
 * @see CompositionLayerImageLayoutFlagBitsFB, xr::Flags
 */
using CompositionLayerImageLayoutFlagsFB = Flags<CompositionLayerImageLayoutFlagBitsFB, XrCompositionLayerImageLayoutFlagsFB>;

/*!
 * @brief Bitwise OR operator between two CompositionLayerImageLayoutFlagBitsFB flag bits.
 * @see CompositionLayerImageLayoutFlagBitsFB, CompositionLayerImageLayoutFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE CompositionLayerImageLayoutFlagsFB operator|( CompositionLayerImageLayoutFlagBitsFB bit0, CompositionLayerImageLayoutFlagBitsFB bit1) {
    return CompositionLayerImageLayoutFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a CompositionLayerImageLayoutFlagBitsFB flag bit.
 * @see CompositionLayerImageLayoutFlagBitsFB, CompositionLayerImageLayoutFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE CompositionLayerImageLayoutFlagsFB operator~( CompositionLayerImageLayoutFlagBitsFB bits) {
    return ~( CompositionLayerImageLayoutFlagsFB( bits ) );
}

#endif  // XR_FB_composition_layer_image_layout

































#ifdef XR_FB_android_surface_swapchain_create
#if defined(XR_USE_PLATFORM_ANDROID)
/*!
 * @brief Flag bits for XrAndroidSurfaceSwapchainFlagsFB
 * 
 * Provided by the `XR_FB_android_surface_swapchain_create` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrAndroidSurfaceSwapchainFlagBitsFB>
 * @xrentity{XrAndroidSurfaceSwapchainFlagBitsFB}
 * @see AndroidSurfaceSwapchainFlagsFB
 */
enum class AndroidSurfaceSwapchainFlagBitsFB : XrFlags64 {
    None = 0,
    Synchronous = XR_ANDROID_SURFACE_SWAPCHAIN_SYNCHRONOUS_BIT_FB,
    UseTimestamps = XR_ANDROID_SURFACE_SWAPCHAIN_USE_TIMESTAMPS_BIT_FB,
    AllBits =
XR_ANDROID_SURFACE_SWAPCHAIN_SYNCHRONOUS_BIT_FB | XR_ANDROID_SURFACE_SWAPCHAIN_USE_TIMESTAMPS_BIT_FB};

/*!
 * @brief Flags class projection of XrAndroidSurfaceSwapchainFlagsFB
 * 
 * Provided by the `XR_FB_android_surface_swapchain_create` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrAndroidSurfaceSwapchainFlagsFB>
 * @xrentity{XrAndroidSurfaceSwapchainFlagBitsFB}
 * @see AndroidSurfaceSwapchainFlagBitsFB, xr::Flags
 */
using AndroidSurfaceSwapchainFlagsFB = Flags<AndroidSurfaceSwapchainFlagBitsFB, XrAndroidSurfaceSwapchainFlagsFB>;

/*!
 * @brief Bitwise OR operator between two AndroidSurfaceSwapchainFlagBitsFB flag bits.
 * @see AndroidSurfaceSwapchainFlagBitsFB, AndroidSurfaceSwapchainFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE AndroidSurfaceSwapchainFlagsFB operator|( AndroidSurfaceSwapchainFlagBitsFB bit0, AndroidSurfaceSwapchainFlagBitsFB bit1) {
    return AndroidSurfaceSwapchainFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a AndroidSurfaceSwapchainFlagBitsFB flag bit.
 * @see AndroidSurfaceSwapchainFlagBitsFB, AndroidSurfaceSwapchainFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE AndroidSurfaceSwapchainFlagsFB operator~( AndroidSurfaceSwapchainFlagBitsFB bits) {
    return ~( AndroidSurfaceSwapchainFlagsFB( bits ) );
}

#endif // defined(XR_USE_PLATFORM_ANDROID)
#endif  // XR_FB_android_surface_swapchain_create

































#ifdef XR_FB_composition_layer_secure_content
/*!
 * @brief Flag bits for XrCompositionLayerSecureContentFlagsFB
 * 
 * Provided by the `XR_FB_composition_layer_secure_content` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrCompositionLayerSecureContentFlagBitsFB>
 * @xrentity{XrCompositionLayerSecureContentFlagBitsFB}
 * @see CompositionLayerSecureContentFlagsFB
 */
enum class CompositionLayerSecureContentFlagBitsFB : XrFlags64 {
    None = 0,
    ExcludeLayer = XR_COMPOSITION_LAYER_SECURE_CONTENT_EXCLUDE_LAYER_BIT_FB,
    ReplaceLayer = XR_COMPOSITION_LAYER_SECURE_CONTENT_REPLACE_LAYER_BIT_FB,
    AllBits =
XR_COMPOSITION_LAYER_SECURE_CONTENT_EXCLUDE_LAYER_BIT_FB | XR_COMPOSITION_LAYER_SECURE_CONTENT_REPLACE_LAYER_BIT_FB};

/*!
 * @brief Flags class projection of XrCompositionLayerSecureContentFlagsFB
 * 
 * Provided by the `XR_FB_composition_layer_secure_content` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrCompositionLayerSecureContentFlagsFB>
 * @xrentity{XrCompositionLayerSecureContentFlagBitsFB}
 * @see CompositionLayerSecureContentFlagBitsFB, xr::Flags
 */
using CompositionLayerSecureContentFlagsFB = Flags<CompositionLayerSecureContentFlagBitsFB, XrCompositionLayerSecureContentFlagsFB>;

/*!
 * @brief Bitwise OR operator between two CompositionLayerSecureContentFlagBitsFB flag bits.
 * @see CompositionLayerSecureContentFlagBitsFB, CompositionLayerSecureContentFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE CompositionLayerSecureContentFlagsFB operator|( CompositionLayerSecureContentFlagBitsFB bit0, CompositionLayerSecureContentFlagBitsFB bit1) {
    return CompositionLayerSecureContentFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a CompositionLayerSecureContentFlagBitsFB flag bit.
 * @see CompositionLayerSecureContentFlagBitsFB, CompositionLayerSecureContentFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE CompositionLayerSecureContentFlagsFB operator~( CompositionLayerSecureContentFlagBitsFB bits) {
    return ~( CompositionLayerSecureContentFlagsFB( bits ) );
}

#endif  // XR_FB_composition_layer_secure_content

































#ifdef XR_FB_hand_tracking_aim
/*!
 * @brief Flag bits for XrHandTrackingAimFlagsFB
 * 
 * Provided by the `XR_FB_hand_tracking_aim` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrHandTrackingAimFlagBitsFB>
 * @xrentity{XrHandTrackingAimFlagBitsFB}
 * @see HandTrackingAimFlagsFB
 */
enum class HandTrackingAimFlagBitsFB : XrFlags64 {
    None = 0,
    Computed = XR_HAND_TRACKING_AIM_COMPUTED_BIT_FB,
    Valid = XR_HAND_TRACKING_AIM_VALID_BIT_FB,
    IndexPinching = XR_HAND_TRACKING_AIM_INDEX_PINCHING_BIT_FB,
    MiddlePinching = XR_HAND_TRACKING_AIM_MIDDLE_PINCHING_BIT_FB,
    RingPinching = XR_HAND_TRACKING_AIM_RING_PINCHING_BIT_FB,
    LittlePinching = XR_HAND_TRACKING_AIM_LITTLE_PINCHING_BIT_FB,
    SystemGesture = XR_HAND_TRACKING_AIM_SYSTEM_GESTURE_BIT_FB,
    DominantHand = XR_HAND_TRACKING_AIM_DOMINANT_HAND_BIT_FB,
    MenuPressed = XR_HAND_TRACKING_AIM_MENU_PRESSED_BIT_FB,
    AllBits =
XR_HAND_TRACKING_AIM_COMPUTED_BIT_FB | XR_HAND_TRACKING_AIM_VALID_BIT_FB | XR_HAND_TRACKING_AIM_INDEX_PINCHING_BIT_FB | XR_HAND_TRACKING_AIM_MIDDLE_PINCHING_BIT_FB | XR_HAND_TRACKING_AIM_RING_PINCHING_BIT_FB | XR_HAND_TRACKING_AIM_LITTLE_PINCHING_BIT_FB | XR_HAND_TRACKING_AIM_SYSTEM_GESTURE_BIT_FB | XR_HAND_TRACKING_AIM_DOMINANT_HAND_BIT_FB | XR_HAND_TRACKING_AIM_MENU_PRESSED_BIT_FB};

/*!
 * @brief Flags class projection of XrHandTrackingAimFlagsFB
 * 
 * Provided by the `XR_FB_hand_tracking_aim` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrHandTrackingAimFlagsFB>
 * @xrentity{XrHandTrackingAimFlagBitsFB}
 * @see HandTrackingAimFlagBitsFB, xr::Flags
 */
using HandTrackingAimFlagsFB = Flags<HandTrackingAimFlagBitsFB, XrHandTrackingAimFlagsFB>;

/*!
 * @brief Bitwise OR operator between two HandTrackingAimFlagBitsFB flag bits.
 * @see HandTrackingAimFlagBitsFB, HandTrackingAimFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE HandTrackingAimFlagsFB operator|( HandTrackingAimFlagBitsFB bit0, HandTrackingAimFlagBitsFB bit1) {
    return HandTrackingAimFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a HandTrackingAimFlagBitsFB flag bit.
 * @see HandTrackingAimFlagBitsFB, HandTrackingAimFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE HandTrackingAimFlagsFB operator~( HandTrackingAimFlagBitsFB bits) {
    return ~( HandTrackingAimFlagsFB( bits ) );
}

#endif  // XR_FB_hand_tracking_aim

































#ifdef XR_FB_foveation
/*!
 * @brief Flag bits for XrSwapchainCreateFoveationFlagsFB
 * 
 * Provided by the `XR_FB_foveation` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSwapchainCreateFoveationFlagBitsFB>
 * @xrentity{XrSwapchainCreateFoveationFlagBitsFB}
 * @see SwapchainCreateFoveationFlagsFB
 */
enum class SwapchainCreateFoveationFlagBitsFB : XrFlags64 {
    None = 0,
    ScaledBin = XR_SWAPCHAIN_CREATE_FOVEATION_SCALED_BIN_BIT_FB,
    FragmentDensityMap = XR_SWAPCHAIN_CREATE_FOVEATION_FRAGMENT_DENSITY_MAP_BIT_FB,
    AllBits =
XR_SWAPCHAIN_CREATE_FOVEATION_SCALED_BIN_BIT_FB | XR_SWAPCHAIN_CREATE_FOVEATION_FRAGMENT_DENSITY_MAP_BIT_FB};

/*!
 * @brief Flags class projection of XrSwapchainCreateFoveationFlagsFB
 * 
 * Provided by the `XR_FB_foveation` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSwapchainCreateFoveationFlagsFB>
 * @xrentity{XrSwapchainCreateFoveationFlagBitsFB}
 * @see SwapchainCreateFoveationFlagBitsFB, xr::Flags
 */
using SwapchainCreateFoveationFlagsFB = Flags<SwapchainCreateFoveationFlagBitsFB, XrSwapchainCreateFoveationFlagsFB>;

/*!
 * @brief Bitwise OR operator between two SwapchainCreateFoveationFlagBitsFB flag bits.
 * @see SwapchainCreateFoveationFlagBitsFB, SwapchainCreateFoveationFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE SwapchainCreateFoveationFlagsFB operator|( SwapchainCreateFoveationFlagBitsFB bit0, SwapchainCreateFoveationFlagBitsFB bit1) {
    return SwapchainCreateFoveationFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SwapchainCreateFoveationFlagBitsFB flag bit.
 * @see SwapchainCreateFoveationFlagBitsFB, SwapchainCreateFoveationFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE SwapchainCreateFoveationFlagsFB operator~( SwapchainCreateFoveationFlagBitsFB bits) {
    return ~( SwapchainCreateFoveationFlagsFB( bits ) );
}

#endif  // XR_FB_foveation

































#ifdef XR_FB_foveation
/*!
 * @brief Flag bits for XrSwapchainStateFoveationFlagsFB
 * 
 * Provided by the `XR_FB_foveation` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSwapchainStateFoveationFlagBitsFB>
 * @xrentity{XrSwapchainStateFoveationFlagBitsFB}
 * @see SwapchainStateFoveationFlagsFB
 */
enum class SwapchainStateFoveationFlagBitsFB : XrFlags64 {
    None = 0,
    AllBits =
 0
};

/*!
 * @brief Flags class projection of XrSwapchainStateFoveationFlagsFB
 * 
 * Provided by the `XR_FB_foveation` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSwapchainStateFoveationFlagsFB>
 * @xrentity{XrSwapchainStateFoveationFlagBitsFB}
 * @see SwapchainStateFoveationFlagBitsFB, xr::Flags
 */
using SwapchainStateFoveationFlagsFB = Flags<SwapchainStateFoveationFlagBitsFB, XrSwapchainStateFoveationFlagsFB>;

/*!
 * @brief Bitwise OR operator between two SwapchainStateFoveationFlagBitsFB flag bits.
 * @see SwapchainStateFoveationFlagBitsFB, SwapchainStateFoveationFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE SwapchainStateFoveationFlagsFB operator|( SwapchainStateFoveationFlagBitsFB bit0, SwapchainStateFoveationFlagBitsFB bit1) {
    return SwapchainStateFoveationFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SwapchainStateFoveationFlagBitsFB flag bit.
 * @see SwapchainStateFoveationFlagBitsFB, SwapchainStateFoveationFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE SwapchainStateFoveationFlagsFB operator~( SwapchainStateFoveationFlagBitsFB bits) {
    return ~( SwapchainStateFoveationFlagsFB( bits ) );
}

#endif  // XR_FB_foveation

































#ifdef XR_FB_keyboard_tracking
/*!
 * @brief Flag bits for XrKeyboardTrackingFlagsFB
 * 
 * Provided by the `XR_FB_keyboard_tracking` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrKeyboardTrackingFlagBitsFB>
 * @xrentity{XrKeyboardTrackingFlagBitsFB}
 * @see KeyboardTrackingFlagsFB
 */
enum class KeyboardTrackingFlagBitsFB : XrFlags64 {
    None = 0,
    Exists = XR_KEYBOARD_TRACKING_EXISTS_BIT_FB,
    Local = XR_KEYBOARD_TRACKING_LOCAL_BIT_FB,
    Remote = XR_KEYBOARD_TRACKING_REMOTE_BIT_FB,
    Connected = XR_KEYBOARD_TRACKING_CONNECTED_BIT_FB,
    AllBits =
XR_KEYBOARD_TRACKING_EXISTS_BIT_FB | XR_KEYBOARD_TRACKING_LOCAL_BIT_FB | XR_KEYBOARD_TRACKING_REMOTE_BIT_FB | XR_KEYBOARD_TRACKING_CONNECTED_BIT_FB};

/*!
 * @brief Flags class projection of XrKeyboardTrackingFlagsFB
 * 
 * Provided by the `XR_FB_keyboard_tracking` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrKeyboardTrackingFlagsFB>
 * @xrentity{XrKeyboardTrackingFlagBitsFB}
 * @see KeyboardTrackingFlagBitsFB, xr::Flags
 */
using KeyboardTrackingFlagsFB = Flags<KeyboardTrackingFlagBitsFB, XrKeyboardTrackingFlagsFB>;

/*!
 * @brief Bitwise OR operator between two KeyboardTrackingFlagBitsFB flag bits.
 * @see KeyboardTrackingFlagBitsFB, KeyboardTrackingFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE KeyboardTrackingFlagsFB operator|( KeyboardTrackingFlagBitsFB bit0, KeyboardTrackingFlagBitsFB bit1) {
    return KeyboardTrackingFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a KeyboardTrackingFlagBitsFB flag bit.
 * @see KeyboardTrackingFlagBitsFB, KeyboardTrackingFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE KeyboardTrackingFlagsFB operator~( KeyboardTrackingFlagBitsFB bits) {
    return ~( KeyboardTrackingFlagsFB( bits ) );
}

#endif  // XR_FB_keyboard_tracking

































#ifdef XR_FB_keyboard_tracking
/*!
 * @brief Flag bits for XrKeyboardTrackingQueryFlagsFB
 * 
 * Provided by the `XR_FB_keyboard_tracking` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrKeyboardTrackingQueryFlagBitsFB>
 * @xrentity{XrKeyboardTrackingQueryFlagBitsFB}
 * @see KeyboardTrackingQueryFlagsFB
 */
enum class KeyboardTrackingQueryFlagBitsFB : XrFlags64 {
    None = 0,
    Local = XR_KEYBOARD_TRACKING_QUERY_LOCAL_BIT_FB,
    Remote = XR_KEYBOARD_TRACKING_QUERY_REMOTE_BIT_FB,
    AllBits =
XR_KEYBOARD_TRACKING_QUERY_LOCAL_BIT_FB | XR_KEYBOARD_TRACKING_QUERY_REMOTE_BIT_FB};

/*!
 * @brief Flags class projection of XrKeyboardTrackingQueryFlagsFB
 * 
 * Provided by the `XR_FB_keyboard_tracking` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrKeyboardTrackingQueryFlagsFB>
 * @xrentity{XrKeyboardTrackingQueryFlagBitsFB}
 * @see KeyboardTrackingQueryFlagBitsFB, xr::Flags
 */
using KeyboardTrackingQueryFlagsFB = Flags<KeyboardTrackingQueryFlagBitsFB, XrKeyboardTrackingQueryFlagsFB>;

/*!
 * @brief Bitwise OR operator between two KeyboardTrackingQueryFlagBitsFB flag bits.
 * @see KeyboardTrackingQueryFlagBitsFB, KeyboardTrackingQueryFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE KeyboardTrackingQueryFlagsFB operator|( KeyboardTrackingQueryFlagBitsFB bit0, KeyboardTrackingQueryFlagBitsFB bit1) {
    return KeyboardTrackingQueryFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a KeyboardTrackingQueryFlagBitsFB flag bit.
 * @see KeyboardTrackingQueryFlagBitsFB, KeyboardTrackingQueryFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE KeyboardTrackingQueryFlagsFB operator~( KeyboardTrackingQueryFlagBitsFB bits) {
    return ~( KeyboardTrackingQueryFlagsFB( bits ) );
}

#endif  // XR_FB_keyboard_tracking

































#ifdef XR_FB_triangle_mesh
/*!
 * @brief Flag bits for XrTriangleMeshFlagsFB
 * 
 * Provided by the `XR_FB_triangle_mesh` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrTriangleMeshFlagBitsFB>
 * @xrentity{XrTriangleMeshFlagBitsFB}
 * @see TriangleMeshFlagsFB
 */
enum class TriangleMeshFlagBitsFB : XrFlags64 {
    None = 0,
    Mutable = XR_TRIANGLE_MESH_MUTABLE_BIT_FB,
    AllBits =
XR_TRIANGLE_MESH_MUTABLE_BIT_FB};

/*!
 * @brief Flags class projection of XrTriangleMeshFlagsFB
 * 
 * Provided by the `XR_FB_triangle_mesh` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrTriangleMeshFlagsFB>
 * @xrentity{XrTriangleMeshFlagBitsFB}
 * @see TriangleMeshFlagBitsFB, xr::Flags
 */
using TriangleMeshFlagsFB = Flags<TriangleMeshFlagBitsFB, XrTriangleMeshFlagsFB>;

/*!
 * @brief Bitwise OR operator between two TriangleMeshFlagBitsFB flag bits.
 * @see TriangleMeshFlagBitsFB, TriangleMeshFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE TriangleMeshFlagsFB operator|( TriangleMeshFlagBitsFB bit0, TriangleMeshFlagBitsFB bit1) {
    return TriangleMeshFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a TriangleMeshFlagBitsFB flag bit.
 * @see TriangleMeshFlagBitsFB, TriangleMeshFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE TriangleMeshFlagsFB operator~( TriangleMeshFlagBitsFB bits) {
    return ~( TriangleMeshFlagsFB( bits ) );
}

#endif  // XR_FB_triangle_mesh

































#ifdef XR_FB_passthrough
/*!
 * @brief Flag bits for XrPassthroughCapabilityFlagsFB
 * 
 * Provided by the `XR_FB_passthrough` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPassthroughCapabilityFlagBitsFB>
 * @xrentity{XrPassthroughCapabilityFlagBitsFB}
 * @see PassthroughCapabilityFlagsFB
 */
enum class PassthroughCapabilityFlagBitsFB : XrFlags64 {
    None = 0,
    BitFB = XR_PASSTHROUGH_CAPABILITY_BIT_FB,
    Color = XR_PASSTHROUGH_CAPABILITY_COLOR_BIT_FB,
    LayerDepth = XR_PASSTHROUGH_CAPABILITY_LAYER_DEPTH_BIT_FB,
    AllBits =
XR_PASSTHROUGH_CAPABILITY_BIT_FB | XR_PASSTHROUGH_CAPABILITY_COLOR_BIT_FB | XR_PASSTHROUGH_CAPABILITY_LAYER_DEPTH_BIT_FB};

/*!
 * @brief Flags class projection of XrPassthroughCapabilityFlagsFB
 * 
 * Provided by the `XR_FB_passthrough` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPassthroughCapabilityFlagsFB>
 * @xrentity{XrPassthroughCapabilityFlagBitsFB}
 * @see PassthroughCapabilityFlagBitsFB, xr::Flags
 */
using PassthroughCapabilityFlagsFB = Flags<PassthroughCapabilityFlagBitsFB, XrPassthroughCapabilityFlagsFB>;

/*!
 * @brief Bitwise OR operator between two PassthroughCapabilityFlagBitsFB flag bits.
 * @see PassthroughCapabilityFlagBitsFB, PassthroughCapabilityFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE PassthroughCapabilityFlagsFB operator|( PassthroughCapabilityFlagBitsFB bit0, PassthroughCapabilityFlagBitsFB bit1) {
    return PassthroughCapabilityFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a PassthroughCapabilityFlagBitsFB flag bit.
 * @see PassthroughCapabilityFlagBitsFB, PassthroughCapabilityFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE PassthroughCapabilityFlagsFB operator~( PassthroughCapabilityFlagBitsFB bits) {
    return ~( PassthroughCapabilityFlagsFB( bits ) );
}

#endif  // XR_FB_passthrough

































#ifdef XR_FB_passthrough
/*!
 * @brief Flag bits for XrPassthroughFlagsFB
 * 
 * Provided by the `XR_FB_passthrough` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPassthroughFlagBitsFB>
 * @xrentity{XrPassthroughFlagBitsFB}
 * @see PassthroughFlagsFB
 */
enum class PassthroughFlagBitsFB : XrFlags64 {
    None = 0,
    IsRunningAtCreation = XR_PASSTHROUGH_IS_RUNNING_AT_CREATION_BIT_FB,
    LayerDepth = XR_PASSTHROUGH_LAYER_DEPTH_BIT_FB,
    AllBits =
XR_PASSTHROUGH_IS_RUNNING_AT_CREATION_BIT_FB | XR_PASSTHROUGH_LAYER_DEPTH_BIT_FB};

/*!
 * @brief Flags class projection of XrPassthroughFlagsFB
 * 
 * Provided by the `XR_FB_passthrough` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPassthroughFlagsFB>
 * @xrentity{XrPassthroughFlagBitsFB}
 * @see PassthroughFlagBitsFB, xr::Flags
 */
using PassthroughFlagsFB = Flags<PassthroughFlagBitsFB, XrPassthroughFlagsFB>;

/*!
 * @brief Bitwise OR operator between two PassthroughFlagBitsFB flag bits.
 * @see PassthroughFlagBitsFB, PassthroughFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE PassthroughFlagsFB operator|( PassthroughFlagBitsFB bit0, PassthroughFlagBitsFB bit1) {
    return PassthroughFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a PassthroughFlagBitsFB flag bit.
 * @see PassthroughFlagBitsFB, PassthroughFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE PassthroughFlagsFB operator~( PassthroughFlagBitsFB bits) {
    return ~( PassthroughFlagsFB( bits ) );
}

#endif  // XR_FB_passthrough

































#ifdef XR_FB_passthrough
/*!
 * @brief Flag bits for XrPassthroughStateChangedFlagsFB
 * 
 * Provided by the `XR_FB_passthrough` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPassthroughStateChangedFlagBitsFB>
 * @xrentity{XrPassthroughStateChangedFlagBitsFB}
 * @see PassthroughStateChangedFlagsFB
 */
enum class PassthroughStateChangedFlagBitsFB : XrFlags64 {
    None = 0,
    ReinitRequired = XR_PASSTHROUGH_STATE_CHANGED_REINIT_REQUIRED_BIT_FB,
    NonRecoverableError = XR_PASSTHROUGH_STATE_CHANGED_NON_RECOVERABLE_ERROR_BIT_FB,
    RecoverableError = XR_PASSTHROUGH_STATE_CHANGED_RECOVERABLE_ERROR_BIT_FB,
    RestoredError = XR_PASSTHROUGH_STATE_CHANGED_RESTORED_ERROR_BIT_FB,
    AllBits =
XR_PASSTHROUGH_STATE_CHANGED_REINIT_REQUIRED_BIT_FB | XR_PASSTHROUGH_STATE_CHANGED_NON_RECOVERABLE_ERROR_BIT_FB | XR_PASSTHROUGH_STATE_CHANGED_RECOVERABLE_ERROR_BIT_FB | XR_PASSTHROUGH_STATE_CHANGED_RESTORED_ERROR_BIT_FB};

/*!
 * @brief Flags class projection of XrPassthroughStateChangedFlagsFB
 * 
 * Provided by the `XR_FB_passthrough` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPassthroughStateChangedFlagsFB>
 * @xrentity{XrPassthroughStateChangedFlagBitsFB}
 * @see PassthroughStateChangedFlagBitsFB, xr::Flags
 */
using PassthroughStateChangedFlagsFB = Flags<PassthroughStateChangedFlagBitsFB, XrPassthroughStateChangedFlagsFB>;

/*!
 * @brief Bitwise OR operator between two PassthroughStateChangedFlagBitsFB flag bits.
 * @see PassthroughStateChangedFlagBitsFB, PassthroughStateChangedFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE PassthroughStateChangedFlagsFB operator|( PassthroughStateChangedFlagBitsFB bit0, PassthroughStateChangedFlagBitsFB bit1) {
    return PassthroughStateChangedFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a PassthroughStateChangedFlagBitsFB flag bit.
 * @see PassthroughStateChangedFlagBitsFB, PassthroughStateChangedFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE PassthroughStateChangedFlagsFB operator~( PassthroughStateChangedFlagBitsFB bits) {
    return ~( PassthroughStateChangedFlagsFB( bits ) );
}

#endif  // XR_FB_passthrough

































#ifdef XR_FB_render_model
/*!
 * @brief Flag bits for XrRenderModelFlagsFB
 * 
 * Provided by the `XR_FB_render_model` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrRenderModelFlagBitsFB>
 * @xrentity{XrRenderModelFlagBitsFB}
 * @see RenderModelFlagsFB
 */
enum class RenderModelFlagBitsFB : XrFlags64 {
    None = 0,
    SupportsGltf20Subset1 = XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_1_BIT_FB,
    SupportsGltf20Subset2 = XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_2_BIT_FB,
    AllBits =
XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_1_BIT_FB | XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_2_BIT_FB};

/*!
 * @brief Flags class projection of XrRenderModelFlagsFB
 * 
 * Provided by the `XR_FB_render_model` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrRenderModelFlagsFB>
 * @xrentity{XrRenderModelFlagBitsFB}
 * @see RenderModelFlagBitsFB, xr::Flags
 */
using RenderModelFlagsFB = Flags<RenderModelFlagBitsFB, XrRenderModelFlagsFB>;

/*!
 * @brief Bitwise OR operator between two RenderModelFlagBitsFB flag bits.
 * @see RenderModelFlagBitsFB, RenderModelFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE RenderModelFlagsFB operator|( RenderModelFlagBitsFB bit0, RenderModelFlagBitsFB bit1) {
    return RenderModelFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a RenderModelFlagBitsFB flag bit.
 * @see RenderModelFlagBitsFB, RenderModelFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE RenderModelFlagsFB operator~( RenderModelFlagBitsFB bits) {
    return ~( RenderModelFlagsFB( bits ) );
}

#endif  // XR_FB_render_model

































#ifdef XR_ML_frame_end_info
/*!
 * @brief Flag bits for XrFrameEndInfoFlagsML
 * 
 * Provided by the `XR_ML_frame_end_info` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFrameEndInfoFlagBitsML>
 * @xrentity{XrFrameEndInfoFlagBitsML}
 * @see FrameEndInfoFlagsML
 */
enum class FrameEndInfoFlagBitsML : XrFlags64 {
    None = 0,
    Protected = XR_FRAME_END_INFO_PROTECTED_BIT_ML,
    Vignette = XR_FRAME_END_INFO_VIGNETTE_BIT_ML,
    AllBits =
XR_FRAME_END_INFO_PROTECTED_BIT_ML | XR_FRAME_END_INFO_VIGNETTE_BIT_ML};

/*!
 * @brief Flags class projection of XrFrameEndInfoFlagsML
 * 
 * Provided by the `XR_ML_frame_end_info` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFrameEndInfoFlagsML>
 * @xrentity{XrFrameEndInfoFlagBitsML}
 * @see FrameEndInfoFlagBitsML, xr::Flags
 */
using FrameEndInfoFlagsML = Flags<FrameEndInfoFlagBitsML, XrFrameEndInfoFlagsML>;

/*!
 * @brief Bitwise OR operator between two FrameEndInfoFlagBitsML flag bits.
 * @see FrameEndInfoFlagBitsML, FrameEndInfoFlagsML, xr::Flags
 */
OPENXR_HPP_INLINE FrameEndInfoFlagsML operator|( FrameEndInfoFlagBitsML bit0, FrameEndInfoFlagBitsML bit1) {
    return FrameEndInfoFlagsML( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a FrameEndInfoFlagBitsML flag bit.
 * @see FrameEndInfoFlagBitsML, FrameEndInfoFlagsML, xr::Flags
 */
OPENXR_HPP_INLINE FrameEndInfoFlagsML operator~( FrameEndInfoFlagBitsML bits) {
    return ~( FrameEndInfoFlagsML( bits ) );
}

#endif  // XR_ML_frame_end_info

































#ifdef XR_ML_global_dimmer
/*!
 * @brief Flag bits for XrGlobalDimmerFrameEndInfoFlagsML
 * 
 * Provided by the `XR_ML_global_dimmer` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrGlobalDimmerFrameEndInfoFlagBitsML>
 * @xrentity{XrGlobalDimmerFrameEndInfoFlagBitsML}
 * @see GlobalDimmerFrameEndInfoFlagsML
 */
enum class GlobalDimmerFrameEndInfoFlagBitsML : XrFlags64 {
    None = 0,
    Enabled = XR_GLOBAL_DIMMER_FRAME_END_INFO_ENABLED_BIT_ML,
    AllBits =
XR_GLOBAL_DIMMER_FRAME_END_INFO_ENABLED_BIT_ML};

/*!
 * @brief Flags class projection of XrGlobalDimmerFrameEndInfoFlagsML
 * 
 * Provided by the `XR_ML_global_dimmer` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrGlobalDimmerFrameEndInfoFlagsML>
 * @xrentity{XrGlobalDimmerFrameEndInfoFlagBitsML}
 * @see GlobalDimmerFrameEndInfoFlagBitsML, xr::Flags
 */
using GlobalDimmerFrameEndInfoFlagsML = Flags<GlobalDimmerFrameEndInfoFlagBitsML, XrGlobalDimmerFrameEndInfoFlagsML>;

/*!
 * @brief Bitwise OR operator between two GlobalDimmerFrameEndInfoFlagBitsML flag bits.
 * @see GlobalDimmerFrameEndInfoFlagBitsML, GlobalDimmerFrameEndInfoFlagsML, xr::Flags
 */
OPENXR_HPP_INLINE GlobalDimmerFrameEndInfoFlagsML operator|( GlobalDimmerFrameEndInfoFlagBitsML bit0, GlobalDimmerFrameEndInfoFlagBitsML bit1) {
    return GlobalDimmerFrameEndInfoFlagsML( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a GlobalDimmerFrameEndInfoFlagBitsML flag bit.
 * @see GlobalDimmerFrameEndInfoFlagBitsML, GlobalDimmerFrameEndInfoFlagsML, xr::Flags
 */
OPENXR_HPP_INLINE GlobalDimmerFrameEndInfoFlagsML operator~( GlobalDimmerFrameEndInfoFlagBitsML bits) {
    return ~( GlobalDimmerFrameEndInfoFlagsML( bits ) );
}

#endif  // XR_ML_global_dimmer

































#ifdef XR_ML_localization_map
/*!
 * @brief Flag bits for XrLocalizationMapErrorFlagsML
 * 
 * Provided by the `XR_ML_localization_map` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrLocalizationMapErrorFlagBitsML>
 * @xrentity{XrLocalizationMapErrorFlagBitsML}
 * @see LocalizationMapErrorFlagsML
 */
enum class LocalizationMapErrorFlagBitsML : XrFlags64 {
    None = 0,
    Unknown = XR_LOCALIZATION_MAP_ERROR_UNKNOWN_BIT_ML,
    OutOfMappedArea = XR_LOCALIZATION_MAP_ERROR_OUT_OF_MAPPED_AREA_BIT_ML,
    LowFeatureCount = XR_LOCALIZATION_MAP_ERROR_LOW_FEATURE_COUNT_BIT_ML,
    ExcessiveMotion = XR_LOCALIZATION_MAP_ERROR_EXCESSIVE_MOTION_BIT_ML,
    LowLight = XR_LOCALIZATION_MAP_ERROR_LOW_LIGHT_BIT_ML,
    Headpose = XR_LOCALIZATION_MAP_ERROR_HEADPOSE_BIT_ML,
    AllBits =
XR_LOCALIZATION_MAP_ERROR_UNKNOWN_BIT_ML | XR_LOCALIZATION_MAP_ERROR_OUT_OF_MAPPED_AREA_BIT_ML | XR_LOCALIZATION_MAP_ERROR_LOW_FEATURE_COUNT_BIT_ML | XR_LOCALIZATION_MAP_ERROR_EXCESSIVE_MOTION_BIT_ML | XR_LOCALIZATION_MAP_ERROR_LOW_LIGHT_BIT_ML | XR_LOCALIZATION_MAP_ERROR_HEADPOSE_BIT_ML};

/*!
 * @brief Flags class projection of XrLocalizationMapErrorFlagsML
 * 
 * Provided by the `XR_ML_localization_map` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrLocalizationMapErrorFlagsML>
 * @xrentity{XrLocalizationMapErrorFlagBitsML}
 * @see LocalizationMapErrorFlagBitsML, xr::Flags
 */
using LocalizationMapErrorFlagsML = Flags<LocalizationMapErrorFlagBitsML, XrLocalizationMapErrorFlagsML>;

/*!
 * @brief Bitwise OR operator between two LocalizationMapErrorFlagBitsML flag bits.
 * @see LocalizationMapErrorFlagBitsML, LocalizationMapErrorFlagsML, xr::Flags
 */
OPENXR_HPP_INLINE LocalizationMapErrorFlagsML operator|( LocalizationMapErrorFlagBitsML bit0, LocalizationMapErrorFlagBitsML bit1) {
    return LocalizationMapErrorFlagsML( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a LocalizationMapErrorFlagBitsML flag bit.
 * @see LocalizationMapErrorFlagBitsML, LocalizationMapErrorFlagsML, xr::Flags
 */
OPENXR_HPP_INLINE LocalizationMapErrorFlagsML operator~( LocalizationMapErrorFlagBitsML bits) {
    return ~( LocalizationMapErrorFlagsML( bits ) );
}

#endif  // XR_ML_localization_map

































#ifdef XR_FB_space_warp
/*!
 * @brief Flag bits for XrCompositionLayerSpaceWarpInfoFlagsFB
 * 
 * Provided by the `XR_FB_space_warp` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrCompositionLayerSpaceWarpInfoFlagBitsFB>
 * @xrentity{XrCompositionLayerSpaceWarpInfoFlagBitsFB}
 * @see CompositionLayerSpaceWarpInfoFlagsFB
 */
enum class CompositionLayerSpaceWarpInfoFlagBitsFB : XrFlags64 {
    None = 0,
    FrameSkip = XR_COMPOSITION_LAYER_SPACE_WARP_INFO_FRAME_SKIP_BIT_FB,
    AllBits =
XR_COMPOSITION_LAYER_SPACE_WARP_INFO_FRAME_SKIP_BIT_FB};

/*!
 * @brief Flags class projection of XrCompositionLayerSpaceWarpInfoFlagsFB
 * 
 * Provided by the `XR_FB_space_warp` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrCompositionLayerSpaceWarpInfoFlagsFB>
 * @xrentity{XrCompositionLayerSpaceWarpInfoFlagBitsFB}
 * @see CompositionLayerSpaceWarpInfoFlagBitsFB, xr::Flags
 */
using CompositionLayerSpaceWarpInfoFlagsFB = Flags<CompositionLayerSpaceWarpInfoFlagBitsFB, XrCompositionLayerSpaceWarpInfoFlagsFB>;

/*!
 * @brief Bitwise OR operator between two CompositionLayerSpaceWarpInfoFlagBitsFB flag bits.
 * @see CompositionLayerSpaceWarpInfoFlagBitsFB, CompositionLayerSpaceWarpInfoFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE CompositionLayerSpaceWarpInfoFlagsFB operator|( CompositionLayerSpaceWarpInfoFlagBitsFB bit0, CompositionLayerSpaceWarpInfoFlagBitsFB bit1) {
    return CompositionLayerSpaceWarpInfoFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a CompositionLayerSpaceWarpInfoFlagBitsFB flag bit.
 * @see CompositionLayerSpaceWarpInfoFlagBitsFB, CompositionLayerSpaceWarpInfoFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE CompositionLayerSpaceWarpInfoFlagsFB operator~( CompositionLayerSpaceWarpInfoFlagBitsFB bits) {
    return ~( CompositionLayerSpaceWarpInfoFlagsFB( bits ) );
}

#endif  // XR_FB_space_warp

































#ifdef XR_FB_scene
/*!
 * @brief Flag bits for XrSemanticLabelsSupportFlagsFB
 * 
 * Provided by the `XR_FB_scene` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSemanticLabelsSupportFlagBitsFB>
 * @xrentity{XrSemanticLabelsSupportFlagBitsFB}
 * @see SemanticLabelsSupportFlagsFB
 */
enum class SemanticLabelsSupportFlagBitsFB : XrFlags64 {
    None = 0,
    MultipleSemanticLabels = XR_SEMANTIC_LABELS_SUPPORT_MULTIPLE_SEMANTIC_LABELS_BIT_FB,
    AcceptDeskToTableMigration = XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_DESK_TO_TABLE_MIGRATION_BIT_FB,
    AcceptInvisibleWallFace = XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_INVISIBLE_WALL_FACE_BIT_FB,
    AllBits =
XR_SEMANTIC_LABELS_SUPPORT_MULTIPLE_SEMANTIC_LABELS_BIT_FB | XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_DESK_TO_TABLE_MIGRATION_BIT_FB | XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_INVISIBLE_WALL_FACE_BIT_FB};

/*!
 * @brief Flags class projection of XrSemanticLabelsSupportFlagsFB
 * 
 * Provided by the `XR_FB_scene` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSemanticLabelsSupportFlagsFB>
 * @xrentity{XrSemanticLabelsSupportFlagBitsFB}
 * @see SemanticLabelsSupportFlagBitsFB, xr::Flags
 */
using SemanticLabelsSupportFlagsFB = Flags<SemanticLabelsSupportFlagBitsFB, XrSemanticLabelsSupportFlagsFB>;

/*!
 * @brief Bitwise OR operator between two SemanticLabelsSupportFlagBitsFB flag bits.
 * @see SemanticLabelsSupportFlagBitsFB, SemanticLabelsSupportFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE SemanticLabelsSupportFlagsFB operator|( SemanticLabelsSupportFlagBitsFB bit0, SemanticLabelsSupportFlagBitsFB bit1) {
    return SemanticLabelsSupportFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SemanticLabelsSupportFlagBitsFB flag bit.
 * @see SemanticLabelsSupportFlagBitsFB, SemanticLabelsSupportFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE SemanticLabelsSupportFlagsFB operator~( SemanticLabelsSupportFlagBitsFB bits) {
    return ~( SemanticLabelsSupportFlagsFB( bits ) );
}

#endif  // XR_FB_scene

































#ifdef XR_ALMALENCE_digital_lens_control
/*!
 * @brief Flag bits for XrDigitalLensControlFlagsALMALENCE
 * 
 * Provided by the `XR_ALMALENCE_digital_lens_control` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrDigitalLensControlFlagBitsALMALENCE>
 * @xrentity{XrDigitalLensControlFlagBitsALMALENCE}
 * @see DigitalLensControlFlagsALMALENCE
 */
enum class DigitalLensControlFlagBitsALMALENCE : XrFlags64 {
    None = 0,
    ProcessingDisable = XR_DIGITAL_LENS_CONTROL_PROCESSING_DISABLE_BIT_ALMALENCE,
    AllBits =
XR_DIGITAL_LENS_CONTROL_PROCESSING_DISABLE_BIT_ALMALENCE};

/*!
 * @brief Flags class projection of XrDigitalLensControlFlagsALMALENCE
 * 
 * Provided by the `XR_ALMALENCE_digital_lens_control` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrDigitalLensControlFlagsALMALENCE>
 * @xrentity{XrDigitalLensControlFlagBitsALMALENCE}
 * @see DigitalLensControlFlagBitsALMALENCE, xr::Flags
 */
using DigitalLensControlFlagsALMALENCE = Flags<DigitalLensControlFlagBitsALMALENCE, XrDigitalLensControlFlagsALMALENCE>;

/*!
 * @brief Bitwise OR operator between two DigitalLensControlFlagBitsALMALENCE flag bits.
 * @see DigitalLensControlFlagBitsALMALENCE, DigitalLensControlFlagsALMALENCE, xr::Flags
 */
OPENXR_HPP_INLINE DigitalLensControlFlagsALMALENCE operator|( DigitalLensControlFlagBitsALMALENCE bit0, DigitalLensControlFlagBitsALMALENCE bit1) {
    return DigitalLensControlFlagsALMALENCE( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a DigitalLensControlFlagBitsALMALENCE flag bit.
 * @see DigitalLensControlFlagBitsALMALENCE, DigitalLensControlFlagsALMALENCE, xr::Flags
 */
OPENXR_HPP_INLINE DigitalLensControlFlagsALMALENCE operator~( DigitalLensControlFlagBitsALMALENCE bits) {
    return ~( DigitalLensControlFlagsALMALENCE( bits ) );
}

#endif  // XR_ALMALENCE_digital_lens_control

































#ifdef XR_META_foveation_eye_tracked
/*!
 * @brief Flag bits for XrFoveationEyeTrackedProfileCreateFlagsMETA
 * 
 * Provided by the `XR_META_foveation_eye_tracked` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFoveationEyeTrackedProfileCreateFlagBitsMETA>
 * @xrentity{XrFoveationEyeTrackedProfileCreateFlagBitsMETA}
 * @see FoveationEyeTrackedProfileCreateFlagsMETA
 */
enum class FoveationEyeTrackedProfileCreateFlagBitsMETA : XrFlags64 {
    None = 0,
    AllBits =
 0
};

/*!
 * @brief Flags class projection of XrFoveationEyeTrackedProfileCreateFlagsMETA
 * 
 * Provided by the `XR_META_foveation_eye_tracked` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFoveationEyeTrackedProfileCreateFlagsMETA>
 * @xrentity{XrFoveationEyeTrackedProfileCreateFlagBitsMETA}
 * @see FoveationEyeTrackedProfileCreateFlagBitsMETA, xr::Flags
 */
using FoveationEyeTrackedProfileCreateFlagsMETA = Flags<FoveationEyeTrackedProfileCreateFlagBitsMETA, XrFoveationEyeTrackedProfileCreateFlagsMETA>;

/*!
 * @brief Bitwise OR operator between two FoveationEyeTrackedProfileCreateFlagBitsMETA flag bits.
 * @see FoveationEyeTrackedProfileCreateFlagBitsMETA, FoveationEyeTrackedProfileCreateFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE FoveationEyeTrackedProfileCreateFlagsMETA operator|( FoveationEyeTrackedProfileCreateFlagBitsMETA bit0, FoveationEyeTrackedProfileCreateFlagBitsMETA bit1) {
    return FoveationEyeTrackedProfileCreateFlagsMETA( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a FoveationEyeTrackedProfileCreateFlagBitsMETA flag bit.
 * @see FoveationEyeTrackedProfileCreateFlagBitsMETA, FoveationEyeTrackedProfileCreateFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE FoveationEyeTrackedProfileCreateFlagsMETA operator~( FoveationEyeTrackedProfileCreateFlagBitsMETA bits) {
    return ~( FoveationEyeTrackedProfileCreateFlagsMETA( bits ) );
}

#endif  // XR_META_foveation_eye_tracked

































#ifdef XR_META_foveation_eye_tracked
/*!
 * @brief Flag bits for XrFoveationEyeTrackedStateFlagsMETA
 * 
 * Provided by the `XR_META_foveation_eye_tracked` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFoveationEyeTrackedStateFlagBitsMETA>
 * @xrentity{XrFoveationEyeTrackedStateFlagBitsMETA}
 * @see FoveationEyeTrackedStateFlagsMETA
 */
enum class FoveationEyeTrackedStateFlagBitsMETA : XrFlags64 {
    None = 0,
    Valid = XR_FOVEATION_EYE_TRACKED_STATE_VALID_BIT_META,
    AllBits =
XR_FOVEATION_EYE_TRACKED_STATE_VALID_BIT_META};

/*!
 * @brief Flags class projection of XrFoveationEyeTrackedStateFlagsMETA
 * 
 * Provided by the `XR_META_foveation_eye_tracked` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFoveationEyeTrackedStateFlagsMETA>
 * @xrentity{XrFoveationEyeTrackedStateFlagBitsMETA}
 * @see FoveationEyeTrackedStateFlagBitsMETA, xr::Flags
 */
using FoveationEyeTrackedStateFlagsMETA = Flags<FoveationEyeTrackedStateFlagBitsMETA, XrFoveationEyeTrackedStateFlagsMETA>;

/*!
 * @brief Bitwise OR operator between two FoveationEyeTrackedStateFlagBitsMETA flag bits.
 * @see FoveationEyeTrackedStateFlagBitsMETA, FoveationEyeTrackedStateFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE FoveationEyeTrackedStateFlagsMETA operator|( FoveationEyeTrackedStateFlagBitsMETA bit0, FoveationEyeTrackedStateFlagBitsMETA bit1) {
    return FoveationEyeTrackedStateFlagsMETA( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a FoveationEyeTrackedStateFlagBitsMETA flag bit.
 * @see FoveationEyeTrackedStateFlagBitsMETA, FoveationEyeTrackedStateFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE FoveationEyeTrackedStateFlagsMETA operator~( FoveationEyeTrackedStateFlagBitsMETA bits) {
    return ~( FoveationEyeTrackedStateFlagsMETA( bits ) );
}

#endif  // XR_META_foveation_eye_tracked

































#ifdef XR_FB_composition_layer_settings
/*!
 * @brief Flag bits for XrCompositionLayerSettingsFlagsFB
 * 
 * Provided by the `XR_FB_composition_layer_settings` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrCompositionLayerSettingsFlagBitsFB>
 * @xrentity{XrCompositionLayerSettingsFlagBitsFB}
 * @see CompositionLayerSettingsFlagsFB
 */
enum class CompositionLayerSettingsFlagBitsFB : XrFlags64 {
    None = 0,
    NormalSuperSampling = XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SUPER_SAMPLING_BIT_FB,
    QualitySuperSampling = XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SUPER_SAMPLING_BIT_FB,
    NormalSharpening = XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SHARPENING_BIT_FB,
    QualitySharpening = XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SHARPENING_BIT_FB,
    AutoLayerFilterBitMETA = XR_COMPOSITION_LAYER_SETTINGS_AUTO_LAYER_FILTER_BIT_META,
    AllBits =
XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SUPER_SAMPLING_BIT_FB | XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SUPER_SAMPLING_BIT_FB | XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SHARPENING_BIT_FB | XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SHARPENING_BIT_FB | XR_COMPOSITION_LAYER_SETTINGS_AUTO_LAYER_FILTER_BIT_META};

/*!
 * @brief Flags class projection of XrCompositionLayerSettingsFlagsFB
 * 
 * Provided by the `XR_FB_composition_layer_settings` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrCompositionLayerSettingsFlagsFB>
 * @xrentity{XrCompositionLayerSettingsFlagBitsFB}
 * @see CompositionLayerSettingsFlagBitsFB, xr::Flags
 */
using CompositionLayerSettingsFlagsFB = Flags<CompositionLayerSettingsFlagBitsFB, XrCompositionLayerSettingsFlagsFB>;

/*!
 * @brief Bitwise OR operator between two CompositionLayerSettingsFlagBitsFB flag bits.
 * @see CompositionLayerSettingsFlagBitsFB, CompositionLayerSettingsFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE CompositionLayerSettingsFlagsFB operator|( CompositionLayerSettingsFlagBitsFB bit0, CompositionLayerSettingsFlagBitsFB bit1) {
    return CompositionLayerSettingsFlagsFB( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a CompositionLayerSettingsFlagBitsFB flag bit.
 * @see CompositionLayerSettingsFlagBitsFB, CompositionLayerSettingsFlagsFB, xr::Flags
 */
OPENXR_HPP_INLINE CompositionLayerSettingsFlagsFB operator~( CompositionLayerSettingsFlagBitsFB bits) {
    return ~( CompositionLayerSettingsFlagsFB( bits ) );
}

#endif  // XR_FB_composition_layer_settings

































#ifdef XR_EXT_frame_synthesis
/*!
 * @brief Flag bits for XrFrameSynthesisInfoFlagsEXT
 * 
 * Provided by the `XR_EXT_frame_synthesis` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFrameSynthesisInfoFlagBitsEXT>
 * @xrentity{XrFrameSynthesisInfoFlagBitsEXT}
 * @see FrameSynthesisInfoFlagsEXT
 */
enum class FrameSynthesisInfoFlagBitsEXT : XrFlags64 {
    None = 0,
    Use2DMotionVector = XR_FRAME_SYNTHESIS_INFO_USE_2D_MOTION_VECTOR_BIT_EXT,
    RequestRelaxedFrameInterval = XR_FRAME_SYNTHESIS_INFO_REQUEST_RELAXED_FRAME_INTERVAL_BIT_EXT,
    AllBits =
XR_FRAME_SYNTHESIS_INFO_USE_2D_MOTION_VECTOR_BIT_EXT | XR_FRAME_SYNTHESIS_INFO_REQUEST_RELAXED_FRAME_INTERVAL_BIT_EXT};

/*!
 * @brief Flags class projection of XrFrameSynthesisInfoFlagsEXT
 * 
 * Provided by the `XR_EXT_frame_synthesis` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFrameSynthesisInfoFlagsEXT>
 * @xrentity{XrFrameSynthesisInfoFlagBitsEXT}
 * @see FrameSynthesisInfoFlagBitsEXT, xr::Flags
 */
using FrameSynthesisInfoFlagsEXT = Flags<FrameSynthesisInfoFlagBitsEXT, XrFrameSynthesisInfoFlagsEXT>;

/*!
 * @brief Bitwise OR operator between two FrameSynthesisInfoFlagBitsEXT flag bits.
 * @see FrameSynthesisInfoFlagBitsEXT, FrameSynthesisInfoFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE FrameSynthesisInfoFlagsEXT operator|( FrameSynthesisInfoFlagBitsEXT bit0, FrameSynthesisInfoFlagBitsEXT bit1) {
    return FrameSynthesisInfoFlagsEXT( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a FrameSynthesisInfoFlagBitsEXT flag bit.
 * @see FrameSynthesisInfoFlagBitsEXT, FrameSynthesisInfoFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE FrameSynthesisInfoFlagsEXT operator~( FrameSynthesisInfoFlagBitsEXT bits) {
    return ~( FrameSynthesisInfoFlagsEXT( bits ) );
}

#endif  // XR_EXT_frame_synthesis

































#ifdef XR_META_passthrough_preferences
/*!
 * @brief Flag bits for XrPassthroughPreferenceFlagsMETA
 * 
 * Provided by the `XR_META_passthrough_preferences` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPassthroughPreferenceFlagBitsMETA>
 * @xrentity{XrPassthroughPreferenceFlagBitsMETA}
 * @see PassthroughPreferenceFlagsMETA
 */
enum class PassthroughPreferenceFlagBitsMETA : XrFlags64 {
    None = 0,
    DefaultToActive = XR_PASSTHROUGH_PREFERENCE_DEFAULT_TO_ACTIVE_BIT_META,
    AllBits =
XR_PASSTHROUGH_PREFERENCE_DEFAULT_TO_ACTIVE_BIT_META};

/*!
 * @brief Flags class projection of XrPassthroughPreferenceFlagsMETA
 * 
 * Provided by the `XR_META_passthrough_preferences` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPassthroughPreferenceFlagsMETA>
 * @xrentity{XrPassthroughPreferenceFlagBitsMETA}
 * @see PassthroughPreferenceFlagBitsMETA, xr::Flags
 */
using PassthroughPreferenceFlagsMETA = Flags<PassthroughPreferenceFlagBitsMETA, XrPassthroughPreferenceFlagsMETA>;

/*!
 * @brief Bitwise OR operator between two PassthroughPreferenceFlagBitsMETA flag bits.
 * @see PassthroughPreferenceFlagBitsMETA, PassthroughPreferenceFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE PassthroughPreferenceFlagsMETA operator|( PassthroughPreferenceFlagBitsMETA bit0, PassthroughPreferenceFlagBitsMETA bit1) {
    return PassthroughPreferenceFlagsMETA( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a PassthroughPreferenceFlagBitsMETA flag bit.
 * @see PassthroughPreferenceFlagBitsMETA, PassthroughPreferenceFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE PassthroughPreferenceFlagsMETA operator~( PassthroughPreferenceFlagBitsMETA bits) {
    return ~( PassthroughPreferenceFlagsMETA( bits ) );
}

#endif  // XR_META_passthrough_preferences

































#ifdef XR_META_virtual_keyboard
/*!
 * @brief Flag bits for XrVirtualKeyboardInputStateFlagsMETA
 * 
 * Provided by the `XR_META_virtual_keyboard` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrVirtualKeyboardInputStateFlagBitsMETA>
 * @xrentity{XrVirtualKeyboardInputStateFlagBitsMETA}
 * @see VirtualKeyboardInputStateFlagsMETA
 */
enum class VirtualKeyboardInputStateFlagBitsMETA : XrFlags64 {
    None = 0,
    Pressed = XR_VIRTUAL_KEYBOARD_INPUT_STATE_PRESSED_BIT_META,
    AllBits =
XR_VIRTUAL_KEYBOARD_INPUT_STATE_PRESSED_BIT_META};

/*!
 * @brief Flags class projection of XrVirtualKeyboardInputStateFlagsMETA
 * 
 * Provided by the `XR_META_virtual_keyboard` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrVirtualKeyboardInputStateFlagsMETA>
 * @xrentity{XrVirtualKeyboardInputStateFlagBitsMETA}
 * @see VirtualKeyboardInputStateFlagBitsMETA, xr::Flags
 */
using VirtualKeyboardInputStateFlagsMETA = Flags<VirtualKeyboardInputStateFlagBitsMETA, XrVirtualKeyboardInputStateFlagsMETA>;

/*!
 * @brief Bitwise OR operator between two VirtualKeyboardInputStateFlagBitsMETA flag bits.
 * @see VirtualKeyboardInputStateFlagBitsMETA, VirtualKeyboardInputStateFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE VirtualKeyboardInputStateFlagsMETA operator|( VirtualKeyboardInputStateFlagBitsMETA bit0, VirtualKeyboardInputStateFlagBitsMETA bit1) {
    return VirtualKeyboardInputStateFlagsMETA( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a VirtualKeyboardInputStateFlagBitsMETA flag bit.
 * @see VirtualKeyboardInputStateFlagBitsMETA, VirtualKeyboardInputStateFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE VirtualKeyboardInputStateFlagsMETA operator~( VirtualKeyboardInputStateFlagBitsMETA bits) {
    return ~( VirtualKeyboardInputStateFlagsMETA( bits ) );
}

#endif  // XR_META_virtual_keyboard

































#ifdef XR_OCULUS_external_camera
/*!
 * @brief Flag bits for XrExternalCameraStatusFlagsOCULUS
 * 
 * Provided by the `XR_OCULUS_external_camera` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrExternalCameraStatusFlagBitsOCULUS>
 * @xrentity{XrExternalCameraStatusFlagBitsOCULUS}
 * @see ExternalCameraStatusFlagsOCULUS
 */
enum class ExternalCameraStatusFlagBitsOCULUS : XrFlags64 {
    None = 0,
    Connected = XR_EXTERNAL_CAMERA_STATUS_CONNECTED_BIT_OCULUS,
    Calibrating = XR_EXTERNAL_CAMERA_STATUS_CALIBRATING_BIT_OCULUS,
    CalibrationFailed = XR_EXTERNAL_CAMERA_STATUS_CALIBRATION_FAILED_BIT_OCULUS,
    Calibrated = XR_EXTERNAL_CAMERA_STATUS_CALIBRATED_BIT_OCULUS,
    Capturing = XR_EXTERNAL_CAMERA_STATUS_CAPTURING_BIT_OCULUS,
    AllBits =
XR_EXTERNAL_CAMERA_STATUS_CONNECTED_BIT_OCULUS | XR_EXTERNAL_CAMERA_STATUS_CALIBRATING_BIT_OCULUS | XR_EXTERNAL_CAMERA_STATUS_CALIBRATION_FAILED_BIT_OCULUS | XR_EXTERNAL_CAMERA_STATUS_CALIBRATED_BIT_OCULUS | XR_EXTERNAL_CAMERA_STATUS_CAPTURING_BIT_OCULUS};

/*!
 * @brief Flags class projection of XrExternalCameraStatusFlagsOCULUS
 * 
 * Provided by the `XR_OCULUS_external_camera` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrExternalCameraStatusFlagsOCULUS>
 * @xrentity{XrExternalCameraStatusFlagBitsOCULUS}
 * @see ExternalCameraStatusFlagBitsOCULUS, xr::Flags
 */
using ExternalCameraStatusFlagsOCULUS = Flags<ExternalCameraStatusFlagBitsOCULUS, XrExternalCameraStatusFlagsOCULUS>;

/*!
 * @brief Bitwise OR operator between two ExternalCameraStatusFlagBitsOCULUS flag bits.
 * @see ExternalCameraStatusFlagBitsOCULUS, ExternalCameraStatusFlagsOCULUS, xr::Flags
 */
OPENXR_HPP_INLINE ExternalCameraStatusFlagsOCULUS operator|( ExternalCameraStatusFlagBitsOCULUS bit0, ExternalCameraStatusFlagBitsOCULUS bit1) {
    return ExternalCameraStatusFlagsOCULUS( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a ExternalCameraStatusFlagBitsOCULUS flag bit.
 * @see ExternalCameraStatusFlagBitsOCULUS, ExternalCameraStatusFlagsOCULUS, xr::Flags
 */
OPENXR_HPP_INLINE ExternalCameraStatusFlagsOCULUS operator~( ExternalCameraStatusFlagBitsOCULUS bits) {
    return ~( ExternalCameraStatusFlagsOCULUS( bits ) );
}

#endif  // XR_OCULUS_external_camera

































#ifdef XR_META_performance_metrics
/*!
 * @brief Flag bits for XrPerformanceMetricsCounterFlagsMETA
 * 
 * Provided by the `XR_META_performance_metrics` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPerformanceMetricsCounterFlagBitsMETA>
 * @xrentity{XrPerformanceMetricsCounterFlagBitsMETA}
 * @see PerformanceMetricsCounterFlagsMETA
 */
enum class PerformanceMetricsCounterFlagBitsMETA : XrFlags64 {
    None = 0,
    AnyValueValid = XR_PERFORMANCE_METRICS_COUNTER_ANY_VALUE_VALID_BIT_META,
    UintValueValid = XR_PERFORMANCE_METRICS_COUNTER_UINT_VALUE_VALID_BIT_META,
    FloatValueValid = XR_PERFORMANCE_METRICS_COUNTER_FLOAT_VALUE_VALID_BIT_META,
    AllBits =
XR_PERFORMANCE_METRICS_COUNTER_ANY_VALUE_VALID_BIT_META | XR_PERFORMANCE_METRICS_COUNTER_UINT_VALUE_VALID_BIT_META | XR_PERFORMANCE_METRICS_COUNTER_FLOAT_VALUE_VALID_BIT_META};

/*!
 * @brief Flags class projection of XrPerformanceMetricsCounterFlagsMETA
 * 
 * Provided by the `XR_META_performance_metrics` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPerformanceMetricsCounterFlagsMETA>
 * @xrentity{XrPerformanceMetricsCounterFlagBitsMETA}
 * @see PerformanceMetricsCounterFlagBitsMETA, xr::Flags
 */
using PerformanceMetricsCounterFlagsMETA = Flags<PerformanceMetricsCounterFlagBitsMETA, XrPerformanceMetricsCounterFlagsMETA>;

/*!
 * @brief Bitwise OR operator between two PerformanceMetricsCounterFlagBitsMETA flag bits.
 * @see PerformanceMetricsCounterFlagBitsMETA, PerformanceMetricsCounterFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE PerformanceMetricsCounterFlagsMETA operator|( PerformanceMetricsCounterFlagBitsMETA bit0, PerformanceMetricsCounterFlagBitsMETA bit1) {
    return PerformanceMetricsCounterFlagsMETA( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a PerformanceMetricsCounterFlagBitsMETA flag bit.
 * @see PerformanceMetricsCounterFlagBitsMETA, PerformanceMetricsCounterFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE PerformanceMetricsCounterFlagsMETA operator~( PerformanceMetricsCounterFlagBitsMETA bits) {
    return ~( PerformanceMetricsCounterFlagsMETA( bits ) );
}

#endif  // XR_META_performance_metrics

































#ifdef XR_META_environment_depth
/*!
 * @brief Flag bits for XrEnvironmentDepthProviderCreateFlagsMETA
 * 
 * Provided by the `XR_META_environment_depth` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrEnvironmentDepthProviderCreateFlagBitsMETA>
 * @xrentity{XrEnvironmentDepthProviderCreateFlagBitsMETA}
 * @see EnvironmentDepthProviderCreateFlagsMETA
 */
enum class EnvironmentDepthProviderCreateFlagBitsMETA : XrFlags64 {
    None = 0,
    AllBits =
 0
};

/*!
 * @brief Flags class projection of XrEnvironmentDepthProviderCreateFlagsMETA
 * 
 * Provided by the `XR_META_environment_depth` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrEnvironmentDepthProviderCreateFlagsMETA>
 * @xrentity{XrEnvironmentDepthProviderCreateFlagBitsMETA}
 * @see EnvironmentDepthProviderCreateFlagBitsMETA, xr::Flags
 */
using EnvironmentDepthProviderCreateFlagsMETA = Flags<EnvironmentDepthProviderCreateFlagBitsMETA, XrEnvironmentDepthProviderCreateFlagsMETA>;

/*!
 * @brief Bitwise OR operator between two EnvironmentDepthProviderCreateFlagBitsMETA flag bits.
 * @see EnvironmentDepthProviderCreateFlagBitsMETA, EnvironmentDepthProviderCreateFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE EnvironmentDepthProviderCreateFlagsMETA operator|( EnvironmentDepthProviderCreateFlagBitsMETA bit0, EnvironmentDepthProviderCreateFlagBitsMETA bit1) {
    return EnvironmentDepthProviderCreateFlagsMETA( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a EnvironmentDepthProviderCreateFlagBitsMETA flag bit.
 * @see EnvironmentDepthProviderCreateFlagBitsMETA, EnvironmentDepthProviderCreateFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE EnvironmentDepthProviderCreateFlagsMETA operator~( EnvironmentDepthProviderCreateFlagBitsMETA bits) {
    return ~( EnvironmentDepthProviderCreateFlagsMETA( bits ) );
}

#endif  // XR_META_environment_depth

































#ifdef XR_META_environment_depth
/*!
 * @brief Flag bits for XrEnvironmentDepthSwapchainCreateFlagsMETA
 * 
 * Provided by the `XR_META_environment_depth` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrEnvironmentDepthSwapchainCreateFlagBitsMETA>
 * @xrentity{XrEnvironmentDepthSwapchainCreateFlagBitsMETA}
 * @see EnvironmentDepthSwapchainCreateFlagsMETA
 */
enum class EnvironmentDepthSwapchainCreateFlagBitsMETA : XrFlags64 {
    None = 0,
    AllBits =
 0
};

/*!
 * @brief Flags class projection of XrEnvironmentDepthSwapchainCreateFlagsMETA
 * 
 * Provided by the `XR_META_environment_depth` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrEnvironmentDepthSwapchainCreateFlagsMETA>
 * @xrentity{XrEnvironmentDepthSwapchainCreateFlagBitsMETA}
 * @see EnvironmentDepthSwapchainCreateFlagBitsMETA, xr::Flags
 */
using EnvironmentDepthSwapchainCreateFlagsMETA = Flags<EnvironmentDepthSwapchainCreateFlagBitsMETA, XrEnvironmentDepthSwapchainCreateFlagsMETA>;

/*!
 * @brief Bitwise OR operator between two EnvironmentDepthSwapchainCreateFlagBitsMETA flag bits.
 * @see EnvironmentDepthSwapchainCreateFlagBitsMETA, EnvironmentDepthSwapchainCreateFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE EnvironmentDepthSwapchainCreateFlagsMETA operator|( EnvironmentDepthSwapchainCreateFlagBitsMETA bit0, EnvironmentDepthSwapchainCreateFlagBitsMETA bit1) {
    return EnvironmentDepthSwapchainCreateFlagsMETA( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a EnvironmentDepthSwapchainCreateFlagBitsMETA flag bit.
 * @see EnvironmentDepthSwapchainCreateFlagBitsMETA, EnvironmentDepthSwapchainCreateFlagsMETA, xr::Flags
 */
OPENXR_HPP_INLINE EnvironmentDepthSwapchainCreateFlagsMETA operator~( EnvironmentDepthSwapchainCreateFlagBitsMETA bits) {
    return ~( EnvironmentDepthSwapchainCreateFlagsMETA( bits ) );
}

#endif  // XR_META_environment_depth

































#ifdef XR_HTC_foveation
/*!
 * @brief Flag bits for XrFoveationDynamicFlagsHTC
 * 
 * Provided by the `XR_HTC_foveation` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFoveationDynamicFlagBitsHTC>
 * @xrentity{XrFoveationDynamicFlagBitsHTC}
 * @see FoveationDynamicFlagsHTC
 */
enum class FoveationDynamicFlagBitsHTC : XrFlags64 {
    None = 0,
    LevelEnabled = XR_FOVEATION_DYNAMIC_LEVEL_ENABLED_BIT_HTC,
    ClearFovEnabled = XR_FOVEATION_DYNAMIC_CLEAR_FOV_ENABLED_BIT_HTC,
    FocalCenterOffsetEnabled = XR_FOVEATION_DYNAMIC_FOCAL_CENTER_OFFSET_ENABLED_BIT_HTC,
    AllBits =
XR_FOVEATION_DYNAMIC_LEVEL_ENABLED_BIT_HTC | XR_FOVEATION_DYNAMIC_CLEAR_FOV_ENABLED_BIT_HTC | XR_FOVEATION_DYNAMIC_FOCAL_CENTER_OFFSET_ENABLED_BIT_HTC};

/*!
 * @brief Flags class projection of XrFoveationDynamicFlagsHTC
 * 
 * Provided by the `XR_HTC_foveation` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFoveationDynamicFlagsHTC>
 * @xrentity{XrFoveationDynamicFlagBitsHTC}
 * @see FoveationDynamicFlagBitsHTC, xr::Flags
 */
using FoveationDynamicFlagsHTC = Flags<FoveationDynamicFlagBitsHTC, XrFoveationDynamicFlagsHTC>;

/*!
 * @brief Bitwise OR operator between two FoveationDynamicFlagBitsHTC flag bits.
 * @see FoveationDynamicFlagBitsHTC, FoveationDynamicFlagsHTC, xr::Flags
 */
OPENXR_HPP_INLINE FoveationDynamicFlagsHTC operator|( FoveationDynamicFlagBitsHTC bit0, FoveationDynamicFlagBitsHTC bit1) {
    return FoveationDynamicFlagsHTC( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a FoveationDynamicFlagBitsHTC flag bit.
 * @see FoveationDynamicFlagBitsHTC, FoveationDynamicFlagsHTC, xr::Flags
 */
OPENXR_HPP_INLINE FoveationDynamicFlagsHTC operator~( FoveationDynamicFlagBitsHTC bits) {
    return ~( FoveationDynamicFlagsHTC( bits ) );
}

#endif  // XR_HTC_foveation

































#ifdef XR_BD_spatial_mesh
/*!
 * @brief Flag bits for XrSpatialMeshConfigFlagsBD
 * 
 * Provided by the `XR_BD_spatial_mesh` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpatialMeshConfigFlagBitsBD>
 * @xrentity{XrSpatialMeshConfigFlagBitsBD}
 * @see SpatialMeshConfigFlagsBD
 */
enum class SpatialMeshConfigFlagBitsBD : XrFlags64 {
    None = 0,
    Semantic = XR_SPATIAL_MESH_CONFIG_SEMANTIC_BIT_BD,
    AlignSemanticWithVertex = XR_SPATIAL_MESH_CONFIG_ALIGN_SEMANTIC_WITH_VERTEX_BIT_BD,
    AllBits =
XR_SPATIAL_MESH_CONFIG_SEMANTIC_BIT_BD | XR_SPATIAL_MESH_CONFIG_ALIGN_SEMANTIC_WITH_VERTEX_BIT_BD};

/*!
 * @brief Flags class projection of XrSpatialMeshConfigFlagsBD
 * 
 * Provided by the `XR_BD_spatial_mesh` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrSpatialMeshConfigFlagsBD>
 * @xrentity{XrSpatialMeshConfigFlagBitsBD}
 * @see SpatialMeshConfigFlagBitsBD, xr::Flags
 */
using SpatialMeshConfigFlagsBD = Flags<SpatialMeshConfigFlagBitsBD, XrSpatialMeshConfigFlagsBD>;

/*!
 * @brief Bitwise OR operator between two SpatialMeshConfigFlagBitsBD flag bits.
 * @see SpatialMeshConfigFlagBitsBD, SpatialMeshConfigFlagsBD, xr::Flags
 */
OPENXR_HPP_INLINE SpatialMeshConfigFlagsBD operator|( SpatialMeshConfigFlagBitsBD bit0, SpatialMeshConfigFlagBitsBD bit1) {
    return SpatialMeshConfigFlagsBD( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a SpatialMeshConfigFlagBitsBD flag bit.
 * @see SpatialMeshConfigFlagBitsBD, SpatialMeshConfigFlagsBD, xr::Flags
 */
OPENXR_HPP_INLINE SpatialMeshConfigFlagsBD operator~( SpatialMeshConfigFlagBitsBD bits) {
    return ~( SpatialMeshConfigFlagsBD( bits ) );
}

#endif  // XR_BD_spatial_mesh

































#ifdef XR_EXT_plane_detection
/*!
 * @brief Flag bits for XrPlaneDetectionCapabilityFlagsEXT
 * 
 * Provided by the `XR_EXT_plane_detection` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPlaneDetectionCapabilityFlagBitsEXT>
 * @xrentity{XrPlaneDetectionCapabilityFlagBitsEXT}
 * @see PlaneDetectionCapabilityFlagsEXT
 */
enum class PlaneDetectionCapabilityFlagBitsEXT : XrFlags64 {
    None = 0,
    PlaneDetection = XR_PLANE_DETECTION_CAPABILITY_PLANE_DETECTION_BIT_EXT,
    PlaneHoles = XR_PLANE_DETECTION_CAPABILITY_PLANE_HOLES_BIT_EXT,
    SemanticCeiling = XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_CEILING_BIT_EXT,
    SemanticFloor = XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_FLOOR_BIT_EXT,
    SemanticWall = XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_WALL_BIT_EXT,
    SemanticPlatform = XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_PLATFORM_BIT_EXT,
    Orientation = XR_PLANE_DETECTION_CAPABILITY_ORIENTATION_BIT_EXT,
    AllBits =
XR_PLANE_DETECTION_CAPABILITY_PLANE_DETECTION_BIT_EXT | XR_PLANE_DETECTION_CAPABILITY_PLANE_HOLES_BIT_EXT | XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_CEILING_BIT_EXT | XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_FLOOR_BIT_EXT | XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_WALL_BIT_EXT | XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_PLATFORM_BIT_EXT | XR_PLANE_DETECTION_CAPABILITY_ORIENTATION_BIT_EXT};

/*!
 * @brief Flags class projection of XrPlaneDetectionCapabilityFlagsEXT
 * 
 * Provided by the `XR_EXT_plane_detection` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPlaneDetectionCapabilityFlagsEXT>
 * @xrentity{XrPlaneDetectionCapabilityFlagBitsEXT}
 * @see PlaneDetectionCapabilityFlagBitsEXT, xr::Flags
 */
using PlaneDetectionCapabilityFlagsEXT = Flags<PlaneDetectionCapabilityFlagBitsEXT, XrPlaneDetectionCapabilityFlagsEXT>;

/*!
 * @brief Bitwise OR operator between two PlaneDetectionCapabilityFlagBitsEXT flag bits.
 * @see PlaneDetectionCapabilityFlagBitsEXT, PlaneDetectionCapabilityFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE PlaneDetectionCapabilityFlagsEXT operator|( PlaneDetectionCapabilityFlagBitsEXT bit0, PlaneDetectionCapabilityFlagBitsEXT bit1) {
    return PlaneDetectionCapabilityFlagsEXT( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a PlaneDetectionCapabilityFlagBitsEXT flag bit.
 * @see PlaneDetectionCapabilityFlagBitsEXT, PlaneDetectionCapabilityFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE PlaneDetectionCapabilityFlagsEXT operator~( PlaneDetectionCapabilityFlagBitsEXT bits) {
    return ~( PlaneDetectionCapabilityFlagsEXT( bits ) );
}

#endif  // XR_EXT_plane_detection

































#ifdef XR_EXT_plane_detection
/*!
 * @brief Flag bits for XrPlaneDetectorFlagsEXT
 * 
 * Provided by the `XR_EXT_plane_detection` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPlaneDetectorFlagBitsEXT>
 * @xrentity{XrPlaneDetectorFlagBitsEXT}
 * @see PlaneDetectorFlagsEXT
 */
enum class PlaneDetectorFlagBitsEXT : XrFlags64 {
    None = 0,
    EnableContour = XR_PLANE_DETECTOR_ENABLE_CONTOUR_BIT_EXT,
    AllBits =
XR_PLANE_DETECTOR_ENABLE_CONTOUR_BIT_EXT};

/*!
 * @brief Flags class projection of XrPlaneDetectorFlagsEXT
 * 
 * Provided by the `XR_EXT_plane_detection` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrPlaneDetectorFlagsEXT>
 * @xrentity{XrPlaneDetectorFlagBitsEXT}
 * @see PlaneDetectorFlagBitsEXT, xr::Flags
 */
using PlaneDetectorFlagsEXT = Flags<PlaneDetectorFlagBitsEXT, XrPlaneDetectorFlagsEXT>;

/*!
 * @brief Bitwise OR operator between two PlaneDetectorFlagBitsEXT flag bits.
 * @see PlaneDetectorFlagBitsEXT, PlaneDetectorFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE PlaneDetectorFlagsEXT operator|( PlaneDetectorFlagBitsEXT bit0, PlaneDetectorFlagBitsEXT bit1) {
    return PlaneDetectorFlagsEXT( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a PlaneDetectorFlagBitsEXT flag bit.
 * @see PlaneDetectorFlagBitsEXT, PlaneDetectorFlagsEXT, xr::Flags
 */
OPENXR_HPP_INLINE PlaneDetectorFlagsEXT operator~( PlaneDetectorFlagBitsEXT bits) {
    return ~( PlaneDetectorFlagsEXT( bits ) );
}

#endif  // XR_EXT_plane_detection

































#ifdef XR_ML_world_mesh_detection
/*!
 * @brief Flag bits for XrWorldMeshDetectorFlagsML
 * 
 * Provided by the `XR_ML_world_mesh_detection` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrWorldMeshDetectorFlagBitsML>
 * @xrentity{XrWorldMeshDetectorFlagBitsML}
 * @see WorldMeshDetectorFlagsML
 */
enum class WorldMeshDetectorFlagBitsML : XrFlags64 {
    None = 0,
    PointCloud = XR_WORLD_MESH_DETECTOR_POINT_CLOUD_BIT_ML,
    ComputeNormals = XR_WORLD_MESH_DETECTOR_COMPUTE_NORMALS_BIT_ML,
    ComputeConfidence = XR_WORLD_MESH_DETECTOR_COMPUTE_CONFIDENCE_BIT_ML,
    Planarize = XR_WORLD_MESH_DETECTOR_PLANARIZE_BIT_ML,
    RemoveMeshSkirt = XR_WORLD_MESH_DETECTOR_REMOVE_MESH_SKIRT_BIT_ML,
    IndexOrderCW = XR_WORLD_MESH_DETECTOR_INDEX_ORDER_CW_BIT_ML,
    AllBits =
XR_WORLD_MESH_DETECTOR_POINT_CLOUD_BIT_ML | XR_WORLD_MESH_DETECTOR_COMPUTE_NORMALS_BIT_ML | XR_WORLD_MESH_DETECTOR_COMPUTE_CONFIDENCE_BIT_ML | XR_WORLD_MESH_DETECTOR_PLANARIZE_BIT_ML | XR_WORLD_MESH_DETECTOR_REMOVE_MESH_SKIRT_BIT_ML | XR_WORLD_MESH_DETECTOR_INDEX_ORDER_CW_BIT_ML};

/*!
 * @brief Flags class projection of XrWorldMeshDetectorFlagsML
 * 
 * Provided by the `XR_ML_world_mesh_detection` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrWorldMeshDetectorFlagsML>
 * @xrentity{XrWorldMeshDetectorFlagBitsML}
 * @see WorldMeshDetectorFlagBitsML, xr::Flags
 */
using WorldMeshDetectorFlagsML = Flags<WorldMeshDetectorFlagBitsML, XrWorldMeshDetectorFlagsML>;

/*!
 * @brief Bitwise OR operator between two WorldMeshDetectorFlagBitsML flag bits.
 * @see WorldMeshDetectorFlagBitsML, WorldMeshDetectorFlagsML, xr::Flags
 */
OPENXR_HPP_INLINE WorldMeshDetectorFlagsML operator|( WorldMeshDetectorFlagBitsML bit0, WorldMeshDetectorFlagBitsML bit1) {
    return WorldMeshDetectorFlagsML( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a WorldMeshDetectorFlagBitsML flag bit.
 * @see WorldMeshDetectorFlagBitsML, WorldMeshDetectorFlagsML, xr::Flags
 */
OPENXR_HPP_INLINE WorldMeshDetectorFlagsML operator~( WorldMeshDetectorFlagBitsML bits) {
    return ~( WorldMeshDetectorFlagsML( bits ) );
}

#endif  // XR_ML_world_mesh_detection

































#ifdef XR_ML_facial_expression
/*!
 * @brief Flag bits for XrFacialExpressionBlendShapePropertiesFlagsML
 * 
 * Provided by the `XR_ML_facial_expression` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFacialExpressionBlendShapePropertiesFlagBitsML>
 * @xrentity{XrFacialExpressionBlendShapePropertiesFlagBitsML}
 * @see FacialExpressionBlendShapePropertiesFlagsML
 */
enum class FacialExpressionBlendShapePropertiesFlagBitsML : XrFlags64 {
    None = 0,
    Valid = XR_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_VALID_BIT_ML,
    Tracked = XR_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_TRACKED_BIT_ML,
    AllBits =
XR_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_VALID_BIT_ML | XR_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_TRACKED_BIT_ML};

/*!
 * @brief Flags class projection of XrFacialExpressionBlendShapePropertiesFlagsML
 * 
 * Provided by the `XR_ML_facial_expression` extension.
 * 
 * @see <https://www.khronos.org/registry/OpenXR/specs/1.0/html/xrspec.html#XrFacialExpressionBlendShapePropertiesFlagsML>
 * @xrentity{XrFacialExpressionBlendShapePropertiesFlagBitsML}
 * @see FacialExpressionBlendShapePropertiesFlagBitsML, xr::Flags
 */
using FacialExpressionBlendShapePropertiesFlagsML = Flags<FacialExpressionBlendShapePropertiesFlagBitsML, XrFacialExpressionBlendShapePropertiesFlagsML>;

/*!
 * @brief Bitwise OR operator between two FacialExpressionBlendShapePropertiesFlagBitsML flag bits.
 * @see FacialExpressionBlendShapePropertiesFlagBitsML, FacialExpressionBlendShapePropertiesFlagsML, xr::Flags
 */
OPENXR_HPP_INLINE FacialExpressionBlendShapePropertiesFlagsML operator|( FacialExpressionBlendShapePropertiesFlagBitsML bit0, FacialExpressionBlendShapePropertiesFlagBitsML bit1) {
    return FacialExpressionBlendShapePropertiesFlagsML( bit0 ) | bit1;
}

/*!
 * @brief Bitwise negation operator of a FacialExpressionBlendShapePropertiesFlagBitsML flag bit.
 * @see FacialExpressionBlendShapePropertiesFlagBitsML, FacialExpressionBlendShapePropertiesFlagsML, xr::Flags
 */
OPENXR_HPP_INLINE FacialExpressionBlendShapePropertiesFlagsML operator~( FacialExpressionBlendShapePropertiesFlagBitsML bits) {
    return ~( FacialExpressionBlendShapePropertiesFlagsML( bits ) );
}

#endif  // XR_ML_facial_expression
//! @}

}  // namespace OPENXR_HPP_NAMESPACE
































#endif  // ifndef OPENXR_FLAGS_HPP_

