// *********** THIS FILE IS GENERATED - DO NOT EDIT ***********
//     See cpp_generator.py for modifications
// ************************************************************

/*
** Copyright (c) 2017-2023 The Khronos Group Inc.
** Copyright (c) 2019-2023 Collabora, Ltd.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** ---- Exceptions to the Apache 2.0 License: ----
**
** As an exception, if you use this Software to generate code and portions of
** this Software are embedded into the generated code as a result, you may
** redistribute such product without providing attribution as would otherwise
** be required by Sections 4(a), 4(b) and 4(d) of the License.
**
** In addition, if you combine or link code generated by this Software with
** software that is licensed under the GPLv2 or the LGPL v2.0 or 2.1
** ("`Combined Software`") and if a court of competent jurisdiction determines
** that the patent provision (Section 3), the indemnity provision (Section 9)
** or other Section of the License conflicts with the conditions of the
** applicable GPL or LGPL license, you may retroactively and prospectively
** choose to deem waived or otherwise exclude such Section(s) of the License,
** but only in their entirety and only with respect to the Combined Software.
**
*/

/*
** This header is generated from the Khronos OpenXR XML API Registry.
**
*/
#ifndef OPENXR_DISPATCH_DYNAMIC_HPP_
#define OPENXR_DISPATCH_DYNAMIC_HPP_
/**
 * @file
 * @brief Contains a dynamically-loading dispatcher class: loads entry points with
 * xrGetInstanceProcAddr, optionally lazily.
 * @ingroup dispatch
 */

#include <openxr/openxr.h>

#if XR_CURRENT_API_VERSION >= XR_MAKE_VERSION(1, 0, 33)
#ifndef XR_EXTENSION_PROTOTYPES
#define XR_EXTENSION_PROTOTYPES 1
#endif
#include <openxr/openxr_loader_negotiation.h>
#endif

#ifdef OPENXR_HPP_DOXYGEN
#include <openxr/openxr_platform.h>
#endif

#include <type_traits>

#if !defined(OPENXR_HPP_ASSERT)
#include <cassert>
#define OPENXR_HPP_ASSERT assert
#endif

#if !defined(OPENXR_HPP_INLINE)
#if defined(__clang___)
#if __has_attribute(always_inline)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#else
#define OPENXR_HPP_INLINE inline
#endif
#elif defined(__GNUC__)
#define OPENXR_HPP_INLINE __attribute__((always_inline)) __inline__
#elif defined(_MSC_VER)
#define OPENXR_HPP_INLINE inline
#else
#define OPENXR_HPP_INLINE inline
#endif
#endif  // !OPENXR_HPP_INLINE

#if !defined(OPENXR_HPP_CONSTEXPR)
#if defined(_MSC_VER) && (_MSC_VER <= 1800)
#define OPENXR_HPP_CONSTEXPR
#else
#define OPENXR_HPP_CONSTEXPR constexpr
#endif
#endif  // !OPENXR_HPP_CONSTEXPR

#if !defined(OPENXR_HPP_SWITCH_CONSTEXPR)
//! @todo set this to constexpr in c++14
#define OPENXR_HPP_SWITCH_CONSTEXPR
#endif  // !OPENXR_HPP_SWITCH_CONSTEXPR

#if !defined(OPENXR_HPP_NAMESPACE)
#define OPENXR_HPP_NAMESPACE xr
#endif  // !OPENXR_HPP_NAMESPACE
namespace OPENXR_HPP_NAMESPACE {

/*!
 * @brief Dispatch class for OpenXR that looks up all functions using a provided or
 * statically-available xrGetInstanceProcAddr function and the optional Instance.
 *
 * This is safer to use, especially in large/multi-module applications, than DispatchLoaderStatic,
 * and is thus recommended.
 *
 * By default, it is lazy-populating: only populating a function pointer when it is attempted to be
 * called (if this object is not const). You can early-populate it using the createFullyPopulated()
 * factory method, providing an Instance and optionally a xrGetInstanceProcAddr function pointer.
 *
 * This class stores all function pointers as type-erased PFN_xrVoidFunction, casting at time of
 * call. This allows the same memory representation to be used across translation units that may not
 * share the same platform defines. Only the member function trampolines containing the casts are
 * conditional on platform defines.
 *
 * @ingroup dispatch
 */
class DispatchLoaderDynamic {
public:
  /*!
   * @name Constructor/Factory functions
   * @{
   */
  /*!
   * @brief Create an empty dispatch table, which is mostly useless if XR_NO_PROTOTYPES is defined.
   *
   * If XR_NO_PROTOTYPES is not defined, the global symbol xrGetInstanceProcAddr is used.
   */
  DispatchLoaderDynamic()
      : DispatchLoaderDynamic(XR_NULL_HANDLE,
#ifdef XR_NO_PROTOTYPES
                              nullptr
#else
                              &::xrGetInstanceProcAddr
#endif
        ) {
  }
  /*!
   * @brief Create a lazy-populating dispatch table.
   */
  explicit DispatchLoaderDynamic(XrInstance instance, PFN_xrGetInstanceProcAddr getInstanceProcAddr)
      : m_instance(instance),
        pfnGetInstanceProcAddr(reinterpret_cast<PFN_xrVoidFunction>(getInstanceProcAddr)) {}

#ifndef XR_NO_PROTOTYPES
  /*!
   * @brief Create a lazy-populating dispatch table using the static xrGetInstanceProcAddr.
   */
  explicit DispatchLoaderDynamic(XrInstance instance)
      : DispatchLoaderDynamic(instance, &::xrGetInstanceProcAddr) {}
#endif  // !XR_NO_PROTOTYPES

  /*!
   * @brief Create a fully-populated dispatch table given a non-null XrInstance and a
   * getInstanceProcAddr.
   */
  static DispatchLoaderDynamic createFullyPopulated(XrInstance instance,
                                                    PFN_xrGetInstanceProcAddr getInstanceProcAddr) {
    OPENXR_HPP_ASSERT(instance != XR_NULL_HANDLE);
    DispatchLoaderDynamic dispatch{instance, getInstanceProcAddr};
    dispatch.populateFully();
    return dispatch;
  }
  //! @}

  /*!
   * @brief Fully populate a dispatch table given a non-null XrInstance and a getInstanceProcAddr.
   */
  void populateFully() {
    OPENXR_HPP_ASSERT(m_instance != XR_NULL_HANDLE);
    OPENXR_HPP_ASSERT(pfnGetInstanceProcAddr != nullptr);
    populate_("xrGetInstanceProcAddr", pfnGetInstanceProcAddr);
    populate_("xrEnumerateApiLayerProperties", pfnEnumerateApiLayerProperties);
    populate_("xrEnumerateInstanceExtensionProperties", pfnEnumerateInstanceExtensionProperties);
    populate_("xrCreateInstance", pfnCreateInstance);
    populate_("xrDestroyInstance", pfnDestroyInstance);
    populate_("xrGetInstanceProperties", pfnGetInstanceProperties);
    populate_("xrPollEvent", pfnPollEvent);
    populate_("xrResultToString", pfnResultToString);
    populate_("xrStructureTypeToString", pfnStructureTypeToString);
    populate_("xrGetSystem", pfnGetSystem);
    populate_("xrGetSystemProperties", pfnGetSystemProperties);
    populate_("xrEnumerateEnvironmentBlendModes", pfnEnumerateEnvironmentBlendModes);
    populate_("xrCreateSession", pfnCreateSession);
    populate_("xrDestroySession", pfnDestroySession);
    populate_("xrEnumerateReferenceSpaces", pfnEnumerateReferenceSpaces);
    populate_("xrCreateReferenceSpace", pfnCreateReferenceSpace);
    populate_("xrGetReferenceSpaceBoundsRect", pfnGetReferenceSpaceBoundsRect);
    populate_("xrCreateActionSpace", pfnCreateActionSpace);
    populate_("xrLocateSpace", pfnLocateSpace);
    populate_("xrDestroySpace", pfnDestroySpace);
    populate_("xrEnumerateViewConfigurations", pfnEnumerateViewConfigurations);
    populate_("xrGetViewConfigurationProperties", pfnGetViewConfigurationProperties);
    populate_("xrEnumerateViewConfigurationViews", pfnEnumerateViewConfigurationViews);
    populate_("xrEnumerateSwapchainFormats", pfnEnumerateSwapchainFormats);
    populate_("xrCreateSwapchain", pfnCreateSwapchain);
    populate_("xrDestroySwapchain", pfnDestroySwapchain);
    populate_("xrEnumerateSwapchainImages", pfnEnumerateSwapchainImages);
    populate_("xrAcquireSwapchainImage", pfnAcquireSwapchainImage);
    populate_("xrWaitSwapchainImage", pfnWaitSwapchainImage);
    populate_("xrReleaseSwapchainImage", pfnReleaseSwapchainImage);
    populate_("xrBeginSession", pfnBeginSession);
    populate_("xrEndSession", pfnEndSession);
    populate_("xrRequestExitSession", pfnRequestExitSession);
    populate_("xrWaitFrame", pfnWaitFrame);
    populate_("xrBeginFrame", pfnBeginFrame);
    populate_("xrEndFrame", pfnEndFrame);
    populate_("xrLocateViews", pfnLocateViews);
    populate_("xrStringToPath", pfnStringToPath);
    populate_("xrPathToString", pfnPathToString);
    populate_("xrCreateActionSet", pfnCreateActionSet);
    populate_("xrDestroyActionSet", pfnDestroyActionSet);
    populate_("xrCreateAction", pfnCreateAction);
    populate_("xrDestroyAction", pfnDestroyAction);
    populate_("xrSuggestInteractionProfileBindings", pfnSuggestInteractionProfileBindings);
    populate_("xrAttachSessionActionSets", pfnAttachSessionActionSets);
    populate_("xrGetCurrentInteractionProfile", pfnGetCurrentInteractionProfile);
    populate_("xrGetActionStateBoolean", pfnGetActionStateBoolean);
    populate_("xrGetActionStateFloat", pfnGetActionStateFloat);
    populate_("xrGetActionStateVector2f", pfnGetActionStateVector2f);
    populate_("xrGetActionStatePose", pfnGetActionStatePose);
    populate_("xrSyncActions", pfnSyncActions);
    populate_("xrEnumerateBoundSourcesForAction", pfnEnumerateBoundSourcesForAction);
    populate_("xrGetInputSourceLocalizedName", pfnGetInputSourceLocalizedName);
    populate_("xrApplyHapticFeedback", pfnApplyHapticFeedback);
    populate_("xrStopHapticFeedback", pfnStopHapticFeedback);
    populate_("xrCreateApiLayerInstance", pfnCreateApiLayerInstance);
    populate_("xrNegotiateLoaderRuntimeInterface", pfnNegotiateLoaderRuntimeInterface);
    populate_("xrNegotiateLoaderApiLayerInterface", pfnNegotiateLoaderApiLayerInterface);
    populate_("xrLocateSpaces", pfnLocateSpaces);
    populate_("xrSetAndroidApplicationThreadKHR", pfnSetAndroidApplicationThreadKHR);
    populate_("xrCreateSwapchainAndroidSurfaceKHR", pfnCreateSwapchainAndroidSurfaceKHR);
    populate_("xrGetOpenGLGraphicsRequirementsKHR", pfnGetOpenGLGraphicsRequirementsKHR);
    populate_("xrGetOpenGLESGraphicsRequirementsKHR", pfnGetOpenGLESGraphicsRequirementsKHR);
    populate_("xrGetVulkanInstanceExtensionsKHR", pfnGetVulkanInstanceExtensionsKHR);
    populate_("xrGetVulkanDeviceExtensionsKHR", pfnGetVulkanDeviceExtensionsKHR);
    populate_("xrGetVulkanGraphicsDeviceKHR", pfnGetVulkanGraphicsDeviceKHR);
    populate_("xrGetVulkanGraphicsRequirementsKHR", pfnGetVulkanGraphicsRequirementsKHR);
    populate_("xrGetD3D11GraphicsRequirementsKHR", pfnGetD3D11GraphicsRequirementsKHR);
    populate_("xrGetD3D12GraphicsRequirementsKHR", pfnGetD3D12GraphicsRequirementsKHR);
    populate_("xrGetMetalGraphicsRequirementsKHR", pfnGetMetalGraphicsRequirementsKHR);
    populate_("xrGetVisibilityMaskKHR", pfnGetVisibilityMaskKHR);
    populate_("xrConvertWin32PerformanceCounterToTimeKHR",
              pfnConvertWin32PerformanceCounterToTimeKHR);
    populate_("xrConvertTimeToWin32PerformanceCounterKHR",
              pfnConvertTimeToWin32PerformanceCounterKHR);
    populate_("xrConvertTimespecTimeToTimeKHR", pfnConvertTimespecTimeToTimeKHR);
    populate_("xrConvertTimeToTimespecTimeKHR", pfnConvertTimeToTimespecTimeKHR);
    populate_("xrInitializeLoaderKHR", pfnInitializeLoaderKHR);
    populate_("xrCreateVulkanInstanceKHR", pfnCreateVulkanInstanceKHR);
    populate_("xrCreateVulkanDeviceKHR", pfnCreateVulkanDeviceKHR);
    populate_("xrGetVulkanGraphicsDevice2KHR", pfnGetVulkanGraphicsDevice2KHR);
    populate_("xrGetVulkanGraphicsRequirements2KHR", pfnGetVulkanGraphicsRequirements2KHR);
    populate_("xrStructureTypeToString2KHR", pfnStructureTypeToString2KHR);
    populate_("xrLocateSpacesKHR", pfnLocateSpacesKHR);
    populate_("xrPerfSettingsSetPerformanceLevelEXT", pfnPerfSettingsSetPerformanceLevelEXT);
    populate_("xrThermalGetTemperatureTrendEXT", pfnThermalGetTemperatureTrendEXT);
    populate_("xrSetDebugUtilsObjectNameEXT", pfnSetDebugUtilsObjectNameEXT);
    populate_("xrCreateDebugUtilsMessengerEXT", pfnCreateDebugUtilsMessengerEXT);
    populate_("xrDestroyDebugUtilsMessengerEXT", pfnDestroyDebugUtilsMessengerEXT);
    populate_("xrSubmitDebugUtilsMessageEXT", pfnSubmitDebugUtilsMessageEXT);
    populate_("xrSessionBeginDebugUtilsLabelRegionEXT", pfnSessionBeginDebugUtilsLabelRegionEXT);
    populate_("xrSessionEndDebugUtilsLabelRegionEXT", pfnSessionEndDebugUtilsLabelRegionEXT);
    populate_("xrSessionInsertDebugUtilsLabelEXT", pfnSessionInsertDebugUtilsLabelEXT);
    populate_("xrCreateSpatialAnchorMSFT", pfnCreateSpatialAnchorMSFT);
    populate_("xrCreateSpatialAnchorSpaceMSFT", pfnCreateSpatialAnchorSpaceMSFT);
    populate_("xrDestroySpatialAnchorMSFT", pfnDestroySpatialAnchorMSFT);
    populate_("xrSetInputDeviceActiveEXT", pfnSetInputDeviceActiveEXT);
    populate_("xrSetInputDeviceStateBoolEXT", pfnSetInputDeviceStateBoolEXT);
    populate_("xrSetInputDeviceStateFloatEXT", pfnSetInputDeviceStateFloatEXT);
    populate_("xrSetInputDeviceStateVector2fEXT", pfnSetInputDeviceStateVector2fEXT);
    populate_("xrSetInputDeviceLocationEXT", pfnSetInputDeviceLocationEXT);
    populate_("xrCreateSpatialGraphNodeSpaceMSFT", pfnCreateSpatialGraphNodeSpaceMSFT);
    populate_("xrTryCreateSpatialGraphStaticNodeBindingMSFT",
              pfnTryCreateSpatialGraphStaticNodeBindingMSFT);
    populate_("xrDestroySpatialGraphNodeBindingMSFT", pfnDestroySpatialGraphNodeBindingMSFT);
    populate_("xrGetSpatialGraphNodeBindingPropertiesMSFT",
              pfnGetSpatialGraphNodeBindingPropertiesMSFT);
    populate_("xrCreateHandTrackerEXT", pfnCreateHandTrackerEXT);
    populate_("xrDestroyHandTrackerEXT", pfnDestroyHandTrackerEXT);
    populate_("xrLocateHandJointsEXT", pfnLocateHandJointsEXT);
    populate_("xrCreateHandMeshSpaceMSFT", pfnCreateHandMeshSpaceMSFT);
    populate_("xrUpdateHandMeshMSFT", pfnUpdateHandMeshMSFT);
    populate_("xrGetControllerModelKeyMSFT", pfnGetControllerModelKeyMSFT);
    populate_("xrLoadControllerModelMSFT", pfnLoadControllerModelMSFT);
    populate_("xrGetControllerModelPropertiesMSFT", pfnGetControllerModelPropertiesMSFT);
    populate_("xrGetControllerModelStateMSFT", pfnGetControllerModelStateMSFT);
    populate_("xrCreateSpatialAnchorFromPerceptionAnchorMSFT",
              pfnCreateSpatialAnchorFromPerceptionAnchorMSFT);
    populate_("xrTryGetPerceptionAnchorFromSpatialAnchorMSFT",
              pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT);
    populate_("xrEnumerateReprojectionModesMSFT", pfnEnumerateReprojectionModesMSFT);
    populate_("xrUpdateSwapchainFB", pfnUpdateSwapchainFB);
    populate_("xrGetSwapchainStateFB", pfnGetSwapchainStateFB);
    populate_("xrCreateBodyTrackerFB", pfnCreateBodyTrackerFB);
    populate_("xrDestroyBodyTrackerFB", pfnDestroyBodyTrackerFB);
    populate_("xrLocateBodyJointsFB", pfnLocateBodyJointsFB);
    populate_("xrGetBodySkeletonFB", pfnGetBodySkeletonFB);
    populate_("xrEnumerateSceneComputeFeaturesMSFT", pfnEnumerateSceneComputeFeaturesMSFT);
    populate_("xrCreateSceneObserverMSFT", pfnCreateSceneObserverMSFT);
    populate_("xrDestroySceneObserverMSFT", pfnDestroySceneObserverMSFT);
    populate_("xrCreateSceneMSFT", pfnCreateSceneMSFT);
    populate_("xrDestroySceneMSFT", pfnDestroySceneMSFT);
    populate_("xrComputeNewSceneMSFT", pfnComputeNewSceneMSFT);
    populate_("xrGetSceneComputeStateMSFT", pfnGetSceneComputeStateMSFT);
    populate_("xrGetSceneComponentsMSFT", pfnGetSceneComponentsMSFT);
    populate_("xrLocateSceneComponentsMSFT", pfnLocateSceneComponentsMSFT);
    populate_("xrGetSceneMeshBuffersMSFT", pfnGetSceneMeshBuffersMSFT);
    populate_("xrDeserializeSceneMSFT", pfnDeserializeSceneMSFT);
    populate_("xrGetSerializedSceneFragmentDataMSFT", pfnGetSerializedSceneFragmentDataMSFT);
    populate_("xrEnumerateDisplayRefreshRatesFB", pfnEnumerateDisplayRefreshRatesFB);
    populate_("xrGetDisplayRefreshRateFB", pfnGetDisplayRefreshRateFB);
    populate_("xrRequestDisplayRefreshRateFB", pfnRequestDisplayRefreshRateFB);
    populate_("xrEnumerateViveTrackerPathsHTCX", pfnEnumerateViveTrackerPathsHTCX);
    populate_("xrCreateFacialTrackerHTC", pfnCreateFacialTrackerHTC);
    populate_("xrDestroyFacialTrackerHTC", pfnDestroyFacialTrackerHTC);
    populate_("xrGetFacialExpressionsHTC", pfnGetFacialExpressionsHTC);
    populate_("xrEnumerateColorSpacesFB", pfnEnumerateColorSpacesFB);
    populate_("xrSetColorSpaceFB", pfnSetColorSpaceFB);
    populate_("xrGetHandMeshFB", pfnGetHandMeshFB);
    populate_("xrCreateSpatialAnchorFB", pfnCreateSpatialAnchorFB);
    populate_("xrGetSpaceUuidFB", pfnGetSpaceUuidFB);
    populate_("xrEnumerateSpaceSupportedComponentsFB", pfnEnumerateSpaceSupportedComponentsFB);
    populate_("xrSetSpaceComponentStatusFB", pfnSetSpaceComponentStatusFB);
    populate_("xrGetSpaceComponentStatusFB", pfnGetSpaceComponentStatusFB);
    populate_("xrCreateFoveationProfileFB", pfnCreateFoveationProfileFB);
    populate_("xrDestroyFoveationProfileFB", pfnDestroyFoveationProfileFB);
    populate_("xrQuerySystemTrackedKeyboardFB", pfnQuerySystemTrackedKeyboardFB);
    populate_("xrCreateKeyboardSpaceFB", pfnCreateKeyboardSpaceFB);
    populate_("xrCreateTriangleMeshFB", pfnCreateTriangleMeshFB);
    populate_("xrDestroyTriangleMeshFB", pfnDestroyTriangleMeshFB);
    populate_("xrTriangleMeshGetVertexBufferFB", pfnTriangleMeshGetVertexBufferFB);
    populate_("xrTriangleMeshGetIndexBufferFB", pfnTriangleMeshGetIndexBufferFB);
    populate_("xrTriangleMeshBeginUpdateFB", pfnTriangleMeshBeginUpdateFB);
    populate_("xrTriangleMeshEndUpdateFB", pfnTriangleMeshEndUpdateFB);
    populate_("xrTriangleMeshBeginVertexBufferUpdateFB", pfnTriangleMeshBeginVertexBufferUpdateFB);
    populate_("xrTriangleMeshEndVertexBufferUpdateFB", pfnTriangleMeshEndVertexBufferUpdateFB);
    populate_("xrCreatePassthroughFB", pfnCreatePassthroughFB);
    populate_("xrDestroyPassthroughFB", pfnDestroyPassthroughFB);
    populate_("xrPassthroughStartFB", pfnPassthroughStartFB);
    populate_("xrPassthroughPauseFB", pfnPassthroughPauseFB);
    populate_("xrCreatePassthroughLayerFB", pfnCreatePassthroughLayerFB);
    populate_("xrDestroyPassthroughLayerFB", pfnDestroyPassthroughLayerFB);
    populate_("xrPassthroughLayerPauseFB", pfnPassthroughLayerPauseFB);
    populate_("xrPassthroughLayerResumeFB", pfnPassthroughLayerResumeFB);
    populate_("xrPassthroughLayerSetStyleFB", pfnPassthroughLayerSetStyleFB);
    populate_("xrCreateGeometryInstanceFB", pfnCreateGeometryInstanceFB);
    populate_("xrDestroyGeometryInstanceFB", pfnDestroyGeometryInstanceFB);
    populate_("xrGeometryInstanceSetTransformFB", pfnGeometryInstanceSetTransformFB);
    populate_("xrEnumerateRenderModelPathsFB", pfnEnumerateRenderModelPathsFB);
    populate_("xrGetRenderModelPropertiesFB", pfnGetRenderModelPropertiesFB);
    populate_("xrLoadRenderModelFB", pfnLoadRenderModelFB);
    populate_("xrSetEnvironmentDepthEstimationVARJO", pfnSetEnvironmentDepthEstimationVARJO);
    populate_("xrSetMarkerTrackingVARJO", pfnSetMarkerTrackingVARJO);
    populate_("xrSetMarkerTrackingTimeoutVARJO", pfnSetMarkerTrackingTimeoutVARJO);
    populate_("xrSetMarkerTrackingPredictionVARJO", pfnSetMarkerTrackingPredictionVARJO);
    populate_("xrGetMarkerSizeVARJO", pfnGetMarkerSizeVARJO);
    populate_("xrCreateMarkerSpaceVARJO", pfnCreateMarkerSpaceVARJO);
    populate_("xrSetViewOffsetVARJO", pfnSetViewOffsetVARJO);
    populate_("xrCreateSpaceFromCoordinateFrameUIDML", pfnCreateSpaceFromCoordinateFrameUIDML);
    populate_("xrCreateMarkerDetectorML", pfnCreateMarkerDetectorML);
    populate_("xrDestroyMarkerDetectorML", pfnDestroyMarkerDetectorML);
    populate_("xrSnapshotMarkerDetectorML", pfnSnapshotMarkerDetectorML);
    populate_("xrGetMarkerDetectorStateML", pfnGetMarkerDetectorStateML);
    populate_("xrGetMarkersML", pfnGetMarkersML);
    populate_("xrGetMarkerReprojectionErrorML", pfnGetMarkerReprojectionErrorML);
    populate_("xrGetMarkerLengthML", pfnGetMarkerLengthML);
    populate_("xrGetMarkerNumberML", pfnGetMarkerNumberML);
    populate_("xrGetMarkerStringML", pfnGetMarkerStringML);
    populate_("xrCreateMarkerSpaceML", pfnCreateMarkerSpaceML);
    populate_("xrEnableLocalizationEventsML", pfnEnableLocalizationEventsML);
    populate_("xrQueryLocalizationMapsML", pfnQueryLocalizationMapsML);
    populate_("xrRequestMapLocalizationML", pfnRequestMapLocalizationML);
    populate_("xrImportLocalizationMapML", pfnImportLocalizationMapML);
    populate_("xrCreateExportedLocalizationMapML", pfnCreateExportedLocalizationMapML);
    populate_("xrDestroyExportedLocalizationMapML", pfnDestroyExportedLocalizationMapML);
    populate_("xrGetExportedLocalizationMapDataML", pfnGetExportedLocalizationMapDataML);
    populate_("xrCreateSpatialAnchorsAsyncML", pfnCreateSpatialAnchorsAsyncML);
    populate_("xrCreateSpatialAnchorsCompleteML", pfnCreateSpatialAnchorsCompleteML);
    populate_("xrGetSpatialAnchorStateML", pfnGetSpatialAnchorStateML);
    populate_("xrCreateSpatialAnchorsStorageML", pfnCreateSpatialAnchorsStorageML);
    populate_("xrDestroySpatialAnchorsStorageML", pfnDestroySpatialAnchorsStorageML);
    populate_("xrQuerySpatialAnchorsAsyncML", pfnQuerySpatialAnchorsAsyncML);
    populate_("xrQuerySpatialAnchorsCompleteML", pfnQuerySpatialAnchorsCompleteML);
    populate_("xrPublishSpatialAnchorsAsyncML", pfnPublishSpatialAnchorsAsyncML);
    populate_("xrPublishSpatialAnchorsCompleteML", pfnPublishSpatialAnchorsCompleteML);
    populate_("xrDeleteSpatialAnchorsAsyncML", pfnDeleteSpatialAnchorsAsyncML);
    populate_("xrDeleteSpatialAnchorsCompleteML", pfnDeleteSpatialAnchorsCompleteML);
    populate_("xrUpdateSpatialAnchorsExpirationAsyncML", pfnUpdateSpatialAnchorsExpirationAsyncML);
    populate_("xrUpdateSpatialAnchorsExpirationCompleteML",
              pfnUpdateSpatialAnchorsExpirationCompleteML);
    populate_("xrCreateSpatialAnchorStoreConnectionMSFT",
              pfnCreateSpatialAnchorStoreConnectionMSFT);
    populate_("xrDestroySpatialAnchorStoreConnectionMSFT",
              pfnDestroySpatialAnchorStoreConnectionMSFT);
    populate_("xrPersistSpatialAnchorMSFT", pfnPersistSpatialAnchorMSFT);
    populate_("xrEnumeratePersistedSpatialAnchorNamesMSFT",
              pfnEnumeratePersistedSpatialAnchorNamesMSFT);
    populate_("xrCreateSpatialAnchorFromPersistedNameMSFT",
              pfnCreateSpatialAnchorFromPersistedNameMSFT);
    populate_("xrUnpersistSpatialAnchorMSFT", pfnUnpersistSpatialAnchorMSFT);
    populate_("xrClearSpatialAnchorStoreMSFT", pfnClearSpatialAnchorStoreMSFT);
    populate_("xrGetSceneMarkerRawDataMSFT", pfnGetSceneMarkerRawDataMSFT);
    populate_("xrGetSceneMarkerDecodedStringMSFT", pfnGetSceneMarkerDecodedStringMSFT);
    populate_("xrQuerySpacesFB", pfnQuerySpacesFB);
    populate_("xrRetrieveSpaceQueryResultsFB", pfnRetrieveSpaceQueryResultsFB);
    populate_("xrSaveSpaceFB", pfnSaveSpaceFB);
    populate_("xrEraseSpaceFB", pfnEraseSpaceFB);
    populate_("xrGetAudioOutputDeviceGuidOculus", pfnGetAudioOutputDeviceGuidOculus);
    populate_("xrGetAudioInputDeviceGuidOculus", pfnGetAudioInputDeviceGuidOculus);
    populate_("xrShareSpacesFB", pfnShareSpacesFB);
    populate_("xrGetSpaceBoundingBox2DFB", pfnGetSpaceBoundingBox2DFB);
    populate_("xrGetSpaceBoundingBox3DFB", pfnGetSpaceBoundingBox3DFB);
    populate_("xrGetSpaceSemanticLabelsFB", pfnGetSpaceSemanticLabelsFB);
    populate_("xrGetSpaceBoundary2DFB", pfnGetSpaceBoundary2DFB);
    populate_("xrGetSpaceRoomLayoutFB", pfnGetSpaceRoomLayoutFB);
    populate_("xrSetDigitalLensControlALMALENCE", pfnSetDigitalLensControlALMALENCE);
    populate_("xrRequestSceneCaptureFB", pfnRequestSceneCaptureFB);
    populate_("xrGetSpaceContainerFB", pfnGetSpaceContainerFB);
    populate_("xrGetFoveationEyeTrackedStateMETA", pfnGetFoveationEyeTrackedStateMETA);
    populate_("xrCreateFaceTrackerFB", pfnCreateFaceTrackerFB);
    populate_("xrDestroyFaceTrackerFB", pfnDestroyFaceTrackerFB);
    populate_("xrGetFaceExpressionWeightsFB", pfnGetFaceExpressionWeightsFB);
    populate_("xrCreateEyeTrackerFB", pfnCreateEyeTrackerFB);
    populate_("xrDestroyEyeTrackerFB", pfnDestroyEyeTrackerFB);
    populate_("xrGetEyeGazesFB", pfnGetEyeGazesFB);
    populate_("xrPassthroughLayerSetKeyboardHandsIntensityFB",
              pfnPassthroughLayerSetKeyboardHandsIntensityFB);
    populate_("xrGetDeviceSampleRateFB", pfnGetDeviceSampleRateFB);
    populate_("xrGetPassthroughPreferencesMETA", pfnGetPassthroughPreferencesMETA);
    populate_("xrCreateVirtualKeyboardMETA", pfnCreateVirtualKeyboardMETA);
    populate_("xrDestroyVirtualKeyboardMETA", pfnDestroyVirtualKeyboardMETA);
    populate_("xrCreateVirtualKeyboardSpaceMETA", pfnCreateVirtualKeyboardSpaceMETA);
    populate_("xrSuggestVirtualKeyboardLocationMETA", pfnSuggestVirtualKeyboardLocationMETA);
    populate_("xrGetVirtualKeyboardScaleMETA", pfnGetVirtualKeyboardScaleMETA);
    populate_("xrSetVirtualKeyboardModelVisibilityMETA", pfnSetVirtualKeyboardModelVisibilityMETA);
    populate_("xrGetVirtualKeyboardModelAnimationStatesMETA",
              pfnGetVirtualKeyboardModelAnimationStatesMETA);
    populate_("xrGetVirtualKeyboardDirtyTexturesMETA", pfnGetVirtualKeyboardDirtyTexturesMETA);
    populate_("xrGetVirtualKeyboardTextureDataMETA", pfnGetVirtualKeyboardTextureDataMETA);
    populate_("xrSendVirtualKeyboardInputMETA", pfnSendVirtualKeyboardInputMETA);
    populate_("xrChangeVirtualKeyboardTextContextMETA", pfnChangeVirtualKeyboardTextContextMETA);
    populate_("xrEnumerateExternalCamerasOCULUS", pfnEnumerateExternalCamerasOCULUS);
    populate_("xrEnumeratePerformanceMetricsCounterPathsMETA",
              pfnEnumeratePerformanceMetricsCounterPathsMETA);
    populate_("xrSetPerformanceMetricsStateMETA", pfnSetPerformanceMetricsStateMETA);
    populate_("xrGetPerformanceMetricsStateMETA", pfnGetPerformanceMetricsStateMETA);
    populate_("xrQueryPerformanceMetricsCounterMETA", pfnQueryPerformanceMetricsCounterMETA);
    populate_("xrSaveSpaceListFB", pfnSaveSpaceListFB);
    populate_("xrCreateSpaceUserFB", pfnCreateSpaceUserFB);
    populate_("xrGetSpaceUserIdFB", pfnGetSpaceUserIdFB);
    populate_("xrDestroySpaceUserFB", pfnDestroySpaceUserFB);
    populate_("xrGetRecommendedLayerResolutionMETA", pfnGetRecommendedLayerResolutionMETA);
    populate_("xrCreatePassthroughColorLutMETA", pfnCreatePassthroughColorLutMETA);
    populate_("xrDestroyPassthroughColorLutMETA", pfnDestroyPassthroughColorLutMETA);
    populate_("xrUpdatePassthroughColorLutMETA", pfnUpdatePassthroughColorLutMETA);
    populate_("xrGetSpaceTriangleMeshMETA", pfnGetSpaceTriangleMeshMETA);
    populate_("xrCreateFaceTracker2FB", pfnCreateFaceTracker2FB);
    populate_("xrDestroyFaceTracker2FB", pfnDestroyFaceTracker2FB);
    populate_("xrGetFaceExpressionWeights2FB", pfnGetFaceExpressionWeights2FB);
    populate_("xrShareSpacesMETA", pfnShareSpacesMETA);
    populate_("xrCreateEnvironmentDepthProviderMETA", pfnCreateEnvironmentDepthProviderMETA);
    populate_("xrDestroyEnvironmentDepthProviderMETA", pfnDestroyEnvironmentDepthProviderMETA);
    populate_("xrStartEnvironmentDepthProviderMETA", pfnStartEnvironmentDepthProviderMETA);
    populate_("xrStopEnvironmentDepthProviderMETA", pfnStopEnvironmentDepthProviderMETA);
    populate_("xrCreateEnvironmentDepthSwapchainMETA", pfnCreateEnvironmentDepthSwapchainMETA);
    populate_("xrDestroyEnvironmentDepthSwapchainMETA", pfnDestroyEnvironmentDepthSwapchainMETA);
    populate_("xrEnumerateEnvironmentDepthSwapchainImagesMETA",
              pfnEnumerateEnvironmentDepthSwapchainImagesMETA);
    populate_("xrGetEnvironmentDepthSwapchainStateMETA", pfnGetEnvironmentDepthSwapchainStateMETA);
    populate_("xrAcquireEnvironmentDepthImageMETA", pfnAcquireEnvironmentDepthImageMETA);
    populate_("xrSetEnvironmentDepthHandRemovalMETA", pfnSetEnvironmentDepthHandRemovalMETA);
    populate_("xrCreateRenderModelEXT", pfnCreateRenderModelEXT);
    populate_("xrDestroyRenderModelEXT", pfnDestroyRenderModelEXT);
    populate_("xrGetRenderModelPropertiesEXT", pfnGetRenderModelPropertiesEXT);
    populate_("xrCreateRenderModelSpaceEXT", pfnCreateRenderModelSpaceEXT);
    populate_("xrCreateRenderModelAssetEXT", pfnCreateRenderModelAssetEXT);
    populate_("xrDestroyRenderModelAssetEXT", pfnDestroyRenderModelAssetEXT);
    populate_("xrGetRenderModelAssetDataEXT", pfnGetRenderModelAssetDataEXT);
    populate_("xrGetRenderModelAssetPropertiesEXT", pfnGetRenderModelAssetPropertiesEXT);
    populate_("xrGetRenderModelStateEXT", pfnGetRenderModelStateEXT);
    populate_("xrEnumerateInteractionRenderModelIdsEXT", pfnEnumerateInteractionRenderModelIdsEXT);
    populate_("xrEnumerateRenderModelSubactionPathsEXT", pfnEnumerateRenderModelSubactionPathsEXT);
    populate_("xrGetRenderModelPoseTopLevelUserPathEXT", pfnGetRenderModelPoseTopLevelUserPathEXT);
    populate_("xrSetTrackingOptimizationSettingsHintQCOM",
              pfnSetTrackingOptimizationSettingsHintQCOM);
    populate_("xrCreatePassthroughHTC", pfnCreatePassthroughHTC);
    populate_("xrDestroyPassthroughHTC", pfnDestroyPassthroughHTC);
    populate_("xrApplyFoveationHTC", pfnApplyFoveationHTC);
    populate_("xrCreateSpatialAnchorHTC", pfnCreateSpatialAnchorHTC);
    populate_("xrGetSpatialAnchorNameHTC", pfnGetSpatialAnchorNameHTC);
    populate_("xrCreateBodyTrackerHTC", pfnCreateBodyTrackerHTC);
    populate_("xrDestroyBodyTrackerHTC", pfnDestroyBodyTrackerHTC);
    populate_("xrLocateBodyJointsHTC", pfnLocateBodyJointsHTC);
    populate_("xrGetBodySkeletonHTC", pfnGetBodySkeletonHTC);
    populate_("xrApplyForceFeedbackCurlMNDX", pfnApplyForceFeedbackCurlMNDX);
    populate_("xrCreateBodyTrackerBD", pfnCreateBodyTrackerBD);
    populate_("xrDestroyBodyTrackerBD", pfnDestroyBodyTrackerBD);
    populate_("xrLocateBodyJointsBD", pfnLocateBodyJointsBD);
    populate_("xrEnumerateSpatialEntityComponentTypesBD",
              pfnEnumerateSpatialEntityComponentTypesBD);
    populate_("xrGetSpatialEntityUuidBD", pfnGetSpatialEntityUuidBD);
    populate_("xrGetSpatialEntityComponentDataBD", pfnGetSpatialEntityComponentDataBD);
    populate_("xrCreateSenseDataProviderBD", pfnCreateSenseDataProviderBD);
    populate_("xrStartSenseDataProviderAsyncBD", pfnStartSenseDataProviderAsyncBD);
    populate_("xrStartSenseDataProviderCompleteBD", pfnStartSenseDataProviderCompleteBD);
    populate_("xrGetSenseDataProviderStateBD", pfnGetSenseDataProviderStateBD);
    populate_("xrQuerySenseDataAsyncBD", pfnQuerySenseDataAsyncBD);
    populate_("xrQuerySenseDataCompleteBD", pfnQuerySenseDataCompleteBD);
    populate_("xrDestroySenseDataSnapshotBD", pfnDestroySenseDataSnapshotBD);
    populate_("xrGetQueriedSenseDataBD", pfnGetQueriedSenseDataBD);
    populate_("xrStopSenseDataProviderBD", pfnStopSenseDataProviderBD);
    populate_("xrDestroySenseDataProviderBD", pfnDestroySenseDataProviderBD);
    populate_("xrCreateSpatialEntityAnchorBD", pfnCreateSpatialEntityAnchorBD);
    populate_("xrDestroyAnchorBD", pfnDestroyAnchorBD);
    populate_("xrGetAnchorUuidBD", pfnGetAnchorUuidBD);
    populate_("xrCreateAnchorSpaceBD", pfnCreateAnchorSpaceBD);
    populate_("xrCreateSpatialAnchorAsyncBD", pfnCreateSpatialAnchorAsyncBD);
    populate_("xrCreateSpatialAnchorCompleteBD", pfnCreateSpatialAnchorCompleteBD);
    populate_("xrPersistSpatialAnchorAsyncBD", pfnPersistSpatialAnchorAsyncBD);
    populate_("xrPersistSpatialAnchorCompleteBD", pfnPersistSpatialAnchorCompleteBD);
    populate_("xrUnpersistSpatialAnchorAsyncBD", pfnUnpersistSpatialAnchorAsyncBD);
    populate_("xrUnpersistSpatialAnchorCompleteBD", pfnUnpersistSpatialAnchorCompleteBD);
    populate_("xrShareSpatialAnchorAsyncBD", pfnShareSpatialAnchorAsyncBD);
    populate_("xrShareSpatialAnchorCompleteBD", pfnShareSpatialAnchorCompleteBD);
    populate_("xrDownloadSharedSpatialAnchorAsyncBD", pfnDownloadSharedSpatialAnchorAsyncBD);
    populate_("xrDownloadSharedSpatialAnchorCompleteBD", pfnDownloadSharedSpatialAnchorCompleteBD);
    populate_("xrCaptureSceneAsyncBD", pfnCaptureSceneAsyncBD);
    populate_("xrCaptureSceneCompleteBD", pfnCaptureSceneCompleteBD);
    populate_("xrCreatePlaneDetectorEXT", pfnCreatePlaneDetectorEXT);
    populate_("xrDestroyPlaneDetectorEXT", pfnDestroyPlaneDetectorEXT);
    populate_("xrBeginPlaneDetectionEXT", pfnBeginPlaneDetectionEXT);
    populate_("xrGetPlaneDetectionStateEXT", pfnGetPlaneDetectionStateEXT);
    populate_("xrGetPlaneDetectionsEXT", pfnGetPlaneDetectionsEXT);
    populate_("xrGetPlanePolygonBufferEXT", pfnGetPlanePolygonBufferEXT);
    populate_("xrPollFutureEXT", pfnPollFutureEXT);
    populate_("xrCancelFutureEXT", pfnCancelFutureEXT);
    populate_("xrEnableUserCalibrationEventsML", pfnEnableUserCalibrationEventsML);
    populate_("xrSetSystemNotificationsML", pfnSetSystemNotificationsML);
    populate_("xrCreateWorldMeshDetectorML", pfnCreateWorldMeshDetectorML);
    populate_("xrDestroyWorldMeshDetectorML", pfnDestroyWorldMeshDetectorML);
    populate_("xrRequestWorldMeshStateAsyncML", pfnRequestWorldMeshStateAsyncML);
    populate_("xrRequestWorldMeshStateCompleteML", pfnRequestWorldMeshStateCompleteML);
    populate_("xrGetWorldMeshBufferRecommendSizeML", pfnGetWorldMeshBufferRecommendSizeML);
    populate_("xrAllocateWorldMeshBufferML", pfnAllocateWorldMeshBufferML);
    populate_("xrFreeWorldMeshBufferML", pfnFreeWorldMeshBufferML);
    populate_("xrRequestWorldMeshAsyncML", pfnRequestWorldMeshAsyncML);
    populate_("xrRequestWorldMeshCompleteML", pfnRequestWorldMeshCompleteML);
    populate_("xrCreateFacialExpressionClientML", pfnCreateFacialExpressionClientML);
    populate_("xrDestroyFacialExpressionClientML", pfnDestroyFacialExpressionClientML);
    populate_("xrGetFacialExpressionBlendShapePropertiesML",
              pfnGetFacialExpressionBlendShapePropertiesML);
    populate_("xrResumeSimultaneousHandsAndControllersTrackingMETA",
              pfnResumeSimultaneousHandsAndControllersTrackingMETA);
    populate_("xrPauseSimultaneousHandsAndControllersTrackingMETA",
              pfnPauseSimultaneousHandsAndControllersTrackingMETA);
    populate_("xrStartColocationDiscoveryMETA", pfnStartColocationDiscoveryMETA);
    populate_("xrStopColocationDiscoveryMETA", pfnStopColocationDiscoveryMETA);
    populate_("xrStartColocationAdvertisementMETA", pfnStartColocationAdvertisementMETA);
    populate_("xrStopColocationAdvertisementMETA", pfnStopColocationAdvertisementMETA);
    populate_("xrEnumerateSpatialCapabilitiesEXT", pfnEnumerateSpatialCapabilitiesEXT);
    populate_("xrEnumerateSpatialCapabilityComponentTypesEXT",
              pfnEnumerateSpatialCapabilityComponentTypesEXT);
    populate_("xrEnumerateSpatialCapabilityFeaturesEXT", pfnEnumerateSpatialCapabilityFeaturesEXT);
    populate_("xrCreateSpatialContextAsyncEXT", pfnCreateSpatialContextAsyncEXT);
    populate_("xrCreateSpatialContextCompleteEXT", pfnCreateSpatialContextCompleteEXT);
    populate_("xrDestroySpatialContextEXT", pfnDestroySpatialContextEXT);
    populate_("xrCreateSpatialDiscoverySnapshotAsyncEXT",
              pfnCreateSpatialDiscoverySnapshotAsyncEXT);
    populate_("xrCreateSpatialDiscoverySnapshotCompleteEXT",
              pfnCreateSpatialDiscoverySnapshotCompleteEXT);
    populate_("xrQuerySpatialComponentDataEXT", pfnQuerySpatialComponentDataEXT);
    populate_("xrDestroySpatialSnapshotEXT", pfnDestroySpatialSnapshotEXT);
    populate_("xrCreateSpatialEntityFromIdEXT", pfnCreateSpatialEntityFromIdEXT);
    populate_("xrDestroySpatialEntityEXT", pfnDestroySpatialEntityEXT);
    populate_("xrCreateSpatialUpdateSnapshotEXT", pfnCreateSpatialUpdateSnapshotEXT);
    populate_("xrGetSpatialBufferStringEXT", pfnGetSpatialBufferStringEXT);
    populate_("xrGetSpatialBufferUint8EXT", pfnGetSpatialBufferUint8EXT);
    populate_("xrGetSpatialBufferUint16EXT", pfnGetSpatialBufferUint16EXT);
    populate_("xrGetSpatialBufferUint32EXT", pfnGetSpatialBufferUint32EXT);
    populate_("xrGetSpatialBufferFloatEXT", pfnGetSpatialBufferFloatEXT);
    populate_("xrGetSpatialBufferVector2fEXT", pfnGetSpatialBufferVector2fEXT);
    populate_("xrGetSpatialBufferVector3fEXT", pfnGetSpatialBufferVector3fEXT);
    populate_("xrCreateSpatialAnchorEXT", pfnCreateSpatialAnchorEXT);
    populate_("xrEnumerateSpatialPersistenceScopesEXT", pfnEnumerateSpatialPersistenceScopesEXT);
    populate_("xrCreateSpatialPersistenceContextAsyncEXT",
              pfnCreateSpatialPersistenceContextAsyncEXT);
    populate_("xrCreateSpatialPersistenceContextCompleteEXT",
              pfnCreateSpatialPersistenceContextCompleteEXT);
    populate_("xrDestroySpatialPersistenceContextEXT", pfnDestroySpatialPersistenceContextEXT);
    populate_("xrPersistSpatialEntityAsyncEXT", pfnPersistSpatialEntityAsyncEXT);
    populate_("xrPersistSpatialEntityCompleteEXT", pfnPersistSpatialEntityCompleteEXT);
    populate_("xrUnpersistSpatialEntityAsyncEXT", pfnUnpersistSpatialEntityAsyncEXT);
    populate_("xrUnpersistSpatialEntityCompleteEXT", pfnUnpersistSpatialEntityCompleteEXT);
  }

  /*!
   * @brief Fully populate a dispatch table given a non-null XrInstance and a getInstanceProcAddr.
   *
   * Can be called on an "empty" dispatch to make it "not empty".
   *
   * @see isEmpty
   */
  void populateFully(XrInstance instance, PFN_xrGetInstanceProcAddr getInstanceProcAddr) {
    m_instance = instance;
    pfnGetInstanceProcAddr = reinterpret_cast<PFN_xrVoidFunction>(getInstanceProcAddr);
    populateFully();
  }

  /*!
   * @brief If this dispatch is empty, it will need to be replaced/assigned before any functions
   * will work.
   */
  bool isEmpty() const noexcept { return nullptr == pfnGetInstanceProcAddr; }

  /*!
   * @name Entry points
   * @brief These populate the function pointer (if required and non-const), then cast it and call
   * it.
   *
   * We store everything as PFN_xrVoidFunction to allow us to have the same representation all over,
   * despite containing function pointers that might not be accessible without some platform
   * defines. Thus, only our accessor methods differ between different includes of this header, not
   * our data members.
   *
   * @{
   */

  //! @brief Call xrGetInstanceProcAddr, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetInstanceProcAddr(XrInstance instance, const char* name,
                                                   PFN_xrVoidFunction* function) {
    XrResult result = populate_("xrGetInstanceProcAddr", pfnGetInstanceProcAddr);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetInstanceProcAddr>(pfnGetInstanceProcAddr))(instance, name,
                                                                                 function);
  }

  //! @brief Call xrGetInstanceProcAddr (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetInstanceProcAddr(XrInstance instance, const char* name,
                                                   PFN_xrVoidFunction* function) const {
    return (reinterpret_cast<PFN_xrGetInstanceProcAddr>(pfnGetInstanceProcAddr))(instance, name,
                                                                                 function);
  }

  //! @brief Call xrEnumerateApiLayerProperties, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateApiLayerProperties(uint32_t propertyCapacityInput,
                                                           uint32_t* propertyCountOutput,
                                                           XrApiLayerProperties* properties) {
    XrResult result = populate_("xrEnumerateApiLayerProperties", pfnEnumerateApiLayerProperties);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateApiLayerProperties>(pfnEnumerateApiLayerProperties))(
        propertyCapacityInput, propertyCountOutput, properties);
  }

  //! @brief Call xrEnumerateApiLayerProperties (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateApiLayerProperties(uint32_t propertyCapacityInput,
                                                           uint32_t* propertyCountOutput,
                                                           XrApiLayerProperties* properties) const {
    return (reinterpret_cast<PFN_xrEnumerateApiLayerProperties>(pfnEnumerateApiLayerProperties))(
        propertyCapacityInput, propertyCountOutput, properties);
  }

  //! @brief Call xrEnumerateInstanceExtensionProperties, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateInstanceExtensionProperties(
      const char* layerName, uint32_t propertyCapacityInput, uint32_t* propertyCountOutput,
      XrExtensionProperties* properties) {
    XrResult result = populate_("xrEnumerateInstanceExtensionProperties",
                                pfnEnumerateInstanceExtensionProperties);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateInstanceExtensionProperties>(
        pfnEnumerateInstanceExtensionProperties))(layerName, propertyCapacityInput,
                                                  propertyCountOutput, properties);
  }

  //! @brief Call xrEnumerateInstanceExtensionProperties (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateInstanceExtensionProperties(
      const char* layerName, uint32_t propertyCapacityInput, uint32_t* propertyCountOutput,
      XrExtensionProperties* properties) const {
    return (reinterpret_cast<PFN_xrEnumerateInstanceExtensionProperties>(
        pfnEnumerateInstanceExtensionProperties))(layerName, propertyCapacityInput,
                                                  propertyCountOutput, properties);
  }

  //! @brief Call xrCreateInstance, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateInstance(const XrInstanceCreateInfo* createInfo,
                                              XrInstance* instance) {
    XrResult result = populate_("xrCreateInstance", pfnCreateInstance);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateInstance>(pfnCreateInstance))(createInfo, instance);
  }

  //! @brief Call xrCreateInstance (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateInstance(const XrInstanceCreateInfo* createInfo,
                                              XrInstance* instance) const {
    return (reinterpret_cast<PFN_xrCreateInstance>(pfnCreateInstance))(createInfo, instance);
  }

  //! @brief Call xrDestroyInstance, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyInstance(XrInstance instance) {
    XrResult result = populate_("xrDestroyInstance", pfnDestroyInstance);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyInstance>(pfnDestroyInstance))(instance);
  }

  //! @brief Call xrDestroyInstance (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyInstance(XrInstance instance) const {
    return (reinterpret_cast<PFN_xrDestroyInstance>(pfnDestroyInstance))(instance);
  }

  //! @brief Call xrGetInstanceProperties, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetInstanceProperties(XrInstance instance,
                                                     XrInstanceProperties* instanceProperties) {
    XrResult result = populate_("xrGetInstanceProperties", pfnGetInstanceProperties);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetInstanceProperties>(pfnGetInstanceProperties))(
        instance, instanceProperties);
  }

  //! @brief Call xrGetInstanceProperties (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetInstanceProperties(XrInstance instance, XrInstanceProperties* instanceProperties) const {
    return (reinterpret_cast<PFN_xrGetInstanceProperties>(pfnGetInstanceProperties))(
        instance, instanceProperties);
  }

  //! @brief Call xrPollEvent, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPollEvent(XrInstance instance, XrEventDataBuffer* eventData) {
    XrResult result = populate_("xrPollEvent", pfnPollEvent);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPollEvent>(pfnPollEvent))(instance, eventData);
  }

  //! @brief Call xrPollEvent (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPollEvent(XrInstance instance, XrEventDataBuffer* eventData) const {
    return (reinterpret_cast<PFN_xrPollEvent>(pfnPollEvent))(instance, eventData);
  }

  //! @brief Call xrResultToString, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrResultToString(XrInstance instance, XrResult value,
                                              char buffer[XR_MAX_RESULT_STRING_SIZE]) {
    XrResult result = populate_("xrResultToString", pfnResultToString);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrResultToString>(pfnResultToString))(instance, value, buffer);
  }

  //! @brief Call xrResultToString (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrResultToString(XrInstance instance, XrResult value,
                                              char buffer[XR_MAX_RESULT_STRING_SIZE]) const {
    return (reinterpret_cast<PFN_xrResultToString>(pfnResultToString))(instance, value, buffer);
  }

  //! @brief Call xrStructureTypeToString, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrStructureTypeToString(XrInstance instance, XrStructureType value,
                                                     char buffer[XR_MAX_STRUCTURE_NAME_SIZE]) {
    XrResult result = populate_("xrStructureTypeToString", pfnStructureTypeToString);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStructureTypeToString>(pfnStructureTypeToString))(instance,
                                                                                     value, buffer);
  }

  //! @brief Call xrStructureTypeToString (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrStructureTypeToString(
      XrInstance instance, XrStructureType value, char buffer[XR_MAX_STRUCTURE_NAME_SIZE]) const {
    return (reinterpret_cast<PFN_xrStructureTypeToString>(pfnStructureTypeToString))(instance,
                                                                                     value, buffer);
  }

  //! @brief Call xrGetSystem, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSystem(XrInstance instance, const XrSystemGetInfo* getInfo,
                                         XrSystemId* systemId) {
    XrResult result = populate_("xrGetSystem", pfnGetSystem);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSystem>(pfnGetSystem))(instance, getInfo, systemId);
  }

  //! @brief Call xrGetSystem (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSystem(XrInstance instance, const XrSystemGetInfo* getInfo,
                                         XrSystemId* systemId) const {
    return (reinterpret_cast<PFN_xrGetSystem>(pfnGetSystem))(instance, getInfo, systemId);
  }

  //! @brief Call xrGetSystemProperties, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSystemProperties(XrInstance instance, XrSystemId systemId,
                                                   XrSystemProperties* properties) {
    XrResult result = populate_("xrGetSystemProperties", pfnGetSystemProperties);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSystemProperties>(pfnGetSystemProperties))(instance, systemId,
                                                                                 properties);
  }

  //! @brief Call xrGetSystemProperties (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSystemProperties(XrInstance instance, XrSystemId systemId,
                                                   XrSystemProperties* properties) const {
    return (reinterpret_cast<PFN_xrGetSystemProperties>(pfnGetSystemProperties))(instance, systemId,
                                                                                 properties);
  }

  //! @brief Call xrEnumerateEnvironmentBlendModes, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateEnvironmentBlendModes(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t environmentBlendModeCapacityInput, uint32_t* environmentBlendModeCountOutput,
      XrEnvironmentBlendMode* environmentBlendModes) {
    XrResult result =
        populate_("xrEnumerateEnvironmentBlendModes", pfnEnumerateEnvironmentBlendModes);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateEnvironmentBlendModes>(pfnEnumerateEnvironmentBlendModes))(
        instance, systemId, viewConfigurationType, environmentBlendModeCapacityInput,
        environmentBlendModeCountOutput, environmentBlendModes);
  }

  //! @brief Call xrEnumerateEnvironmentBlendModes (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateEnvironmentBlendModes(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t environmentBlendModeCapacityInput, uint32_t* environmentBlendModeCountOutput,
      XrEnvironmentBlendMode* environmentBlendModes) const {
    return (
        reinterpret_cast<PFN_xrEnumerateEnvironmentBlendModes>(pfnEnumerateEnvironmentBlendModes))(
        instance, systemId, viewConfigurationType, environmentBlendModeCapacityInput,
        environmentBlendModeCountOutput, environmentBlendModes);
  }

  //! @brief Call xrCreateSession, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSession(XrInstance instance,
                                             const XrSessionCreateInfo* createInfo,
                                             XrSession* session) {
    XrResult result = populate_("xrCreateSession", pfnCreateSession);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSession>(pfnCreateSession))(instance, createInfo, session);
  }

  //! @brief Call xrCreateSession (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSession(XrInstance instance,
                                             const XrSessionCreateInfo* createInfo,
                                             XrSession* session) const {
    return (reinterpret_cast<PFN_xrCreateSession>(pfnCreateSession))(instance, createInfo, session);
  }

  //! @brief Call xrDestroySession, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySession(XrSession session) {
    XrResult result = populate_("xrDestroySession", pfnDestroySession);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySession>(pfnDestroySession))(session);
  }

  //! @brief Call xrDestroySession (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySession(XrSession session) const {
    return (reinterpret_cast<PFN_xrDestroySession>(pfnDestroySession))(session);
  }

  //! @brief Call xrEnumerateReferenceSpaces, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateReferenceSpaces(XrSession session,
                                                        uint32_t spaceCapacityInput,
                                                        uint32_t* spaceCountOutput,
                                                        XrReferenceSpaceType* spaces) {
    XrResult result = populate_("xrEnumerateReferenceSpaces", pfnEnumerateReferenceSpaces);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateReferenceSpaces>(pfnEnumerateReferenceSpaces))(
        session, spaceCapacityInput, spaceCountOutput, spaces);
  }

  //! @brief Call xrEnumerateReferenceSpaces (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateReferenceSpaces(XrSession session,
                                                        uint32_t spaceCapacityInput,
                                                        uint32_t* spaceCountOutput,
                                                        XrReferenceSpaceType* spaces) const {
    return (reinterpret_cast<PFN_xrEnumerateReferenceSpaces>(pfnEnumerateReferenceSpaces))(
        session, spaceCapacityInput, spaceCountOutput, spaces);
  }

  //! @brief Call xrCreateReferenceSpace, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateReferenceSpace(XrSession session,
                                                    const XrReferenceSpaceCreateInfo* createInfo,
                                                    XrSpace* space) {
    XrResult result = populate_("xrCreateReferenceSpace", pfnCreateReferenceSpace);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateReferenceSpace>(pfnCreateReferenceSpace))(
        session, createInfo, space);
  }

  //! @brief Call xrCreateReferenceSpace (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateReferenceSpace(XrSession session,
                                                    const XrReferenceSpaceCreateInfo* createInfo,
                                                    XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateReferenceSpace>(pfnCreateReferenceSpace))(
        session, createInfo, space);
  }

  //! @brief Call xrGetReferenceSpaceBoundsRect, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetReferenceSpaceBoundsRect(XrSession session,
                                                           XrReferenceSpaceType referenceSpaceType,
                                                           XrExtent2Df* bounds) {
    XrResult result = populate_("xrGetReferenceSpaceBoundsRect", pfnGetReferenceSpaceBoundsRect);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetReferenceSpaceBoundsRect>(pfnGetReferenceSpaceBoundsRect))(
        session, referenceSpaceType, bounds);
  }

  //! @brief Call xrGetReferenceSpaceBoundsRect (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetReferenceSpaceBoundsRect(XrSession session,
                                                           XrReferenceSpaceType referenceSpaceType,
                                                           XrExtent2Df* bounds) const {
    return (reinterpret_cast<PFN_xrGetReferenceSpaceBoundsRect>(pfnGetReferenceSpaceBoundsRect))(
        session, referenceSpaceType, bounds);
  }

  //! @brief Call xrCreateActionSpace, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateActionSpace(XrSession session,
                                                 const XrActionSpaceCreateInfo* createInfo,
                                                 XrSpace* space) {
    XrResult result = populate_("xrCreateActionSpace", pfnCreateActionSpace);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateActionSpace>(pfnCreateActionSpace))(session, createInfo,
                                                                             space);
  }

  //! @brief Call xrCreateActionSpace (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateActionSpace(XrSession session,
                                                 const XrActionSpaceCreateInfo* createInfo,
                                                 XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateActionSpace>(pfnCreateActionSpace))(session, createInfo,
                                                                             space);
  }

  //! @brief Call xrLocateSpace, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLocateSpace(XrSpace space, XrSpace baseSpace, XrTime time,
                                           XrSpaceLocation* location) {
    XrResult result = populate_("xrLocateSpace", pfnLocateSpace);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateSpace>(pfnLocateSpace))(space, baseSpace, time, location);
  }

  //! @brief Call xrLocateSpace (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLocateSpace(XrSpace space, XrSpace baseSpace, XrTime time,
                                           XrSpaceLocation* location) const {
    return (reinterpret_cast<PFN_xrLocateSpace>(pfnLocateSpace))(space, baseSpace, time, location);
  }

  //! @brief Call xrDestroySpace, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySpace(XrSpace space) {
    XrResult result = populate_("xrDestroySpace", pfnDestroySpace);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpace>(pfnDestroySpace))(space);
  }

  //! @brief Call xrDestroySpace (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySpace(XrSpace space) const {
    return (reinterpret_cast<PFN_xrDestroySpace>(pfnDestroySpace))(space);
  }

  //! @brief Call xrEnumerateViewConfigurations, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateViewConfigurations(
      XrInstance instance, XrSystemId systemId, uint32_t viewConfigurationTypeCapacityInput,
      uint32_t* viewConfigurationTypeCountOutput, XrViewConfigurationType* viewConfigurationTypes) {
    XrResult result = populate_("xrEnumerateViewConfigurations", pfnEnumerateViewConfigurations);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateViewConfigurations>(pfnEnumerateViewConfigurations))(
        instance, systemId, viewConfigurationTypeCapacityInput, viewConfigurationTypeCountOutput,
        viewConfigurationTypes);
  }

  //! @brief Call xrEnumerateViewConfigurations (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateViewConfigurations(
      XrInstance instance, XrSystemId systemId, uint32_t viewConfigurationTypeCapacityInput,
      uint32_t* viewConfigurationTypeCountOutput,
      XrViewConfigurationType* viewConfigurationTypes) const {
    return (reinterpret_cast<PFN_xrEnumerateViewConfigurations>(pfnEnumerateViewConfigurations))(
        instance, systemId, viewConfigurationTypeCapacityInput, viewConfigurationTypeCountOutput,
        viewConfigurationTypes);
  }

  //! @brief Call xrGetViewConfigurationProperties, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetViewConfigurationProperties(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      XrViewConfigurationProperties* configurationProperties) {
    XrResult result =
        populate_("xrGetViewConfigurationProperties", pfnGetViewConfigurationProperties);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrGetViewConfigurationProperties>(pfnGetViewConfigurationProperties))(
        instance, systemId, viewConfigurationType, configurationProperties);
  }

  //! @brief Call xrGetViewConfigurationProperties (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetViewConfigurationProperties(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      XrViewConfigurationProperties* configurationProperties) const {
    return (
        reinterpret_cast<PFN_xrGetViewConfigurationProperties>(pfnGetViewConfigurationProperties))(
        instance, systemId, viewConfigurationType, configurationProperties);
  }

  //! @brief Call xrEnumerateViewConfigurationViews, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateViewConfigurationViews(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t viewCapacityInput, uint32_t* viewCountOutput, XrViewConfigurationView* views) {
    XrResult result =
        populate_("xrEnumerateViewConfigurationViews", pfnEnumerateViewConfigurationViews);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateViewConfigurationViews>(
        pfnEnumerateViewConfigurationViews))(instance, systemId, viewConfigurationType,
                                             viewCapacityInput, viewCountOutput, views);
  }

  //! @brief Call xrEnumerateViewConfigurationViews (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateViewConfigurationViews(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t viewCapacityInput, uint32_t* viewCountOutput, XrViewConfigurationView* views) const {
    return (reinterpret_cast<PFN_xrEnumerateViewConfigurationViews>(
        pfnEnumerateViewConfigurationViews))(instance, systemId, viewConfigurationType,
                                             viewCapacityInput, viewCountOutput, views);
  }

  //! @brief Call xrEnumerateSwapchainFormats, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateSwapchainFormats(XrSession session,
                                                         uint32_t formatCapacityInput,
                                                         uint32_t* formatCountOutput,
                                                         int64_t* formats) {
    XrResult result = populate_("xrEnumerateSwapchainFormats", pfnEnumerateSwapchainFormats);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateSwapchainFormats>(pfnEnumerateSwapchainFormats))(
        session, formatCapacityInput, formatCountOutput, formats);
  }

  //! @brief Call xrEnumerateSwapchainFormats (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateSwapchainFormats(XrSession session,
                                                         uint32_t formatCapacityInput,
                                                         uint32_t* formatCountOutput,
                                                         int64_t* formats) const {
    return (reinterpret_cast<PFN_xrEnumerateSwapchainFormats>(pfnEnumerateSwapchainFormats))(
        session, formatCapacityInput, formatCountOutput, formats);
  }

  //! @brief Call xrCreateSwapchain, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSwapchain(XrSession session,
                                               const XrSwapchainCreateInfo* createInfo,
                                               XrSwapchain* swapchain) {
    XrResult result = populate_("xrCreateSwapchain", pfnCreateSwapchain);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSwapchain>(pfnCreateSwapchain))(session, createInfo,
                                                                         swapchain);
  }

  //! @brief Call xrCreateSwapchain (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSwapchain(XrSession session,
                                               const XrSwapchainCreateInfo* createInfo,
                                               XrSwapchain* swapchain) const {
    return (reinterpret_cast<PFN_xrCreateSwapchain>(pfnCreateSwapchain))(session, createInfo,
                                                                         swapchain);
  }

  //! @brief Call xrDestroySwapchain, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySwapchain(XrSwapchain swapchain) {
    XrResult result = populate_("xrDestroySwapchain", pfnDestroySwapchain);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySwapchain>(pfnDestroySwapchain))(swapchain);
  }

  //! @brief Call xrDestroySwapchain (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySwapchain(XrSwapchain swapchain) const {
    return (reinterpret_cast<PFN_xrDestroySwapchain>(pfnDestroySwapchain))(swapchain);
  }

  //! @brief Call xrEnumerateSwapchainImages, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateSwapchainImages(XrSwapchain swapchain,
                                                        uint32_t imageCapacityInput,
                                                        uint32_t* imageCountOutput,
                                                        XrSwapchainImageBaseHeader* images) {
    XrResult result = populate_("xrEnumerateSwapchainImages", pfnEnumerateSwapchainImages);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateSwapchainImages>(pfnEnumerateSwapchainImages))(
        swapchain, imageCapacityInput, imageCountOutput, images);
  }

  //! @brief Call xrEnumerateSwapchainImages (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateSwapchainImages(XrSwapchain swapchain,
                                                        uint32_t imageCapacityInput,
                                                        uint32_t* imageCountOutput,
                                                        XrSwapchainImageBaseHeader* images) const {
    return (reinterpret_cast<PFN_xrEnumerateSwapchainImages>(pfnEnumerateSwapchainImages))(
        swapchain, imageCapacityInput, imageCountOutput, images);
  }

  //! @brief Call xrAcquireSwapchainImage, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrAcquireSwapchainImage(XrSwapchain swapchain,
                                                     const XrSwapchainImageAcquireInfo* acquireInfo,
                                                     uint32_t* index) {
    XrResult result = populate_("xrAcquireSwapchainImage", pfnAcquireSwapchainImage);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrAcquireSwapchainImage>(pfnAcquireSwapchainImage))(
        swapchain, acquireInfo, index);
  }

  //! @brief Call xrAcquireSwapchainImage (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrAcquireSwapchainImage(XrSwapchain swapchain,
                                                     const XrSwapchainImageAcquireInfo* acquireInfo,
                                                     uint32_t* index) const {
    return (reinterpret_cast<PFN_xrAcquireSwapchainImage>(pfnAcquireSwapchainImage))(
        swapchain, acquireInfo, index);
  }

  //! @brief Call xrWaitSwapchainImage, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrWaitSwapchainImage(XrSwapchain swapchain,
                                                  const XrSwapchainImageWaitInfo* waitInfo) {
    XrResult result = populate_("xrWaitSwapchainImage", pfnWaitSwapchainImage);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrWaitSwapchainImage>(pfnWaitSwapchainImage))(swapchain, waitInfo);
  }

  //! @brief Call xrWaitSwapchainImage (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrWaitSwapchainImage(XrSwapchain swapchain,
                                                  const XrSwapchainImageWaitInfo* waitInfo) const {
    return (reinterpret_cast<PFN_xrWaitSwapchainImage>(pfnWaitSwapchainImage))(swapchain, waitInfo);
  }

  //! @brief Call xrReleaseSwapchainImage, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrReleaseSwapchainImage(XrSwapchain swapchain, const XrSwapchainImageReleaseInfo* releaseInfo) {
    XrResult result = populate_("xrReleaseSwapchainImage", pfnReleaseSwapchainImage);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrReleaseSwapchainImage>(pfnReleaseSwapchainImage))(swapchain,
                                                                                     releaseInfo);
  }

  //! @brief Call xrReleaseSwapchainImage (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrReleaseSwapchainImage(
      XrSwapchain swapchain, const XrSwapchainImageReleaseInfo* releaseInfo) const {
    return (reinterpret_cast<PFN_xrReleaseSwapchainImage>(pfnReleaseSwapchainImage))(swapchain,
                                                                                     releaseInfo);
  }

  //! @brief Call xrBeginSession, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrBeginSession(XrSession session,
                                            const XrSessionBeginInfo* beginInfo) {
    XrResult result = populate_("xrBeginSession", pfnBeginSession);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrBeginSession>(pfnBeginSession))(session, beginInfo);
  }

  //! @brief Call xrBeginSession (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrBeginSession(XrSession session,
                                            const XrSessionBeginInfo* beginInfo) const {
    return (reinterpret_cast<PFN_xrBeginSession>(pfnBeginSession))(session, beginInfo);
  }

  //! @brief Call xrEndSession, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEndSession(XrSession session) {
    XrResult result = populate_("xrEndSession", pfnEndSession);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEndSession>(pfnEndSession))(session);
  }

  //! @brief Call xrEndSession (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEndSession(XrSession session) const {
    return (reinterpret_cast<PFN_xrEndSession>(pfnEndSession))(session);
  }

  //! @brief Call xrRequestExitSession, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrRequestExitSession(XrSession session) {
    XrResult result = populate_("xrRequestExitSession", pfnRequestExitSession);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrRequestExitSession>(pfnRequestExitSession))(session);
  }

  //! @brief Call xrRequestExitSession (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrRequestExitSession(XrSession session) const {
    return (reinterpret_cast<PFN_xrRequestExitSession>(pfnRequestExitSession))(session);
  }

  //! @brief Call xrWaitFrame, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrWaitFrame(XrSession session, const XrFrameWaitInfo* frameWaitInfo,
                                         XrFrameState* frameState) {
    XrResult result = populate_("xrWaitFrame", pfnWaitFrame);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrWaitFrame>(pfnWaitFrame))(session, frameWaitInfo, frameState);
  }

  //! @brief Call xrWaitFrame (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrWaitFrame(XrSession session, const XrFrameWaitInfo* frameWaitInfo,
                                         XrFrameState* frameState) const {
    return (reinterpret_cast<PFN_xrWaitFrame>(pfnWaitFrame))(session, frameWaitInfo, frameState);
  }

  //! @brief Call xrBeginFrame, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrBeginFrame(XrSession session,
                                          const XrFrameBeginInfo* frameBeginInfo) {
    XrResult result = populate_("xrBeginFrame", pfnBeginFrame);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrBeginFrame>(pfnBeginFrame))(session, frameBeginInfo);
  }

  //! @brief Call xrBeginFrame (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrBeginFrame(XrSession session,
                                          const XrFrameBeginInfo* frameBeginInfo) const {
    return (reinterpret_cast<PFN_xrBeginFrame>(pfnBeginFrame))(session, frameBeginInfo);
  }

  //! @brief Call xrEndFrame, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEndFrame(XrSession session, const XrFrameEndInfo* frameEndInfo) {
    XrResult result = populate_("xrEndFrame", pfnEndFrame);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEndFrame>(pfnEndFrame))(session, frameEndInfo);
  }

  //! @brief Call xrEndFrame (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEndFrame(XrSession session,
                                        const XrFrameEndInfo* frameEndInfo) const {
    return (reinterpret_cast<PFN_xrEndFrame>(pfnEndFrame))(session, frameEndInfo);
  }

  //! @brief Call xrLocateViews, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLocateViews(XrSession session,
                                           const XrViewLocateInfo* viewLocateInfo,
                                           XrViewState* viewState, uint32_t viewCapacityInput,
                                           uint32_t* viewCountOutput, XrView* views) {
    XrResult result = populate_("xrLocateViews", pfnLocateViews);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateViews>(pfnLocateViews))(
        session, viewLocateInfo, viewState, viewCapacityInput, viewCountOutput, views);
  }

  //! @brief Call xrLocateViews (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLocateViews(XrSession session,
                                           const XrViewLocateInfo* viewLocateInfo,
                                           XrViewState* viewState, uint32_t viewCapacityInput,
                                           uint32_t* viewCountOutput, XrView* views) const {
    return (reinterpret_cast<PFN_xrLocateViews>(pfnLocateViews))(
        session, viewLocateInfo, viewState, viewCapacityInput, viewCountOutput, views);
  }

  //! @brief Call xrStringToPath, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrStringToPath(XrInstance instance, const char* pathString,
                                            XrPath* path) {
    XrResult result = populate_("xrStringToPath", pfnStringToPath);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStringToPath>(pfnStringToPath))(instance, pathString, path);
  }

  //! @brief Call xrStringToPath (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrStringToPath(XrInstance instance, const char* pathString,
                                            XrPath* path) const {
    return (reinterpret_cast<PFN_xrStringToPath>(pfnStringToPath))(instance, pathString, path);
  }

  //! @brief Call xrPathToString, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPathToString(XrInstance instance, XrPath path,
                                            uint32_t bufferCapacityInput,
                                            uint32_t* bufferCountOutput, char* buffer) {
    XrResult result = populate_("xrPathToString", pfnPathToString);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPathToString>(pfnPathToString))(
        instance, path, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrPathToString (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPathToString(XrInstance instance, XrPath path,
                                            uint32_t bufferCapacityInput,
                                            uint32_t* bufferCountOutput, char* buffer) const {
    return (reinterpret_cast<PFN_xrPathToString>(pfnPathToString))(
        instance, path, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrCreateActionSet, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateActionSet(XrInstance instance,
                                               const XrActionSetCreateInfo* createInfo,
                                               XrActionSet* actionSet) {
    XrResult result = populate_("xrCreateActionSet", pfnCreateActionSet);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateActionSet>(pfnCreateActionSet))(instance, createInfo,
                                                                         actionSet);
  }

  //! @brief Call xrCreateActionSet (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateActionSet(XrInstance instance,
                                               const XrActionSetCreateInfo* createInfo,
                                               XrActionSet* actionSet) const {
    return (reinterpret_cast<PFN_xrCreateActionSet>(pfnCreateActionSet))(instance, createInfo,
                                                                         actionSet);
  }

  //! @brief Call xrDestroyActionSet, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyActionSet(XrActionSet actionSet) {
    XrResult result = populate_("xrDestroyActionSet", pfnDestroyActionSet);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyActionSet>(pfnDestroyActionSet))(actionSet);
  }

  //! @brief Call xrDestroyActionSet (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyActionSet(XrActionSet actionSet) const {
    return (reinterpret_cast<PFN_xrDestroyActionSet>(pfnDestroyActionSet))(actionSet);
  }

  //! @brief Call xrCreateAction, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateAction(XrActionSet actionSet,
                                            const XrActionCreateInfo* createInfo,
                                            XrAction* action) {
    XrResult result = populate_("xrCreateAction", pfnCreateAction);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateAction>(pfnCreateAction))(actionSet, createInfo, action);
  }

  //! @brief Call xrCreateAction (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateAction(XrActionSet actionSet,
                                            const XrActionCreateInfo* createInfo,
                                            XrAction* action) const {
    return (reinterpret_cast<PFN_xrCreateAction>(pfnCreateAction))(actionSet, createInfo, action);
  }

  //! @brief Call xrDestroyAction, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyAction(XrAction action) {
    XrResult result = populate_("xrDestroyAction", pfnDestroyAction);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyAction>(pfnDestroyAction))(action);
  }

  //! @brief Call xrDestroyAction (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyAction(XrAction action) const {
    return (reinterpret_cast<PFN_xrDestroyAction>(pfnDestroyAction))(action);
  }

  //! @brief Call xrSuggestInteractionProfileBindings, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSuggestInteractionProfileBindings(
      XrInstance instance, const XrInteractionProfileSuggestedBinding* suggestedBindings) {
    XrResult result =
        populate_("xrSuggestInteractionProfileBindings", pfnSuggestInteractionProfileBindings);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSuggestInteractionProfileBindings>(
        pfnSuggestInteractionProfileBindings))(instance, suggestedBindings);
  }

  //! @brief Call xrSuggestInteractionProfileBindings (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSuggestInteractionProfileBindings(
      XrInstance instance, const XrInteractionProfileSuggestedBinding* suggestedBindings) const {
    return (reinterpret_cast<PFN_xrSuggestInteractionProfileBindings>(
        pfnSuggestInteractionProfileBindings))(instance, suggestedBindings);
  }

  //! @brief Call xrAttachSessionActionSets, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrAttachSessionActionSets(XrSession session, const XrSessionActionSetsAttachInfo* attachInfo) {
    XrResult result = populate_("xrAttachSessionActionSets", pfnAttachSessionActionSets);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrAttachSessionActionSets>(pfnAttachSessionActionSets))(
        session, attachInfo);
  }

  //! @brief Call xrAttachSessionActionSets (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrAttachSessionActionSets(
      XrSession session, const XrSessionActionSetsAttachInfo* attachInfo) const {
    return (reinterpret_cast<PFN_xrAttachSessionActionSets>(pfnAttachSessionActionSets))(
        session, attachInfo);
  }

  //! @brief Call xrGetCurrentInteractionProfile, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetCurrentInteractionProfile(
      XrSession session, XrPath topLevelUserPath, XrInteractionProfileState* interactionProfile) {
    XrResult result = populate_("xrGetCurrentInteractionProfile", pfnGetCurrentInteractionProfile);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetCurrentInteractionProfile>(pfnGetCurrentInteractionProfile))(
        session, topLevelUserPath, interactionProfile);
  }

  //! @brief Call xrGetCurrentInteractionProfile (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetCurrentInteractionProfile(XrSession session, XrPath topLevelUserPath,
                                 XrInteractionProfileState* interactionProfile) const {
    return (reinterpret_cast<PFN_xrGetCurrentInteractionProfile>(pfnGetCurrentInteractionProfile))(
        session, topLevelUserPath, interactionProfile);
  }

  //! @brief Call xrGetActionStateBoolean, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetActionStateBoolean(XrSession session,
                                                     const XrActionStateGetInfo* getInfo,
                                                     XrActionStateBoolean* state) {
    XrResult result = populate_("xrGetActionStateBoolean", pfnGetActionStateBoolean);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetActionStateBoolean>(pfnGetActionStateBoolean))(
        session, getInfo, state);
  }

  //! @brief Call xrGetActionStateBoolean (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetActionStateBoolean(XrSession session,
                                                     const XrActionStateGetInfo* getInfo,
                                                     XrActionStateBoolean* state) const {
    return (reinterpret_cast<PFN_xrGetActionStateBoolean>(pfnGetActionStateBoolean))(
        session, getInfo, state);
  }

  //! @brief Call xrGetActionStateFloat, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetActionStateFloat(XrSession session,
                                                   const XrActionStateGetInfo* getInfo,
                                                   XrActionStateFloat* state) {
    XrResult result = populate_("xrGetActionStateFloat", pfnGetActionStateFloat);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetActionStateFloat>(pfnGetActionStateFloat))(session, getInfo,
                                                                                 state);
  }

  //! @brief Call xrGetActionStateFloat (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetActionStateFloat(XrSession session,
                                                   const XrActionStateGetInfo* getInfo,
                                                   XrActionStateFloat* state) const {
    return (reinterpret_cast<PFN_xrGetActionStateFloat>(pfnGetActionStateFloat))(session, getInfo,
                                                                                 state);
  }

  //! @brief Call xrGetActionStateVector2f, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetActionStateVector2f(XrSession session,
                                                      const XrActionStateGetInfo* getInfo,
                                                      XrActionStateVector2f* state) {
    XrResult result = populate_("xrGetActionStateVector2f", pfnGetActionStateVector2f);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetActionStateVector2f>(pfnGetActionStateVector2f))(
        session, getInfo, state);
  }

  //! @brief Call xrGetActionStateVector2f (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetActionStateVector2f(XrSession session,
                                                      const XrActionStateGetInfo* getInfo,
                                                      XrActionStateVector2f* state) const {
    return (reinterpret_cast<PFN_xrGetActionStateVector2f>(pfnGetActionStateVector2f))(
        session, getInfo, state);
  }

  //! @brief Call xrGetActionStatePose, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetActionStatePose(XrSession session,
                                                  const XrActionStateGetInfo* getInfo,
                                                  XrActionStatePose* state) {
    XrResult result = populate_("xrGetActionStatePose", pfnGetActionStatePose);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetActionStatePose>(pfnGetActionStatePose))(session, getInfo,
                                                                               state);
  }

  //! @brief Call xrGetActionStatePose (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetActionStatePose(XrSession session,
                                                  const XrActionStateGetInfo* getInfo,
                                                  XrActionStatePose* state) const {
    return (reinterpret_cast<PFN_xrGetActionStatePose>(pfnGetActionStatePose))(session, getInfo,
                                                                               state);
  }

  //! @brief Call xrSyncActions, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSyncActions(XrSession session, const XrActionsSyncInfo* syncInfo) {
    XrResult result = populate_("xrSyncActions", pfnSyncActions);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSyncActions>(pfnSyncActions))(session, syncInfo);
  }

  //! @brief Call xrSyncActions (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSyncActions(XrSession session,
                                           const XrActionsSyncInfo* syncInfo) const {
    return (reinterpret_cast<PFN_xrSyncActions>(pfnSyncActions))(session, syncInfo);
  }

  //! @brief Call xrEnumerateBoundSourcesForAction, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateBoundSourcesForAction(
      XrSession session, const XrBoundSourcesForActionEnumerateInfo* enumerateInfo,
      uint32_t sourceCapacityInput, uint32_t* sourceCountOutput, XrPath* sources) {
    XrResult result =
        populate_("xrEnumerateBoundSourcesForAction", pfnEnumerateBoundSourcesForAction);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateBoundSourcesForAction>(pfnEnumerateBoundSourcesForAction))(
        session, enumerateInfo, sourceCapacityInput, sourceCountOutput, sources);
  }

  //! @brief Call xrEnumerateBoundSourcesForAction (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateBoundSourcesForAction(
      XrSession session, const XrBoundSourcesForActionEnumerateInfo* enumerateInfo,
      uint32_t sourceCapacityInput, uint32_t* sourceCountOutput, XrPath* sources) const {
    return (
        reinterpret_cast<PFN_xrEnumerateBoundSourcesForAction>(pfnEnumerateBoundSourcesForAction))(
        session, enumerateInfo, sourceCapacityInput, sourceCountOutput, sources);
  }

  //! @brief Call xrGetInputSourceLocalizedName, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetInputSourceLocalizedName(
      XrSession session, const XrInputSourceLocalizedNameGetInfo* getInfo,
      uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) {
    XrResult result = populate_("xrGetInputSourceLocalizedName", pfnGetInputSourceLocalizedName);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetInputSourceLocalizedName>(pfnGetInputSourceLocalizedName))(
        session, getInfo, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetInputSourceLocalizedName (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetInputSourceLocalizedName(
      XrSession session, const XrInputSourceLocalizedNameGetInfo* getInfo,
      uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer) const {
    return (reinterpret_cast<PFN_xrGetInputSourceLocalizedName>(pfnGetInputSourceLocalizedName))(
        session, getInfo, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrApplyHapticFeedback, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrApplyHapticFeedback(XrSession session,
                                                   const XrHapticActionInfo* hapticActionInfo,
                                                   const XrHapticBaseHeader* hapticFeedback) {
    XrResult result = populate_("xrApplyHapticFeedback", pfnApplyHapticFeedback);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrApplyHapticFeedback>(pfnApplyHapticFeedback))(
        session, hapticActionInfo, hapticFeedback);
  }

  //! @brief Call xrApplyHapticFeedback (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrApplyHapticFeedback(XrSession session,
                                                   const XrHapticActionInfo* hapticActionInfo,
                                                   const XrHapticBaseHeader* hapticFeedback) const {
    return (reinterpret_cast<PFN_xrApplyHapticFeedback>(pfnApplyHapticFeedback))(
        session, hapticActionInfo, hapticFeedback);
  }

  //! @brief Call xrStopHapticFeedback, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrStopHapticFeedback(XrSession session,
                                                  const XrHapticActionInfo* hapticActionInfo) {
    XrResult result = populate_("xrStopHapticFeedback", pfnStopHapticFeedback);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStopHapticFeedback>(pfnStopHapticFeedback))(session,
                                                                               hapticActionInfo);
  }

  //! @brief Call xrStopHapticFeedback (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrStopHapticFeedback(XrSession session, const XrHapticActionInfo* hapticActionInfo) const {
    return (reinterpret_cast<PFN_xrStopHapticFeedback>(pfnStopHapticFeedback))(session,
                                                                               hapticActionInfo);
  }

#ifdef XR_LOADER_VERSION_1_0
  //! @brief Call xrCreateApiLayerInstance, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateApiLayerInstance(const XrInstanceCreateInfo* info,
                                                      const XrApiLayerCreateInfo* layerInfo,
                                                      XrInstance* instance) {
    XrResult result = populate_("xrCreateApiLayerInstance", pfnCreateApiLayerInstance);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateApiLayerInstance>(pfnCreateApiLayerInstance))(
        info, layerInfo, instance);
  }

  //! @brief Call xrCreateApiLayerInstance (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateApiLayerInstance(const XrInstanceCreateInfo* info,
                                                      const XrApiLayerCreateInfo* layerInfo,
                                                      XrInstance* instance) const {
    return (reinterpret_cast<PFN_xrCreateApiLayerInstance>(pfnCreateApiLayerInstance))(
        info, layerInfo, instance);
  }
#endif  // XR_LOADER_VERSION_1_0
#ifdef XR_LOADER_VERSION_1_0
  //! @brief Call xrNegotiateLoaderRuntimeInterface, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrNegotiateLoaderRuntimeInterface(
      const XrNegotiateLoaderInfo* loaderInfo, XrNegotiateRuntimeRequest* runtimeRequest) {
    XrResult result =
        populate_("xrNegotiateLoaderRuntimeInterface", pfnNegotiateLoaderRuntimeInterface);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrNegotiateLoaderRuntimeInterface>(
        pfnNegotiateLoaderRuntimeInterface))(loaderInfo, runtimeRequest);
  }

  //! @brief Call xrNegotiateLoaderRuntimeInterface (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrNegotiateLoaderRuntimeInterface(
      const XrNegotiateLoaderInfo* loaderInfo, XrNegotiateRuntimeRequest* runtimeRequest) const {
    return (reinterpret_cast<PFN_xrNegotiateLoaderRuntimeInterface>(
        pfnNegotiateLoaderRuntimeInterface))(loaderInfo, runtimeRequest);
  }
#endif  // XR_LOADER_VERSION_1_0
#ifdef XR_LOADER_VERSION_1_0
  //! @brief Call xrNegotiateLoaderApiLayerInterface, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrNegotiateLoaderApiLayerInterface(const XrNegotiateLoaderInfo* loaderInfo, const char* layerName,
                                     XrNegotiateApiLayerRequest* apiLayerRequest) {
    XrResult result =
        populate_("xrNegotiateLoaderApiLayerInterface", pfnNegotiateLoaderApiLayerInterface);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrNegotiateLoaderApiLayerInterface>(
        pfnNegotiateLoaderApiLayerInterface))(loaderInfo, layerName, apiLayerRequest);
  }

  //! @brief Call xrNegotiateLoaderApiLayerInterface (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrNegotiateLoaderApiLayerInterface(const XrNegotiateLoaderInfo* loaderInfo, const char* layerName,
                                     XrNegotiateApiLayerRequest* apiLayerRequest) const {
    return (reinterpret_cast<PFN_xrNegotiateLoaderApiLayerInterface>(
        pfnNegotiateLoaderApiLayerInterface))(loaderInfo, layerName, apiLayerRequest);
  }
#endif  // XR_LOADER_VERSION_1_0

  //! @brief Call xrLocateSpaces, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLocateSpaces(XrSession session, const XrSpacesLocateInfo* locateInfo,
                                            XrSpaceLocations* spaceLocations) {
    XrResult result = populate_("xrLocateSpaces", pfnLocateSpaces);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateSpaces>(pfnLocateSpaces))(session, locateInfo,
                                                                   spaceLocations);
  }

  //! @brief Call xrLocateSpaces (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLocateSpaces(XrSession session, const XrSpacesLocateInfo* locateInfo,
                                            XrSpaceLocations* spaceLocations) const {
    return (reinterpret_cast<PFN_xrLocateSpaces>(pfnLocateSpaces))(session, locateInfo,
                                                                   spaceLocations);
  }

#ifdef XR_KHR_android_thread_settings
#if defined(XR_USE_PLATFORM_ANDROID)
  //! @brief Call xrSetAndroidApplicationThreadKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetAndroidApplicationThreadKHR(XrSession session,
                                                              XrAndroidThreadTypeKHR threadType,
                                                              uint32_t threadId) {
    XrResult result =
        populate_("xrSetAndroidApplicationThreadKHR", pfnSetAndroidApplicationThreadKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetAndroidApplicationThreadKHR>(
        pfnSetAndroidApplicationThreadKHR))(session, threadType, threadId);
  }

  //! @brief Call xrSetAndroidApplicationThreadKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetAndroidApplicationThreadKHR(XrSession session,
                                                              XrAndroidThreadTypeKHR threadType,
                                                              uint32_t threadId) const {
    return (reinterpret_cast<PFN_xrSetAndroidApplicationThreadKHR>(
        pfnSetAndroidApplicationThreadKHR))(session, threadType, threadId);
  }
#endif  // defined(XR_USE_PLATFORM_ANDROID)
#endif  // XR_KHR_android_thread_settings
#ifdef XR_KHR_android_surface_swapchain
#if defined(XR_USE_PLATFORM_ANDROID)
  //! @brief Call xrCreateSwapchainAndroidSurfaceKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSwapchainAndroidSurfaceKHR(XrSession session,
                                                                const XrSwapchainCreateInfo* info,
                                                                XrSwapchain* swapchain,
                                                                jobject* surface) {
    XrResult result =
        populate_("xrCreateSwapchainAndroidSurfaceKHR", pfnCreateSwapchainAndroidSurfaceKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSwapchainAndroidSurfaceKHR>(
        pfnCreateSwapchainAndroidSurfaceKHR))(session, info, swapchain, surface);
  }

  //! @brief Call xrCreateSwapchainAndroidSurfaceKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSwapchainAndroidSurfaceKHR(XrSession session,
                                                                const XrSwapchainCreateInfo* info,
                                                                XrSwapchain* swapchain,
                                                                jobject* surface) const {
    return (reinterpret_cast<PFN_xrCreateSwapchainAndroidSurfaceKHR>(
        pfnCreateSwapchainAndroidSurfaceKHR))(session, info, swapchain, surface);
  }
#endif  // defined(XR_USE_PLATFORM_ANDROID)
#endif  // XR_KHR_android_surface_swapchain
#ifdef XR_KHR_opengl_enable
#if defined(XR_USE_GRAPHICS_API_OPENGL)
  //! @brief Call xrGetOpenGLGraphicsRequirementsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetOpenGLGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                     XrGraphicsRequirementsOpenGLKHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetOpenGLGraphicsRequirementsKHR", pfnGetOpenGLGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetOpenGLGraphicsRequirementsKHR>(
        pfnGetOpenGLGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetOpenGLGraphicsRequirementsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetOpenGLGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                     XrGraphicsRequirementsOpenGLKHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetOpenGLGraphicsRequirementsKHR>(
        pfnGetOpenGLGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_OPENGL)
#endif  // XR_KHR_opengl_enable
#ifdef XR_KHR_opengl_es_enable
#if defined(XR_USE_GRAPHICS_API_OPENGL_ES)
  //! @brief Call xrGetOpenGLESGraphicsRequirementsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetOpenGLESGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                       XrGraphicsRequirementsOpenGLESKHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetOpenGLESGraphicsRequirementsKHR", pfnGetOpenGLESGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetOpenGLESGraphicsRequirementsKHR>(
        pfnGetOpenGLESGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetOpenGLESGraphicsRequirementsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetOpenGLESGraphicsRequirementsKHR(
      XrInstance instance, XrSystemId systemId,
      XrGraphicsRequirementsOpenGLESKHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetOpenGLESGraphicsRequirementsKHR>(
        pfnGetOpenGLESGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_OPENGL_ES)
#endif  // XR_KHR_opengl_es_enable
#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrGetVulkanInstanceExtensionsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetVulkanInstanceExtensionsKHR(XrInstance instance,
                                                              XrSystemId systemId,
                                                              uint32_t bufferCapacityInput,
                                                              uint32_t* bufferCountOutput,
                                                              char* buffer) {
    XrResult result =
        populate_("xrGetVulkanInstanceExtensionsKHR", pfnGetVulkanInstanceExtensionsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrGetVulkanInstanceExtensionsKHR>(pfnGetVulkanInstanceExtensionsKHR))(
        instance, systemId, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetVulkanInstanceExtensionsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetVulkanInstanceExtensionsKHR(XrInstance instance,
                                                              XrSystemId systemId,
                                                              uint32_t bufferCapacityInput,
                                                              uint32_t* bufferCountOutput,
                                                              char* buffer) const {
    return (
        reinterpret_cast<PFN_xrGetVulkanInstanceExtensionsKHR>(pfnGetVulkanInstanceExtensionsKHR))(
        instance, systemId, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable
#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrGetVulkanDeviceExtensionsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetVulkanDeviceExtensionsKHR(XrInstance instance,
                                                            XrSystemId systemId,
                                                            uint32_t bufferCapacityInput,
                                                            uint32_t* bufferCountOutput,
                                                            char* buffer) {
    XrResult result = populate_("xrGetVulkanDeviceExtensionsKHR", pfnGetVulkanDeviceExtensionsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVulkanDeviceExtensionsKHR>(pfnGetVulkanDeviceExtensionsKHR))(
        instance, systemId, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetVulkanDeviceExtensionsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetVulkanDeviceExtensionsKHR(XrInstance instance,
                                                            XrSystemId systemId,
                                                            uint32_t bufferCapacityInput,
                                                            uint32_t* bufferCountOutput,
                                                            char* buffer) const {
    return (reinterpret_cast<PFN_xrGetVulkanDeviceExtensionsKHR>(pfnGetVulkanDeviceExtensionsKHR))(
        instance, systemId, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable
#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrGetVulkanGraphicsDeviceKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetVulkanGraphicsDeviceKHR(XrInstance instance, XrSystemId systemId,
                                                          VkInstance vkInstance,
                                                          VkPhysicalDevice* vkPhysicalDevice) {
    XrResult result = populate_("xrGetVulkanGraphicsDeviceKHR", pfnGetVulkanGraphicsDeviceKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDeviceKHR>(pfnGetVulkanGraphicsDeviceKHR))(
        instance, systemId, vkInstance, vkPhysicalDevice);
  }

  //! @brief Call xrGetVulkanGraphicsDeviceKHR (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetVulkanGraphicsDeviceKHR(XrInstance instance, XrSystemId systemId, VkInstance vkInstance,
                               VkPhysicalDevice* vkPhysicalDevice) const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDeviceKHR>(pfnGetVulkanGraphicsDeviceKHR))(
        instance, systemId, vkInstance, vkPhysicalDevice);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable
#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrGetVulkanGraphicsRequirementsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetVulkanGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                     XrGraphicsRequirementsVulkanKHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetVulkanGraphicsRequirementsKHR", pfnGetVulkanGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirementsKHR>(
        pfnGetVulkanGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetVulkanGraphicsRequirementsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetVulkanGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                     XrGraphicsRequirementsVulkanKHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirementsKHR>(
        pfnGetVulkanGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable
#ifdef XR_KHR_D3D11_enable
#if defined(XR_USE_GRAPHICS_API_D3D11)
  //! @brief Call xrGetD3D11GraphicsRequirementsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetD3D11GraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                    XrGraphicsRequirementsD3D11KHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetD3D11GraphicsRequirementsKHR", pfnGetD3D11GraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetD3D11GraphicsRequirementsKHR>(
        pfnGetD3D11GraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetD3D11GraphicsRequirementsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetD3D11GraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                    XrGraphicsRequirementsD3D11KHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetD3D11GraphicsRequirementsKHR>(
        pfnGetD3D11GraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_D3D11)
#endif  // XR_KHR_D3D11_enable
#ifdef XR_KHR_D3D12_enable
#if defined(XR_USE_GRAPHICS_API_D3D12)
  //! @brief Call xrGetD3D12GraphicsRequirementsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetD3D12GraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                    XrGraphicsRequirementsD3D12KHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetD3D12GraphicsRequirementsKHR", pfnGetD3D12GraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetD3D12GraphicsRequirementsKHR>(
        pfnGetD3D12GraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetD3D12GraphicsRequirementsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetD3D12GraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                    XrGraphicsRequirementsD3D12KHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetD3D12GraphicsRequirementsKHR>(
        pfnGetD3D12GraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_D3D12)
#endif  // XR_KHR_D3D12_enable
#ifdef XR_KHR_metal_enable
#if defined(XR_USE_GRAPHICS_API_METAL)
  //! @brief Call xrGetMetalGraphicsRequirementsKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetMetalGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                    XrGraphicsRequirementsMetalKHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetMetalGraphicsRequirementsKHR", pfnGetMetalGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetMetalGraphicsRequirementsKHR>(
        pfnGetMetalGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetMetalGraphicsRequirementsKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetMetalGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId,
                                    XrGraphicsRequirementsMetalKHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetMetalGraphicsRequirementsKHR>(
        pfnGetMetalGraphicsRequirementsKHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_METAL)
#endif  // XR_KHR_metal_enable
#ifdef XR_KHR_visibility_mask
  //! @brief Call xrGetVisibilityMaskKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetVisibilityMaskKHR(XrSession session,
                                                    XrViewConfigurationType viewConfigurationType,
                                                    uint32_t viewIndex,
                                                    XrVisibilityMaskTypeKHR visibilityMaskType,
                                                    XrVisibilityMaskKHR* visibilityMask) {
    XrResult result = populate_("xrGetVisibilityMaskKHR", pfnGetVisibilityMaskKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVisibilityMaskKHR>(pfnGetVisibilityMaskKHR))(
        session, viewConfigurationType, viewIndex, visibilityMaskType, visibilityMask);
  }

  //! @brief Call xrGetVisibilityMaskKHR (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetVisibilityMaskKHR(XrSession session,
                                                    XrViewConfigurationType viewConfigurationType,
                                                    uint32_t viewIndex,
                                                    XrVisibilityMaskTypeKHR visibilityMaskType,
                                                    XrVisibilityMaskKHR* visibilityMask) const {
    return (reinterpret_cast<PFN_xrGetVisibilityMaskKHR>(pfnGetVisibilityMaskKHR))(
        session, viewConfigurationType, viewIndex, visibilityMaskType, visibilityMask);
  }
#endif  // XR_KHR_visibility_mask
#ifdef XR_KHR_win32_convert_performance_counter_time
#if defined(XR_USE_PLATFORM_WIN32)
  //! @brief Call xrConvertWin32PerformanceCounterToTimeKHR, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrConvertWin32PerformanceCounterToTimeKHR(
      XrInstance instance, const LARGE_INTEGER* performanceCounter, XrTime* time) {
    XrResult result = populate_("xrConvertWin32PerformanceCounterToTimeKHR",
                                pfnConvertWin32PerformanceCounterToTimeKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrConvertWin32PerformanceCounterToTimeKHR>(
        pfnConvertWin32PerformanceCounterToTimeKHR))(instance, performanceCounter, time);
  }

  //! @brief Call xrConvertWin32PerformanceCounterToTimeKHR (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrConvertWin32PerformanceCounterToTimeKHR(
      XrInstance instance, const LARGE_INTEGER* performanceCounter, XrTime* time) const {
    return (reinterpret_cast<PFN_xrConvertWin32PerformanceCounterToTimeKHR>(
        pfnConvertWin32PerformanceCounterToTimeKHR))(instance, performanceCounter, time);
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_KHR_win32_convert_performance_counter_time
#ifdef XR_KHR_win32_convert_performance_counter_time
#if defined(XR_USE_PLATFORM_WIN32)
  //! @brief Call xrConvertTimeToWin32PerformanceCounterKHR, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrConvertTimeToWin32PerformanceCounterKHR(
      XrInstance instance, XrTime time, LARGE_INTEGER* performanceCounter) {
    XrResult result = populate_("xrConvertTimeToWin32PerformanceCounterKHR",
                                pfnConvertTimeToWin32PerformanceCounterKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrConvertTimeToWin32PerformanceCounterKHR>(
        pfnConvertTimeToWin32PerformanceCounterKHR))(instance, time, performanceCounter);
  }

  //! @brief Call xrConvertTimeToWin32PerformanceCounterKHR (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrConvertTimeToWin32PerformanceCounterKHR(
      XrInstance instance, XrTime time, LARGE_INTEGER* performanceCounter) const {
    return (reinterpret_cast<PFN_xrConvertTimeToWin32PerformanceCounterKHR>(
        pfnConvertTimeToWin32PerformanceCounterKHR))(instance, time, performanceCounter);
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_KHR_win32_convert_performance_counter_time
#ifdef XR_KHR_convert_timespec_time
#if defined(XR_USE_TIMESPEC)
  //! @brief Call xrConvertTimespecTimeToTimeKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrConvertTimespecTimeToTimeKHR(XrInstance instance,
                                                            const struct timespec* timespecTime,
                                                            XrTime* time) {
    XrResult result = populate_("xrConvertTimespecTimeToTimeKHR", pfnConvertTimespecTimeToTimeKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrConvertTimespecTimeToTimeKHR>(pfnConvertTimespecTimeToTimeKHR))(
        instance, timespecTime, time);
  }

  //! @brief Call xrConvertTimespecTimeToTimeKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrConvertTimespecTimeToTimeKHR(XrInstance instance,
                                                            const struct timespec* timespecTime,
                                                            XrTime* time) const {
    return (reinterpret_cast<PFN_xrConvertTimespecTimeToTimeKHR>(pfnConvertTimespecTimeToTimeKHR))(
        instance, timespecTime, time);
  }
#endif  // defined(XR_USE_TIMESPEC)
#endif  // XR_KHR_convert_timespec_time
#ifdef XR_KHR_convert_timespec_time
#if defined(XR_USE_TIMESPEC)
  //! @brief Call xrConvertTimeToTimespecTimeKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrConvertTimeToTimespecTimeKHR(XrInstance instance, XrTime time,
                                                            struct timespec* timespecTime) {
    XrResult result = populate_("xrConvertTimeToTimespecTimeKHR", pfnConvertTimeToTimespecTimeKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrConvertTimeToTimespecTimeKHR>(pfnConvertTimeToTimespecTimeKHR))(
        instance, time, timespecTime);
  }

  //! @brief Call xrConvertTimeToTimespecTimeKHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrConvertTimeToTimespecTimeKHR(XrInstance instance, XrTime time,
                                                            struct timespec* timespecTime) const {
    return (reinterpret_cast<PFN_xrConvertTimeToTimespecTimeKHR>(pfnConvertTimeToTimespecTimeKHR))(
        instance, time, timespecTime);
  }
#endif  // defined(XR_USE_TIMESPEC)
#endif  // XR_KHR_convert_timespec_time
#ifdef XR_KHR_loader_init
  //! @brief Call xrInitializeLoaderKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrInitializeLoaderKHR(const XrLoaderInitInfoBaseHeaderKHR* loaderInitInfo) {
    XrResult result = populate_("xrInitializeLoaderKHR", pfnInitializeLoaderKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrInitializeLoaderKHR>(pfnInitializeLoaderKHR))(loaderInitInfo);
  }

  //! @brief Call xrInitializeLoaderKHR (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrInitializeLoaderKHR(const XrLoaderInitInfoBaseHeaderKHR* loaderInitInfo) const {
    return (reinterpret_cast<PFN_xrInitializeLoaderKHR>(pfnInitializeLoaderKHR))(loaderInitInfo);
  }
#endif  // XR_KHR_loader_init
#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrCreateVulkanInstanceKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateVulkanInstanceKHR(XrInstance instance, const XrVulkanInstanceCreateInfoKHR* createInfo,
                            VkInstance* vulkanInstance, VkResult* vulkanResult) {
    XrResult result = populate_("xrCreateVulkanInstanceKHR", pfnCreateVulkanInstanceKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateVulkanInstanceKHR>(pfnCreateVulkanInstanceKHR))(
        instance, createInfo, vulkanInstance, vulkanResult);
  }

  //! @brief Call xrCreateVulkanInstanceKHR (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateVulkanInstanceKHR(XrInstance instance, const XrVulkanInstanceCreateInfoKHR* createInfo,
                            VkInstance* vulkanInstance, VkResult* vulkanResult) const {
    return (reinterpret_cast<PFN_xrCreateVulkanInstanceKHR>(pfnCreateVulkanInstanceKHR))(
        instance, createInfo, vulkanInstance, vulkanResult);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2
#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrCreateVulkanDeviceKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateVulkanDeviceKHR(XrInstance instance,
                                                     const XrVulkanDeviceCreateInfoKHR* createInfo,
                                                     VkDevice* vulkanDevice,
                                                     VkResult* vulkanResult) {
    XrResult result = populate_("xrCreateVulkanDeviceKHR", pfnCreateVulkanDeviceKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateVulkanDeviceKHR>(pfnCreateVulkanDeviceKHR))(
        instance, createInfo, vulkanDevice, vulkanResult);
  }

  //! @brief Call xrCreateVulkanDeviceKHR (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateVulkanDeviceKHR(XrInstance instance,
                                                     const XrVulkanDeviceCreateInfoKHR* createInfo,
                                                     VkDevice* vulkanDevice,
                                                     VkResult* vulkanResult) const {
    return (reinterpret_cast<PFN_xrCreateVulkanDeviceKHR>(pfnCreateVulkanDeviceKHR))(
        instance, createInfo, vulkanDevice, vulkanResult);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2
#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrGetVulkanGraphicsDevice2KHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetVulkanGraphicsDevice2KHR(
      XrInstance instance, const XrVulkanGraphicsDeviceGetInfoKHR* getInfo,
      VkPhysicalDevice* vulkanPhysicalDevice) {
    XrResult result = populate_("xrGetVulkanGraphicsDevice2KHR", pfnGetVulkanGraphicsDevice2KHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDevice2KHR>(pfnGetVulkanGraphicsDevice2KHR))(
        instance, getInfo, vulkanPhysicalDevice);
  }

  //! @brief Call xrGetVulkanGraphicsDevice2KHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetVulkanGraphicsDevice2KHR(
      XrInstance instance, const XrVulkanGraphicsDeviceGetInfoKHR* getInfo,
      VkPhysicalDevice* vulkanPhysicalDevice) const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDevice2KHR>(pfnGetVulkanGraphicsDevice2KHR))(
        instance, getInfo, vulkanPhysicalDevice);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2
#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  //! @brief Call xrGetVulkanGraphicsRequirements2KHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetVulkanGraphicsRequirements2KHR(XrInstance instance, XrSystemId systemId,
                                      XrGraphicsRequirementsVulkanKHR* graphicsRequirements) {
    XrResult result =
        populate_("xrGetVulkanGraphicsRequirements2KHR", pfnGetVulkanGraphicsRequirements2KHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirements2KHR>(
        pfnGetVulkanGraphicsRequirements2KHR))(instance, systemId, graphicsRequirements);
  }

  //! @brief Call xrGetVulkanGraphicsRequirements2KHR (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetVulkanGraphicsRequirements2KHR(XrInstance instance, XrSystemId systemId,
                                      XrGraphicsRequirementsVulkanKHR* graphicsRequirements) const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirements2KHR>(
        pfnGetVulkanGraphicsRequirements2KHR))(instance, systemId, graphicsRequirements);
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2
#ifdef XR_KHR_extended_struct_name_lengths
  //! @brief Call xrStructureTypeToString2KHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrStructureTypeToString2KHR(XrInstance instance, XrStructureType value,
                              char buffer[XR_MAX_STRUCTURE_NAME_SIZE_EXTENDED_KHR]) {
    XrResult result = populate_("xrStructureTypeToString2KHR", pfnStructureTypeToString2KHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStructureTypeToString2KHR>(pfnStructureTypeToString2KHR))(
        instance, value, buffer);
  }

  //! @brief Call xrStructureTypeToString2KHR (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrStructureTypeToString2KHR(XrInstance instance, XrStructureType value,
                              char buffer[XR_MAX_STRUCTURE_NAME_SIZE_EXTENDED_KHR]) const {
    return (reinterpret_cast<PFN_xrStructureTypeToString2KHR>(pfnStructureTypeToString2KHR))(
        instance, value, buffer);
  }
#endif  // XR_KHR_extended_struct_name_lengths
#ifdef XR_KHR_locate_spaces
  //! @brief Call xrLocateSpacesKHR, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLocateSpacesKHR(XrSession session,
                                               const XrSpacesLocateInfo* locateInfo,
                                               XrSpaceLocations* spaceLocations) {
    XrResult result = populate_("xrLocateSpacesKHR", pfnLocateSpacesKHR);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateSpacesKHR>(pfnLocateSpacesKHR))(session, locateInfo,
                                                                         spaceLocations);
  }

  //! @brief Call xrLocateSpacesKHR (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLocateSpacesKHR(XrSession session,
                                               const XrSpacesLocateInfo* locateInfo,
                                               XrSpaceLocations* spaceLocations) const {
    return (reinterpret_cast<PFN_xrLocateSpacesKHR>(pfnLocateSpacesKHR))(session, locateInfo,
                                                                         spaceLocations);
  }
#endif  // XR_KHR_locate_spaces
#ifdef XR_EXT_performance_settings
  //! @brief Call xrPerfSettingsSetPerformanceLevelEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPerfSettingsSetPerformanceLevelEXT(XrSession session,
                                                                  XrPerfSettingsDomainEXT domain,
                                                                  XrPerfSettingsLevelEXT level) {
    XrResult result =
        populate_("xrPerfSettingsSetPerformanceLevelEXT", pfnPerfSettingsSetPerformanceLevelEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPerfSettingsSetPerformanceLevelEXT>(
        pfnPerfSettingsSetPerformanceLevelEXT))(session, domain, level);
  }

  //! @brief Call xrPerfSettingsSetPerformanceLevelEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrPerfSettingsSetPerformanceLevelEXT(
      XrSession session, XrPerfSettingsDomainEXT domain, XrPerfSettingsLevelEXT level) const {
    return (reinterpret_cast<PFN_xrPerfSettingsSetPerformanceLevelEXT>(
        pfnPerfSettingsSetPerformanceLevelEXT))(session, domain, level);
  }
#endif  // XR_EXT_performance_settings
#ifdef XR_EXT_thermal_query
  //! @brief Call xrThermalGetTemperatureTrendEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrThermalGetTemperatureTrendEXT(XrSession session, XrPerfSettingsDomainEXT domain,
                                  XrPerfSettingsNotificationLevelEXT* notificationLevel,
                                  float* tempHeadroom, float* tempSlope) {
    XrResult result =
        populate_("xrThermalGetTemperatureTrendEXT", pfnThermalGetTemperatureTrendEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrThermalGetTemperatureTrendEXT>(pfnThermalGetTemperatureTrendEXT))(
        session, domain, notificationLevel, tempHeadroom, tempSlope);
  }

  //! @brief Call xrThermalGetTemperatureTrendEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrThermalGetTemperatureTrendEXT(XrSession session, XrPerfSettingsDomainEXT domain,
                                  XrPerfSettingsNotificationLevelEXT* notificationLevel,
                                  float* tempHeadroom, float* tempSlope) const {
    return (
        reinterpret_cast<PFN_xrThermalGetTemperatureTrendEXT>(pfnThermalGetTemperatureTrendEXT))(
        session, domain, notificationLevel, tempHeadroom, tempSlope);
  }
#endif  // XR_EXT_thermal_query
#ifdef XR_EXT_debug_utils
  //! @brief Call xrSetDebugUtilsObjectNameEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrSetDebugUtilsObjectNameEXT(XrInstance instance, const XrDebugUtilsObjectNameInfoEXT* nameInfo) {
    XrResult result = populate_("xrSetDebugUtilsObjectNameEXT", pfnSetDebugUtilsObjectNameEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetDebugUtilsObjectNameEXT>(pfnSetDebugUtilsObjectNameEXT))(
        instance, nameInfo);
  }

  //! @brief Call xrSetDebugUtilsObjectNameEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetDebugUtilsObjectNameEXT(
      XrInstance instance, const XrDebugUtilsObjectNameInfoEXT* nameInfo) const {
    return (reinterpret_cast<PFN_xrSetDebugUtilsObjectNameEXT>(pfnSetDebugUtilsObjectNameEXT))(
        instance, nameInfo);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_EXT_debug_utils
  //! @brief Call xrCreateDebugUtilsMessengerEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateDebugUtilsMessengerEXT(
      XrInstance instance, const XrDebugUtilsMessengerCreateInfoEXT* createInfo,
      XrDebugUtilsMessengerEXT* messenger) {
    XrResult result = populate_("xrCreateDebugUtilsMessengerEXT", pfnCreateDebugUtilsMessengerEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateDebugUtilsMessengerEXT>(pfnCreateDebugUtilsMessengerEXT))(
        instance, createInfo, messenger);
  }

  //! @brief Call xrCreateDebugUtilsMessengerEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateDebugUtilsMessengerEXT(
      XrInstance instance, const XrDebugUtilsMessengerCreateInfoEXT* createInfo,
      XrDebugUtilsMessengerEXT* messenger) const {
    return (reinterpret_cast<PFN_xrCreateDebugUtilsMessengerEXT>(pfnCreateDebugUtilsMessengerEXT))(
        instance, createInfo, messenger);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_EXT_debug_utils
  //! @brief Call xrDestroyDebugUtilsMessengerEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyDebugUtilsMessengerEXT(XrDebugUtilsMessengerEXT messenger) {
    XrResult result =
        populate_("xrDestroyDebugUtilsMessengerEXT", pfnDestroyDebugUtilsMessengerEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyDebugUtilsMessengerEXT>(
        pfnDestroyDebugUtilsMessengerEXT))(messenger);
  }

  //! @brief Call xrDestroyDebugUtilsMessengerEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrDestroyDebugUtilsMessengerEXT(XrDebugUtilsMessengerEXT messenger) const {
    return (reinterpret_cast<PFN_xrDestroyDebugUtilsMessengerEXT>(
        pfnDestroyDebugUtilsMessengerEXT))(messenger);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_EXT_debug_utils
  //! @brief Call xrSubmitDebugUtilsMessageEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSubmitDebugUtilsMessageEXT(
      XrInstance instance, XrDebugUtilsMessageSeverityFlagsEXT messageSeverity,
      XrDebugUtilsMessageTypeFlagsEXT messageTypes,
      const XrDebugUtilsMessengerCallbackDataEXT* callbackData) {
    XrResult result = populate_("xrSubmitDebugUtilsMessageEXT", pfnSubmitDebugUtilsMessageEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSubmitDebugUtilsMessageEXT>(pfnSubmitDebugUtilsMessageEXT))(
        instance, messageSeverity, messageTypes, callbackData);
  }

  //! @brief Call xrSubmitDebugUtilsMessageEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSubmitDebugUtilsMessageEXT(
      XrInstance instance, XrDebugUtilsMessageSeverityFlagsEXT messageSeverity,
      XrDebugUtilsMessageTypeFlagsEXT messageTypes,
      const XrDebugUtilsMessengerCallbackDataEXT* callbackData) const {
    return (reinterpret_cast<PFN_xrSubmitDebugUtilsMessageEXT>(pfnSubmitDebugUtilsMessageEXT))(
        instance, messageSeverity, messageTypes, callbackData);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_EXT_debug_utils
  //! @brief Call xrSessionBeginDebugUtilsLabelRegionEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrSessionBeginDebugUtilsLabelRegionEXT(XrSession session, const XrDebugUtilsLabelEXT* labelInfo) {
    XrResult result = populate_("xrSessionBeginDebugUtilsLabelRegionEXT",
                                pfnSessionBeginDebugUtilsLabelRegionEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSessionBeginDebugUtilsLabelRegionEXT>(
        pfnSessionBeginDebugUtilsLabelRegionEXT))(session, labelInfo);
  }

  //! @brief Call xrSessionBeginDebugUtilsLabelRegionEXT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrSessionBeginDebugUtilsLabelRegionEXT(
      XrSession session, const XrDebugUtilsLabelEXT* labelInfo) const {
    return (reinterpret_cast<PFN_xrSessionBeginDebugUtilsLabelRegionEXT>(
        pfnSessionBeginDebugUtilsLabelRegionEXT))(session, labelInfo);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_EXT_debug_utils
  //! @brief Call xrSessionEndDebugUtilsLabelRegionEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSessionEndDebugUtilsLabelRegionEXT(XrSession session) {
    XrResult result =
        populate_("xrSessionEndDebugUtilsLabelRegionEXT", pfnSessionEndDebugUtilsLabelRegionEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSessionEndDebugUtilsLabelRegionEXT>(
        pfnSessionEndDebugUtilsLabelRegionEXT))(session);
  }

  //! @brief Call xrSessionEndDebugUtilsLabelRegionEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSessionEndDebugUtilsLabelRegionEXT(XrSession session) const {
    return (reinterpret_cast<PFN_xrSessionEndDebugUtilsLabelRegionEXT>(
        pfnSessionEndDebugUtilsLabelRegionEXT))(session);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_EXT_debug_utils
  //! @brief Call xrSessionInsertDebugUtilsLabelEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrSessionInsertDebugUtilsLabelEXT(XrSession session, const XrDebugUtilsLabelEXT* labelInfo) {
    XrResult result =
        populate_("xrSessionInsertDebugUtilsLabelEXT", pfnSessionInsertDebugUtilsLabelEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSessionInsertDebugUtilsLabelEXT>(
        pfnSessionInsertDebugUtilsLabelEXT))(session, labelInfo);
  }

  //! @brief Call xrSessionInsertDebugUtilsLabelEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSessionInsertDebugUtilsLabelEXT(
      XrSession session, const XrDebugUtilsLabelEXT* labelInfo) const {
    return (reinterpret_cast<PFN_xrSessionInsertDebugUtilsLabelEXT>(
        pfnSessionInsertDebugUtilsLabelEXT))(session, labelInfo);
  }
#endif  // XR_EXT_debug_utils
#ifdef XR_MSFT_spatial_anchor
  //! @brief Call xrCreateSpatialAnchorMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateSpatialAnchorMSFT(XrSession session, const XrSpatialAnchorCreateInfoMSFT* createInfo,
                            XrSpatialAnchorMSFT* anchor) {
    XrResult result = populate_("xrCreateSpatialAnchorMSFT", pfnCreateSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorMSFT>(pfnCreateSpatialAnchorMSFT))(
        session, createInfo, anchor);
  }

  //! @brief Call xrCreateSpatialAnchorMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateSpatialAnchorMSFT(XrSession session, const XrSpatialAnchorCreateInfoMSFT* createInfo,
                            XrSpatialAnchorMSFT* anchor) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorMSFT>(pfnCreateSpatialAnchorMSFT))(
        session, createInfo, anchor);
  }
#endif  // XR_MSFT_spatial_anchor
#ifdef XR_MSFT_spatial_anchor
  //! @brief Call xrCreateSpatialAnchorSpaceMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorSpaceMSFT(
      XrSession session, const XrSpatialAnchorSpaceCreateInfoMSFT* createInfo, XrSpace* space) {
    XrResult result = populate_("xrCreateSpatialAnchorSpaceMSFT", pfnCreateSpatialAnchorSpaceMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorSpaceMSFT>(pfnCreateSpatialAnchorSpaceMSFT))(
        session, createInfo, space);
  }

  //! @brief Call xrCreateSpatialAnchorSpaceMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorSpaceMSFT(
      XrSession session, const XrSpatialAnchorSpaceCreateInfoMSFT* createInfo,
      XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorSpaceMSFT>(pfnCreateSpatialAnchorSpaceMSFT))(
        session, createInfo, space);
  }
#endif  // XR_MSFT_spatial_anchor
#ifdef XR_MSFT_spatial_anchor
  //! @brief Call xrDestroySpatialAnchorMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySpatialAnchorMSFT(XrSpatialAnchorMSFT anchor) {
    XrResult result = populate_("xrDestroySpatialAnchorMSFT", pfnDestroySpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialAnchorMSFT>(pfnDestroySpatialAnchorMSFT))(anchor);
  }

  //! @brief Call xrDestroySpatialAnchorMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySpatialAnchorMSFT(XrSpatialAnchorMSFT anchor) const {
    return (reinterpret_cast<PFN_xrDestroySpatialAnchorMSFT>(pfnDestroySpatialAnchorMSFT))(anchor);
  }
#endif  // XR_MSFT_spatial_anchor
#ifdef XR_EXT_conformance_automation
  //! @brief Call xrSetInputDeviceActiveEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceActiveEXT(XrSession session, XrPath interactionProfile,
                                                       XrPath topLevelPath, XrBool32 isActive) {
    XrResult result = populate_("xrSetInputDeviceActiveEXT", pfnSetInputDeviceActiveEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceActiveEXT>(pfnSetInputDeviceActiveEXT))(
        session, interactionProfile, topLevelPath, isActive);
  }

  //! @brief Call xrSetInputDeviceActiveEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceActiveEXT(XrSession session, XrPath interactionProfile,
                                                       XrPath topLevelPath,
                                                       XrBool32 isActive) const {
    return (reinterpret_cast<PFN_xrSetInputDeviceActiveEXT>(pfnSetInputDeviceActiveEXT))(
        session, interactionProfile, topLevelPath, isActive);
  }
#endif  // XR_EXT_conformance_automation
#ifdef XR_EXT_conformance_automation
  //! @brief Call xrSetInputDeviceStateBoolEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceStateBoolEXT(XrSession session, XrPath topLevelPath,
                                                          XrPath inputSourcePath, XrBool32 state) {
    XrResult result = populate_("xrSetInputDeviceStateBoolEXT", pfnSetInputDeviceStateBoolEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceStateBoolEXT>(pfnSetInputDeviceStateBoolEXT))(
        session, topLevelPath, inputSourcePath, state);
  }

  //! @brief Call xrSetInputDeviceStateBoolEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceStateBoolEXT(XrSession session, XrPath topLevelPath,
                                                          XrPath inputSourcePath,
                                                          XrBool32 state) const {
    return (reinterpret_cast<PFN_xrSetInputDeviceStateBoolEXT>(pfnSetInputDeviceStateBoolEXT))(
        session, topLevelPath, inputSourcePath, state);
  }
#endif  // XR_EXT_conformance_automation
#ifdef XR_EXT_conformance_automation
  //! @brief Call xrSetInputDeviceStateFloatEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceStateFloatEXT(XrSession session, XrPath topLevelPath,
                                                           XrPath inputSourcePath, float state) {
    XrResult result = populate_("xrSetInputDeviceStateFloatEXT", pfnSetInputDeviceStateFloatEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceStateFloatEXT>(pfnSetInputDeviceStateFloatEXT))(
        session, topLevelPath, inputSourcePath, state);
  }

  //! @brief Call xrSetInputDeviceStateFloatEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceStateFloatEXT(XrSession session, XrPath topLevelPath,
                                                           XrPath inputSourcePath,
                                                           float state) const {
    return (reinterpret_cast<PFN_xrSetInputDeviceStateFloatEXT>(pfnSetInputDeviceStateFloatEXT))(
        session, topLevelPath, inputSourcePath, state);
  }
#endif  // XR_EXT_conformance_automation
#ifdef XR_EXT_conformance_automation
  //! @brief Call xrSetInputDeviceStateVector2fEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceStateVector2fEXT(XrSession session,
                                                              XrPath topLevelPath,
                                                              XrPath inputSourcePath,
                                                              XrVector2f state) {
    XrResult result =
        populate_("xrSetInputDeviceStateVector2fEXT", pfnSetInputDeviceStateVector2fEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceStateVector2fEXT>(
        pfnSetInputDeviceStateVector2fEXT))(session, topLevelPath, inputSourcePath, state);
  }

  //! @brief Call xrSetInputDeviceStateVector2fEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceStateVector2fEXT(XrSession session,
                                                              XrPath topLevelPath,
                                                              XrPath inputSourcePath,
                                                              XrVector2f state) const {
    return (reinterpret_cast<PFN_xrSetInputDeviceStateVector2fEXT>(
        pfnSetInputDeviceStateVector2fEXT))(session, topLevelPath, inputSourcePath, state);
  }
#endif  // XR_EXT_conformance_automation
#ifdef XR_EXT_conformance_automation
  //! @brief Call xrSetInputDeviceLocationEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceLocationEXT(XrSession session, XrPath topLevelPath,
                                                         XrPath inputSourcePath, XrSpace space,
                                                         XrPosef pose) {
    XrResult result = populate_("xrSetInputDeviceLocationEXT", pfnSetInputDeviceLocationEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceLocationEXT>(pfnSetInputDeviceLocationEXT))(
        session, topLevelPath, inputSourcePath, space, pose);
  }

  //! @brief Call xrSetInputDeviceLocationEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetInputDeviceLocationEXT(XrSession session, XrPath topLevelPath,
                                                         XrPath inputSourcePath, XrSpace space,
                                                         XrPosef pose) const {
    return (reinterpret_cast<PFN_xrSetInputDeviceLocationEXT>(pfnSetInputDeviceLocationEXT))(
        session, topLevelPath, inputSourcePath, space, pose);
  }
#endif  // XR_EXT_conformance_automation
#ifdef XR_MSFT_spatial_graph_bridge
  //! @brief Call xrCreateSpatialGraphNodeSpaceMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialGraphNodeSpaceMSFT(
      XrSession session, const XrSpatialGraphNodeSpaceCreateInfoMSFT* createInfo, XrSpace* space) {
    XrResult result =
        populate_("xrCreateSpatialGraphNodeSpaceMSFT", pfnCreateSpatialGraphNodeSpaceMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialGraphNodeSpaceMSFT>(
        pfnCreateSpatialGraphNodeSpaceMSFT))(session, createInfo, space);
  }

  //! @brief Call xrCreateSpatialGraphNodeSpaceMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialGraphNodeSpaceMSFT(
      XrSession session, const XrSpatialGraphNodeSpaceCreateInfoMSFT* createInfo,
      XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateSpatialGraphNodeSpaceMSFT>(
        pfnCreateSpatialGraphNodeSpaceMSFT))(session, createInfo, space);
  }
#endif  // XR_MSFT_spatial_graph_bridge
#ifdef XR_MSFT_spatial_graph_bridge
  //! @brief Call xrTryCreateSpatialGraphStaticNodeBindingMSFT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrTryCreateSpatialGraphStaticNodeBindingMSFT(
      XrSession session, const XrSpatialGraphStaticNodeBindingCreateInfoMSFT* createInfo,
      XrSpatialGraphNodeBindingMSFT* nodeBinding) {
    XrResult result = populate_("xrTryCreateSpatialGraphStaticNodeBindingMSFT",
                                pfnTryCreateSpatialGraphStaticNodeBindingMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTryCreateSpatialGraphStaticNodeBindingMSFT>(
        pfnTryCreateSpatialGraphStaticNodeBindingMSFT))(session, createInfo, nodeBinding);
  }

  //! @brief Call xrTryCreateSpatialGraphStaticNodeBindingMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrTryCreateSpatialGraphStaticNodeBindingMSFT(
      XrSession session, const XrSpatialGraphStaticNodeBindingCreateInfoMSFT* createInfo,
      XrSpatialGraphNodeBindingMSFT* nodeBinding) const {
    return (reinterpret_cast<PFN_xrTryCreateSpatialGraphStaticNodeBindingMSFT>(
        pfnTryCreateSpatialGraphStaticNodeBindingMSFT))(session, createInfo, nodeBinding);
  }
#endif  // XR_MSFT_spatial_graph_bridge
#ifdef XR_MSFT_spatial_graph_bridge
  //! @brief Call xrDestroySpatialGraphNodeBindingMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrDestroySpatialGraphNodeBindingMSFT(XrSpatialGraphNodeBindingMSFT nodeBinding) {
    XrResult result =
        populate_("xrDestroySpatialGraphNodeBindingMSFT", pfnDestroySpatialGraphNodeBindingMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialGraphNodeBindingMSFT>(
        pfnDestroySpatialGraphNodeBindingMSFT))(nodeBinding);
  }

  //! @brief Call xrDestroySpatialGraphNodeBindingMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrDestroySpatialGraphNodeBindingMSFT(XrSpatialGraphNodeBindingMSFT nodeBinding) const {
    return (reinterpret_cast<PFN_xrDestroySpatialGraphNodeBindingMSFT>(
        pfnDestroySpatialGraphNodeBindingMSFT))(nodeBinding);
  }
#endif  // XR_MSFT_spatial_graph_bridge
#ifdef XR_MSFT_spatial_graph_bridge
  //! @brief Call xrGetSpatialGraphNodeBindingPropertiesMSFT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrGetSpatialGraphNodeBindingPropertiesMSFT(
      XrSpatialGraphNodeBindingMSFT nodeBinding,
      const XrSpatialGraphNodeBindingPropertiesGetInfoMSFT* getInfo,
      XrSpatialGraphNodeBindingPropertiesMSFT* properties) {
    XrResult result = populate_("xrGetSpatialGraphNodeBindingPropertiesMSFT",
                                pfnGetSpatialGraphNodeBindingPropertiesMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpatialGraphNodeBindingPropertiesMSFT>(
        pfnGetSpatialGraphNodeBindingPropertiesMSFT))(nodeBinding, getInfo, properties);
  }

  //! @brief Call xrGetSpatialGraphNodeBindingPropertiesMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpatialGraphNodeBindingPropertiesMSFT(
      XrSpatialGraphNodeBindingMSFT nodeBinding,
      const XrSpatialGraphNodeBindingPropertiesGetInfoMSFT* getInfo,
      XrSpatialGraphNodeBindingPropertiesMSFT* properties) const {
    return (reinterpret_cast<PFN_xrGetSpatialGraphNodeBindingPropertiesMSFT>(
        pfnGetSpatialGraphNodeBindingPropertiesMSFT))(nodeBinding, getInfo, properties);
  }
#endif  // XR_MSFT_spatial_graph_bridge
#ifdef XR_EXT_hand_tracking
  //! @brief Call xrCreateHandTrackerEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateHandTrackerEXT(XrSession session,
                                                    const XrHandTrackerCreateInfoEXT* createInfo,
                                                    XrHandTrackerEXT* handTracker) {
    XrResult result = populate_("xrCreateHandTrackerEXT", pfnCreateHandTrackerEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateHandTrackerEXT>(pfnCreateHandTrackerEXT))(
        session, createInfo, handTracker);
  }

  //! @brief Call xrCreateHandTrackerEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateHandTrackerEXT(XrSession session,
                                                    const XrHandTrackerCreateInfoEXT* createInfo,
                                                    XrHandTrackerEXT* handTracker) const {
    return (reinterpret_cast<PFN_xrCreateHandTrackerEXT>(pfnCreateHandTrackerEXT))(
        session, createInfo, handTracker);
  }
#endif  // XR_EXT_hand_tracking
#ifdef XR_EXT_hand_tracking
  //! @brief Call xrDestroyHandTrackerEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyHandTrackerEXT(XrHandTrackerEXT handTracker) {
    XrResult result = populate_("xrDestroyHandTrackerEXT", pfnDestroyHandTrackerEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyHandTrackerEXT>(pfnDestroyHandTrackerEXT))(handTracker);
  }

  //! @brief Call xrDestroyHandTrackerEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyHandTrackerEXT(XrHandTrackerEXT handTracker) const {
    return (reinterpret_cast<PFN_xrDestroyHandTrackerEXT>(pfnDestroyHandTrackerEXT))(handTracker);
  }
#endif  // XR_EXT_hand_tracking
#ifdef XR_EXT_hand_tracking
  //! @brief Call xrLocateHandJointsEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLocateHandJointsEXT(XrHandTrackerEXT handTracker,
                                                   const XrHandJointsLocateInfoEXT* locateInfo,
                                                   XrHandJointLocationsEXT* locations) {
    XrResult result = populate_("xrLocateHandJointsEXT", pfnLocateHandJointsEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateHandJointsEXT>(pfnLocateHandJointsEXT))(
        handTracker, locateInfo, locations);
  }

  //! @brief Call xrLocateHandJointsEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLocateHandJointsEXT(XrHandTrackerEXT handTracker,
                                                   const XrHandJointsLocateInfoEXT* locateInfo,
                                                   XrHandJointLocationsEXT* locations) const {
    return (reinterpret_cast<PFN_xrLocateHandJointsEXT>(pfnLocateHandJointsEXT))(
        handTracker, locateInfo, locations);
  }
#endif  // XR_EXT_hand_tracking
#ifdef XR_MSFT_hand_tracking_mesh
  //! @brief Call xrCreateHandMeshSpaceMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateHandMeshSpaceMSFT(XrHandTrackerEXT handTracker,
                            const XrHandMeshSpaceCreateInfoMSFT* createInfo, XrSpace* space) {
    XrResult result = populate_("xrCreateHandMeshSpaceMSFT", pfnCreateHandMeshSpaceMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateHandMeshSpaceMSFT>(pfnCreateHandMeshSpaceMSFT))(
        handTracker, createInfo, space);
  }

  //! @brief Call xrCreateHandMeshSpaceMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateHandMeshSpaceMSFT(XrHandTrackerEXT handTracker,
                            const XrHandMeshSpaceCreateInfoMSFT* createInfo, XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateHandMeshSpaceMSFT>(pfnCreateHandMeshSpaceMSFT))(
        handTracker, createInfo, space);
  }
#endif  // XR_MSFT_hand_tracking_mesh
#ifdef XR_MSFT_hand_tracking_mesh
  //! @brief Call xrUpdateHandMeshMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrUpdateHandMeshMSFT(XrHandTrackerEXT handTracker,
                                                  const XrHandMeshUpdateInfoMSFT* updateInfo,
                                                  XrHandMeshMSFT* handMesh) {
    XrResult result = populate_("xrUpdateHandMeshMSFT", pfnUpdateHandMeshMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUpdateHandMeshMSFT>(pfnUpdateHandMeshMSFT))(
        handTracker, updateInfo, handMesh);
  }

  //! @brief Call xrUpdateHandMeshMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrUpdateHandMeshMSFT(XrHandTrackerEXT handTracker,
                                                  const XrHandMeshUpdateInfoMSFT* updateInfo,
                                                  XrHandMeshMSFT* handMesh) const {
    return (reinterpret_cast<PFN_xrUpdateHandMeshMSFT>(pfnUpdateHandMeshMSFT))(
        handTracker, updateInfo, handMesh);
  }
#endif  // XR_MSFT_hand_tracking_mesh
#ifdef XR_MSFT_controller_model
  //! @brief Call xrGetControllerModelKeyMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetControllerModelKeyMSFT(XrSession session, XrPath topLevelUserPath,
                              XrControllerModelKeyStateMSFT* controllerModelKeyState) {
    XrResult result = populate_("xrGetControllerModelKeyMSFT", pfnGetControllerModelKeyMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetControllerModelKeyMSFT>(pfnGetControllerModelKeyMSFT))(
        session, topLevelUserPath, controllerModelKeyState);
  }

  //! @brief Call xrGetControllerModelKeyMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetControllerModelKeyMSFT(XrSession session, XrPath topLevelUserPath,
                              XrControllerModelKeyStateMSFT* controllerModelKeyState) const {
    return (reinterpret_cast<PFN_xrGetControllerModelKeyMSFT>(pfnGetControllerModelKeyMSFT))(
        session, topLevelUserPath, controllerModelKeyState);
  }
#endif  // XR_MSFT_controller_model
#ifdef XR_MSFT_controller_model
  //! @brief Call xrLoadControllerModelMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLoadControllerModelMSFT(XrSession session,
                                                       XrControllerModelKeyMSFT modelKey,
                                                       uint32_t bufferCapacityInput,
                                                       uint32_t* bufferCountOutput,
                                                       uint8_t* buffer) {
    XrResult result = populate_("xrLoadControllerModelMSFT", pfnLoadControllerModelMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLoadControllerModelMSFT>(pfnLoadControllerModelMSFT))(
        session, modelKey, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrLoadControllerModelMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLoadControllerModelMSFT(XrSession session,
                                                       XrControllerModelKeyMSFT modelKey,
                                                       uint32_t bufferCapacityInput,
                                                       uint32_t* bufferCountOutput,
                                                       uint8_t* buffer) const {
    return (reinterpret_cast<PFN_xrLoadControllerModelMSFT>(pfnLoadControllerModelMSFT))(
        session, modelKey, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // XR_MSFT_controller_model
#ifdef XR_MSFT_controller_model
  //! @brief Call xrGetControllerModelPropertiesMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetControllerModelPropertiesMSFT(XrSession session, XrControllerModelKeyMSFT modelKey,
                                     XrControllerModelPropertiesMSFT* properties) {
    XrResult result =
        populate_("xrGetControllerModelPropertiesMSFT", pfnGetControllerModelPropertiesMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetControllerModelPropertiesMSFT>(
        pfnGetControllerModelPropertiesMSFT))(session, modelKey, properties);
  }

  //! @brief Call xrGetControllerModelPropertiesMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetControllerModelPropertiesMSFT(XrSession session, XrControllerModelKeyMSFT modelKey,
                                     XrControllerModelPropertiesMSFT* properties) const {
    return (reinterpret_cast<PFN_xrGetControllerModelPropertiesMSFT>(
        pfnGetControllerModelPropertiesMSFT))(session, modelKey, properties);
  }
#endif  // XR_MSFT_controller_model
#ifdef XR_MSFT_controller_model
  //! @brief Call xrGetControllerModelStateMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetControllerModelStateMSFT(XrSession session,
                                                           XrControllerModelKeyMSFT modelKey,
                                                           XrControllerModelStateMSFT* state) {
    XrResult result = populate_("xrGetControllerModelStateMSFT", pfnGetControllerModelStateMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetControllerModelStateMSFT>(pfnGetControllerModelStateMSFT))(
        session, modelKey, state);
  }

  //! @brief Call xrGetControllerModelStateMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetControllerModelStateMSFT(XrSession session, XrControllerModelKeyMSFT modelKey,
                                XrControllerModelStateMSFT* state) const {
    return (reinterpret_cast<PFN_xrGetControllerModelStateMSFT>(pfnGetControllerModelStateMSFT))(
        session, modelKey, state);
  }
#endif  // XR_MSFT_controller_model
#ifdef XR_MSFT_perception_anchor_interop
#if defined(XR_USE_PLATFORM_WIN32)
  //! @brief Call xrCreateSpatialAnchorFromPerceptionAnchorMSFT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorFromPerceptionAnchorMSFT(
      XrSession session, IUnknown* perceptionAnchor, XrSpatialAnchorMSFT* anchor) {
    XrResult result = populate_("xrCreateSpatialAnchorFromPerceptionAnchorMSFT",
                                pfnCreateSpatialAnchorFromPerceptionAnchorMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT>(
        pfnCreateSpatialAnchorFromPerceptionAnchorMSFT))(session, perceptionAnchor, anchor);
  }

  //! @brief Call xrCreateSpatialAnchorFromPerceptionAnchorMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorFromPerceptionAnchorMSFT(
      XrSession session, IUnknown* perceptionAnchor, XrSpatialAnchorMSFT* anchor) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT>(
        pfnCreateSpatialAnchorFromPerceptionAnchorMSFT))(session, perceptionAnchor, anchor);
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_MSFT_perception_anchor_interop
#ifdef XR_MSFT_perception_anchor_interop
#if defined(XR_USE_PLATFORM_WIN32)
  //! @brief Call xrTryGetPerceptionAnchorFromSpatialAnchorMSFT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrTryGetPerceptionAnchorFromSpatialAnchorMSFT(
      XrSession session, XrSpatialAnchorMSFT anchor, IUnknown** perceptionAnchor) {
    XrResult result = populate_("xrTryGetPerceptionAnchorFromSpatialAnchorMSFT",
                                pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT>(
        pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT))(session, anchor, perceptionAnchor);
  }

  //! @brief Call xrTryGetPerceptionAnchorFromSpatialAnchorMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrTryGetPerceptionAnchorFromSpatialAnchorMSFT(
      XrSession session, XrSpatialAnchorMSFT anchor, IUnknown** perceptionAnchor) const {
    return (reinterpret_cast<PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT>(
        pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT))(session, anchor, perceptionAnchor);
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_MSFT_perception_anchor_interop
#ifdef XR_MSFT_composition_layer_reprojection
  //! @brief Call xrEnumerateReprojectionModesMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateReprojectionModesMSFT(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t modeCapacityInput, uint32_t* modeCountOutput, XrReprojectionModeMSFT* modes) {
    XrResult result =
        populate_("xrEnumerateReprojectionModesMSFT", pfnEnumerateReprojectionModesMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateReprojectionModesMSFT>(pfnEnumerateReprojectionModesMSFT))(
        instance, systemId, viewConfigurationType, modeCapacityInput, modeCountOutput, modes);
  }

  //! @brief Call xrEnumerateReprojectionModesMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateReprojectionModesMSFT(
      XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType,
      uint32_t modeCapacityInput, uint32_t* modeCountOutput, XrReprojectionModeMSFT* modes) const {
    return (
        reinterpret_cast<PFN_xrEnumerateReprojectionModesMSFT>(pfnEnumerateReprojectionModesMSFT))(
        instance, systemId, viewConfigurationType, modeCapacityInput, modeCountOutput, modes);
  }
#endif  // XR_MSFT_composition_layer_reprojection
#ifdef XR_FB_swapchain_update_state
  //! @brief Call xrUpdateSwapchainFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrUpdateSwapchainFB(XrSwapchain swapchain,
                                                 const XrSwapchainStateBaseHeaderFB* state) {
    XrResult result = populate_("xrUpdateSwapchainFB", pfnUpdateSwapchainFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUpdateSwapchainFB>(pfnUpdateSwapchainFB))(swapchain, state);
  }

  //! @brief Call xrUpdateSwapchainFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrUpdateSwapchainFB(XrSwapchain swapchain,
                                                 const XrSwapchainStateBaseHeaderFB* state) const {
    return (reinterpret_cast<PFN_xrUpdateSwapchainFB>(pfnUpdateSwapchainFB))(swapchain, state);
  }
#endif  // XR_FB_swapchain_update_state
#ifdef XR_FB_swapchain_update_state
  //! @brief Call xrGetSwapchainStateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSwapchainStateFB(XrSwapchain swapchain,
                                                   XrSwapchainStateBaseHeaderFB* state) {
    XrResult result = populate_("xrGetSwapchainStateFB", pfnGetSwapchainStateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSwapchainStateFB>(pfnGetSwapchainStateFB))(swapchain, state);
  }

  //! @brief Call xrGetSwapchainStateFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSwapchainStateFB(XrSwapchain swapchain,
                                                   XrSwapchainStateBaseHeaderFB* state) const {
    return (reinterpret_cast<PFN_xrGetSwapchainStateFB>(pfnGetSwapchainStateFB))(swapchain, state);
  }
#endif  // XR_FB_swapchain_update_state
#ifdef XR_FB_body_tracking
  //! @brief Call xrCreateBodyTrackerFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateBodyTrackerFB(XrSession session,
                                                   const XrBodyTrackerCreateInfoFB* createInfo,
                                                   XrBodyTrackerFB* bodyTracker) {
    XrResult result = populate_("xrCreateBodyTrackerFB", pfnCreateBodyTrackerFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateBodyTrackerFB>(pfnCreateBodyTrackerFB))(
        session, createInfo, bodyTracker);
  }

  //! @brief Call xrCreateBodyTrackerFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateBodyTrackerFB(XrSession session,
                                                   const XrBodyTrackerCreateInfoFB* createInfo,
                                                   XrBodyTrackerFB* bodyTracker) const {
    return (reinterpret_cast<PFN_xrCreateBodyTrackerFB>(pfnCreateBodyTrackerFB))(
        session, createInfo, bodyTracker);
  }
#endif  // XR_FB_body_tracking
#ifdef XR_FB_body_tracking
  //! @brief Call xrDestroyBodyTrackerFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyBodyTrackerFB(XrBodyTrackerFB bodyTracker) {
    XrResult result = populate_("xrDestroyBodyTrackerFB", pfnDestroyBodyTrackerFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyBodyTrackerFB>(pfnDestroyBodyTrackerFB))(bodyTracker);
  }

  //! @brief Call xrDestroyBodyTrackerFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyBodyTrackerFB(XrBodyTrackerFB bodyTracker) const {
    return (reinterpret_cast<PFN_xrDestroyBodyTrackerFB>(pfnDestroyBodyTrackerFB))(bodyTracker);
  }
#endif  // XR_FB_body_tracking
#ifdef XR_FB_body_tracking
  //! @brief Call xrLocateBodyJointsFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLocateBodyJointsFB(XrBodyTrackerFB bodyTracker,
                                                  const XrBodyJointsLocateInfoFB* locateInfo,
                                                  XrBodyJointLocationsFB* locations) {
    XrResult result = populate_("xrLocateBodyJointsFB", pfnLocateBodyJointsFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateBodyJointsFB>(pfnLocateBodyJointsFB))(
        bodyTracker, locateInfo, locations);
  }

  //! @brief Call xrLocateBodyJointsFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLocateBodyJointsFB(XrBodyTrackerFB bodyTracker,
                                                  const XrBodyJointsLocateInfoFB* locateInfo,
                                                  XrBodyJointLocationsFB* locations) const {
    return (reinterpret_cast<PFN_xrLocateBodyJointsFB>(pfnLocateBodyJointsFB))(
        bodyTracker, locateInfo, locations);
  }
#endif  // XR_FB_body_tracking
#ifdef XR_FB_body_tracking
  //! @brief Call xrGetBodySkeletonFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetBodySkeletonFB(XrBodyTrackerFB bodyTracker,
                                                 XrBodySkeletonFB* skeleton) {
    XrResult result = populate_("xrGetBodySkeletonFB", pfnGetBodySkeletonFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetBodySkeletonFB>(pfnGetBodySkeletonFB))(bodyTracker, skeleton);
  }

  //! @brief Call xrGetBodySkeletonFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetBodySkeletonFB(XrBodyTrackerFB bodyTracker,
                                                 XrBodySkeletonFB* skeleton) const {
    return (reinterpret_cast<PFN_xrGetBodySkeletonFB>(pfnGetBodySkeletonFB))(bodyTracker, skeleton);
  }
#endif  // XR_FB_body_tracking
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrEnumerateSceneComputeFeaturesMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateSceneComputeFeaturesMSFT(
      XrInstance instance, XrSystemId systemId, uint32_t featureCapacityInput,
      uint32_t* featureCountOutput, XrSceneComputeFeatureMSFT* features) {
    XrResult result =
        populate_("xrEnumerateSceneComputeFeaturesMSFT", pfnEnumerateSceneComputeFeaturesMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateSceneComputeFeaturesMSFT>(
        pfnEnumerateSceneComputeFeaturesMSFT))(instance, systemId, featureCapacityInput,
                                               featureCountOutput, features);
  }

  //! @brief Call xrEnumerateSceneComputeFeaturesMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateSceneComputeFeaturesMSFT(
      XrInstance instance, XrSystemId systemId, uint32_t featureCapacityInput,
      uint32_t* featureCountOutput, XrSceneComputeFeatureMSFT* features) const {
    return (reinterpret_cast<PFN_xrEnumerateSceneComputeFeaturesMSFT>(
        pfnEnumerateSceneComputeFeaturesMSFT))(instance, systemId, featureCapacityInput,
                                               featureCountOutput, features);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrCreateSceneObserverMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateSceneObserverMSFT(XrSession session, const XrSceneObserverCreateInfoMSFT* createInfo,
                            XrSceneObserverMSFT* sceneObserver) {
    XrResult result = populate_("xrCreateSceneObserverMSFT", pfnCreateSceneObserverMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSceneObserverMSFT>(pfnCreateSceneObserverMSFT))(
        session, createInfo, sceneObserver);
  }

  //! @brief Call xrCreateSceneObserverMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateSceneObserverMSFT(XrSession session, const XrSceneObserverCreateInfoMSFT* createInfo,
                            XrSceneObserverMSFT* sceneObserver) const {
    return (reinterpret_cast<PFN_xrCreateSceneObserverMSFT>(pfnCreateSceneObserverMSFT))(
        session, createInfo, sceneObserver);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrDestroySceneObserverMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySceneObserverMSFT(XrSceneObserverMSFT sceneObserver) {
    XrResult result = populate_("xrDestroySceneObserverMSFT", pfnDestroySceneObserverMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySceneObserverMSFT>(pfnDestroySceneObserverMSFT))(
        sceneObserver);
  }

  //! @brief Call xrDestroySceneObserverMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySceneObserverMSFT(XrSceneObserverMSFT sceneObserver) const {
    return (reinterpret_cast<PFN_xrDestroySceneObserverMSFT>(pfnDestroySceneObserverMSFT))(
        sceneObserver);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrCreateSceneMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSceneMSFT(XrSceneObserverMSFT sceneObserver,
                                               const XrSceneCreateInfoMSFT* createInfo,
                                               XrSceneMSFT* scene) {
    XrResult result = populate_("xrCreateSceneMSFT", pfnCreateSceneMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSceneMSFT>(pfnCreateSceneMSFT))(sceneObserver, createInfo,
                                                                         scene);
  }

  //! @brief Call xrCreateSceneMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSceneMSFT(XrSceneObserverMSFT sceneObserver,
                                               const XrSceneCreateInfoMSFT* createInfo,
                                               XrSceneMSFT* scene) const {
    return (reinterpret_cast<PFN_xrCreateSceneMSFT>(pfnCreateSceneMSFT))(sceneObserver, createInfo,
                                                                         scene);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrDestroySceneMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySceneMSFT(XrSceneMSFT scene) {
    XrResult result = populate_("xrDestroySceneMSFT", pfnDestroySceneMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySceneMSFT>(pfnDestroySceneMSFT))(scene);
  }

  //! @brief Call xrDestroySceneMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySceneMSFT(XrSceneMSFT scene) const {
    return (reinterpret_cast<PFN_xrDestroySceneMSFT>(pfnDestroySceneMSFT))(scene);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrComputeNewSceneMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrComputeNewSceneMSFT(XrSceneObserverMSFT sceneObserver,
                                                   const XrNewSceneComputeInfoMSFT* computeInfo) {
    XrResult result = populate_("xrComputeNewSceneMSFT", pfnComputeNewSceneMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrComputeNewSceneMSFT>(pfnComputeNewSceneMSFT))(sceneObserver,
                                                                                 computeInfo);
  }

  //! @brief Call xrComputeNewSceneMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrComputeNewSceneMSFT(
      XrSceneObserverMSFT sceneObserver, const XrNewSceneComputeInfoMSFT* computeInfo) const {
    return (reinterpret_cast<PFN_xrComputeNewSceneMSFT>(pfnComputeNewSceneMSFT))(sceneObserver,
                                                                                 computeInfo);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrGetSceneComputeStateMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSceneComputeStateMSFT(XrSceneObserverMSFT sceneObserver,
                                                        XrSceneComputeStateMSFT* state) {
    XrResult result = populate_("xrGetSceneComputeStateMSFT", pfnGetSceneComputeStateMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSceneComputeStateMSFT>(pfnGetSceneComputeStateMSFT))(
        sceneObserver, state);
  }

  //! @brief Call xrGetSceneComputeStateMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSceneComputeStateMSFT(XrSceneObserverMSFT sceneObserver,
                                                        XrSceneComputeStateMSFT* state) const {
    return (reinterpret_cast<PFN_xrGetSceneComputeStateMSFT>(pfnGetSceneComputeStateMSFT))(
        sceneObserver, state);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrGetSceneComponentsMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSceneComponentsMSFT(XrSceneMSFT scene,
                                                      const XrSceneComponentsGetInfoMSFT* getInfo,
                                                      XrSceneComponentsMSFT* components) {
    XrResult result = populate_("xrGetSceneComponentsMSFT", pfnGetSceneComponentsMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSceneComponentsMSFT>(pfnGetSceneComponentsMSFT))(
        scene, getInfo, components);
  }

  //! @brief Call xrGetSceneComponentsMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSceneComponentsMSFT(XrSceneMSFT scene,
                                                      const XrSceneComponentsGetInfoMSFT* getInfo,
                                                      XrSceneComponentsMSFT* components) const {
    return (reinterpret_cast<PFN_xrGetSceneComponentsMSFT>(pfnGetSceneComponentsMSFT))(
        scene, getInfo, components);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrLocateSceneComponentsMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrLocateSceneComponentsMSFT(XrSceneMSFT scene, const XrSceneComponentsLocateInfoMSFT* locateInfo,
                              XrSceneComponentLocationsMSFT* locations) {
    XrResult result = populate_("xrLocateSceneComponentsMSFT", pfnLocateSceneComponentsMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateSceneComponentsMSFT>(pfnLocateSceneComponentsMSFT))(
        scene, locateInfo, locations);
  }

  //! @brief Call xrLocateSceneComponentsMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrLocateSceneComponentsMSFT(XrSceneMSFT scene, const XrSceneComponentsLocateInfoMSFT* locateInfo,
                              XrSceneComponentLocationsMSFT* locations) const {
    return (reinterpret_cast<PFN_xrLocateSceneComponentsMSFT>(pfnLocateSceneComponentsMSFT))(
        scene, locateInfo, locations);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding
  //! @brief Call xrGetSceneMeshBuffersMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSceneMeshBuffersMSFT(XrSceneMSFT scene,
                                                       const XrSceneMeshBuffersGetInfoMSFT* getInfo,
                                                       XrSceneMeshBuffersMSFT* buffers) {
    XrResult result = populate_("xrGetSceneMeshBuffersMSFT", pfnGetSceneMeshBuffersMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSceneMeshBuffersMSFT>(pfnGetSceneMeshBuffersMSFT))(
        scene, getInfo, buffers);
  }

  //! @brief Call xrGetSceneMeshBuffersMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSceneMeshBuffersMSFT(XrSceneMSFT scene,
                                                       const XrSceneMeshBuffersGetInfoMSFT* getInfo,
                                                       XrSceneMeshBuffersMSFT* buffers) const {
    return (reinterpret_cast<PFN_xrGetSceneMeshBuffersMSFT>(pfnGetSceneMeshBuffersMSFT))(
        scene, getInfo, buffers);
  }
#endif  // XR_MSFT_scene_understanding
#ifdef XR_MSFT_scene_understanding_serialization
  //! @brief Call xrDeserializeSceneMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDeserializeSceneMSFT(
      XrSceneObserverMSFT sceneObserver, const XrSceneDeserializeInfoMSFT* deserializeInfo) {
    XrResult result = populate_("xrDeserializeSceneMSFT", pfnDeserializeSceneMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDeserializeSceneMSFT>(pfnDeserializeSceneMSFT))(sceneObserver,
                                                                                   deserializeInfo);
  }

  //! @brief Call xrDeserializeSceneMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDeserializeSceneMSFT(
      XrSceneObserverMSFT sceneObserver, const XrSceneDeserializeInfoMSFT* deserializeInfo) const {
    return (reinterpret_cast<PFN_xrDeserializeSceneMSFT>(pfnDeserializeSceneMSFT))(sceneObserver,
                                                                                   deserializeInfo);
  }
#endif  // XR_MSFT_scene_understanding_serialization
#ifdef XR_MSFT_scene_understanding_serialization
  //! @brief Call xrGetSerializedSceneFragmentDataMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSerializedSceneFragmentDataMSFT(
      XrSceneMSFT scene, const XrSerializedSceneFragmentDataGetInfoMSFT* getInfo,
      uint32_t countInput, uint32_t* readOutput, uint8_t* buffer) {
    XrResult result =
        populate_("xrGetSerializedSceneFragmentDataMSFT", pfnGetSerializedSceneFragmentDataMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSerializedSceneFragmentDataMSFT>(
        pfnGetSerializedSceneFragmentDataMSFT))(scene, getInfo, countInput, readOutput, buffer);
  }

  //! @brief Call xrGetSerializedSceneFragmentDataMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetSerializedSceneFragmentDataMSFT(
      XrSceneMSFT scene, const XrSerializedSceneFragmentDataGetInfoMSFT* getInfo,
      uint32_t countInput, uint32_t* readOutput, uint8_t* buffer) const {
    return (reinterpret_cast<PFN_xrGetSerializedSceneFragmentDataMSFT>(
        pfnGetSerializedSceneFragmentDataMSFT))(scene, getInfo, countInput, readOutput, buffer);
  }
#endif  // XR_MSFT_scene_understanding_serialization
#ifdef XR_FB_display_refresh_rate
  //! @brief Call xrEnumerateDisplayRefreshRatesFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateDisplayRefreshRatesFB(
      XrSession session, uint32_t displayRefreshRateCapacityInput,
      uint32_t* displayRefreshRateCountOutput, float* displayRefreshRates) {
    XrResult result =
        populate_("xrEnumerateDisplayRefreshRatesFB", pfnEnumerateDisplayRefreshRatesFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateDisplayRefreshRatesFB>(
        pfnEnumerateDisplayRefreshRatesFB))(session, displayRefreshRateCapacityInput,
                                            displayRefreshRateCountOutput, displayRefreshRates);
  }

  //! @brief Call xrEnumerateDisplayRefreshRatesFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateDisplayRefreshRatesFB(
      XrSession session, uint32_t displayRefreshRateCapacityInput,
      uint32_t* displayRefreshRateCountOutput, float* displayRefreshRates) const {
    return (reinterpret_cast<PFN_xrEnumerateDisplayRefreshRatesFB>(
        pfnEnumerateDisplayRefreshRatesFB))(session, displayRefreshRateCapacityInput,
                                            displayRefreshRateCountOutput, displayRefreshRates);
  }
#endif  // XR_FB_display_refresh_rate
#ifdef XR_FB_display_refresh_rate
  //! @brief Call xrGetDisplayRefreshRateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetDisplayRefreshRateFB(XrSession session,
                                                       float* displayRefreshRate) {
    XrResult result = populate_("xrGetDisplayRefreshRateFB", pfnGetDisplayRefreshRateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetDisplayRefreshRateFB>(pfnGetDisplayRefreshRateFB))(
        session, displayRefreshRate);
  }

  //! @brief Call xrGetDisplayRefreshRateFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetDisplayRefreshRateFB(XrSession session,
                                                       float* displayRefreshRate) const {
    return (reinterpret_cast<PFN_xrGetDisplayRefreshRateFB>(pfnGetDisplayRefreshRateFB))(
        session, displayRefreshRate);
  }
#endif  // XR_FB_display_refresh_rate
#ifdef XR_FB_display_refresh_rate
  //! @brief Call xrRequestDisplayRefreshRateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrRequestDisplayRefreshRateFB(XrSession session,
                                                           float displayRefreshRate) {
    XrResult result = populate_("xrRequestDisplayRefreshRateFB", pfnRequestDisplayRefreshRateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrRequestDisplayRefreshRateFB>(pfnRequestDisplayRefreshRateFB))(
        session, displayRefreshRate);
  }

  //! @brief Call xrRequestDisplayRefreshRateFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrRequestDisplayRefreshRateFB(XrSession session,
                                                           float displayRefreshRate) const {
    return (reinterpret_cast<PFN_xrRequestDisplayRefreshRateFB>(pfnRequestDisplayRefreshRateFB))(
        session, displayRefreshRate);
  }
#endif  // XR_FB_display_refresh_rate
#ifdef XR_HTCX_vive_tracker_interaction
  //! @brief Call xrEnumerateViveTrackerPathsHTCX, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateViveTrackerPathsHTCX(XrInstance instance,
                                                             uint32_t pathCapacityInput,
                                                             uint32_t* pathCountOutput,
                                                             XrViveTrackerPathsHTCX* paths) {
    XrResult result =
        populate_("xrEnumerateViveTrackerPathsHTCX", pfnEnumerateViveTrackerPathsHTCX);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateViveTrackerPathsHTCX>(
        pfnEnumerateViveTrackerPathsHTCX))(instance, pathCapacityInput, pathCountOutput, paths);
  }

  //! @brief Call xrEnumerateViveTrackerPathsHTCX (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateViveTrackerPathsHTCX(XrInstance instance,
                                                             uint32_t pathCapacityInput,
                                                             uint32_t* pathCountOutput,
                                                             XrViveTrackerPathsHTCX* paths) const {
    return (reinterpret_cast<PFN_xrEnumerateViveTrackerPathsHTCX>(
        pfnEnumerateViveTrackerPathsHTCX))(instance, pathCapacityInput, pathCountOutput, paths);
  }
#endif  // XR_HTCX_vive_tracker_interaction
#ifdef XR_HTC_facial_tracking
  //! @brief Call xrCreateFacialTrackerHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateFacialTrackerHTC(XrSession session, const XrFacialTrackerCreateInfoHTC* createInfo,
                           XrFacialTrackerHTC* facialTracker) {
    XrResult result = populate_("xrCreateFacialTrackerHTC", pfnCreateFacialTrackerHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateFacialTrackerHTC>(pfnCreateFacialTrackerHTC))(
        session, createInfo, facialTracker);
  }

  //! @brief Call xrCreateFacialTrackerHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateFacialTrackerHTC(XrSession session, const XrFacialTrackerCreateInfoHTC* createInfo,
                           XrFacialTrackerHTC* facialTracker) const {
    return (reinterpret_cast<PFN_xrCreateFacialTrackerHTC>(pfnCreateFacialTrackerHTC))(
        session, createInfo, facialTracker);
  }
#endif  // XR_HTC_facial_tracking
#ifdef XR_HTC_facial_tracking
  //! @brief Call xrDestroyFacialTrackerHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyFacialTrackerHTC(XrFacialTrackerHTC facialTracker) {
    XrResult result = populate_("xrDestroyFacialTrackerHTC", pfnDestroyFacialTrackerHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyFacialTrackerHTC>(pfnDestroyFacialTrackerHTC))(
        facialTracker);
  }

  //! @brief Call xrDestroyFacialTrackerHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyFacialTrackerHTC(XrFacialTrackerHTC facialTracker) const {
    return (reinterpret_cast<PFN_xrDestroyFacialTrackerHTC>(pfnDestroyFacialTrackerHTC))(
        facialTracker);
  }
#endif  // XR_HTC_facial_tracking
#ifdef XR_HTC_facial_tracking
  //! @brief Call xrGetFacialExpressionsHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetFacialExpressionsHTC(XrFacialTrackerHTC facialTracker,
                                                       XrFacialExpressionsHTC* facialExpressions) {
    XrResult result = populate_("xrGetFacialExpressionsHTC", pfnGetFacialExpressionsHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetFacialExpressionsHTC>(pfnGetFacialExpressionsHTC))(
        facialTracker, facialExpressions);
  }

  //! @brief Call xrGetFacialExpressionsHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetFacialExpressionsHTC(
      XrFacialTrackerHTC facialTracker, XrFacialExpressionsHTC* facialExpressions) const {
    return (reinterpret_cast<PFN_xrGetFacialExpressionsHTC>(pfnGetFacialExpressionsHTC))(
        facialTracker, facialExpressions);
  }
#endif  // XR_HTC_facial_tracking
#ifdef XR_FB_color_space
  //! @brief Call xrEnumerateColorSpacesFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateColorSpacesFB(XrSession session,
                                                      uint32_t colorSpaceCapacityInput,
                                                      uint32_t* colorSpaceCountOutput,
                                                      XrColorSpaceFB* colorSpaces) {
    XrResult result = populate_("xrEnumerateColorSpacesFB", pfnEnumerateColorSpacesFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateColorSpacesFB>(pfnEnumerateColorSpacesFB))(
        session, colorSpaceCapacityInput, colorSpaceCountOutput, colorSpaces);
  }

  //! @brief Call xrEnumerateColorSpacesFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateColorSpacesFB(XrSession session,
                                                      uint32_t colorSpaceCapacityInput,
                                                      uint32_t* colorSpaceCountOutput,
                                                      XrColorSpaceFB* colorSpaces) const {
    return (reinterpret_cast<PFN_xrEnumerateColorSpacesFB>(pfnEnumerateColorSpacesFB))(
        session, colorSpaceCapacityInput, colorSpaceCountOutput, colorSpaces);
  }
#endif  // XR_FB_color_space
#ifdef XR_FB_color_space
  //! @brief Call xrSetColorSpaceFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetColorSpaceFB(XrSession session, const XrColorSpaceFB colorSpace) {
    XrResult result = populate_("xrSetColorSpaceFB", pfnSetColorSpaceFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetColorSpaceFB>(pfnSetColorSpaceFB))(session, colorSpace);
  }

  //! @brief Call xrSetColorSpaceFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetColorSpaceFB(XrSession session,
                                               const XrColorSpaceFB colorSpace) const {
    return (reinterpret_cast<PFN_xrSetColorSpaceFB>(pfnSetColorSpaceFB))(session, colorSpace);
  }
#endif  // XR_FB_color_space
#ifdef XR_FB_hand_tracking_mesh
  //! @brief Call xrGetHandMeshFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetHandMeshFB(XrHandTrackerEXT handTracker,
                                             XrHandTrackingMeshFB* mesh) {
    XrResult result = populate_("xrGetHandMeshFB", pfnGetHandMeshFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetHandMeshFB>(pfnGetHandMeshFB))(handTracker, mesh);
  }

  //! @brief Call xrGetHandMeshFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetHandMeshFB(XrHandTrackerEXT handTracker,
                                             XrHandTrackingMeshFB* mesh) const {
    return (reinterpret_cast<PFN_xrGetHandMeshFB>(pfnGetHandMeshFB))(handTracker, mesh);
  }
#endif  // XR_FB_hand_tracking_mesh
#ifdef XR_FB_spatial_entity
  //! @brief Call xrCreateSpatialAnchorFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorFB(XrSession session,
                                                     const XrSpatialAnchorCreateInfoFB* info,
                                                     XrAsyncRequestIdFB* requestId) {
    XrResult result = populate_("xrCreateSpatialAnchorFB", pfnCreateSpatialAnchorFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFB>(pfnCreateSpatialAnchorFB))(session, info,
                                                                                     requestId);
  }

  //! @brief Call xrCreateSpatialAnchorFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorFB(XrSession session,
                                                     const XrSpatialAnchorCreateInfoFB* info,
                                                     XrAsyncRequestIdFB* requestId) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFB>(pfnCreateSpatialAnchorFB))(session, info,
                                                                                     requestId);
  }
#endif  // XR_FB_spatial_entity
#ifdef XR_FB_spatial_entity
  //! @brief Call xrGetSpaceUuidFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpaceUuidFB(XrSpace space, XrUuidEXT* uuid) {
    XrResult result = populate_("xrGetSpaceUuidFB", pfnGetSpaceUuidFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpaceUuidFB>(pfnGetSpaceUuidFB))(space, uuid);
  }

  //! @brief Call xrGetSpaceUuidFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpaceUuidFB(XrSpace space, XrUuidEXT* uuid) const {
    return (reinterpret_cast<PFN_xrGetSpaceUuidFB>(pfnGetSpaceUuidFB))(space, uuid);
  }
#endif  // XR_FB_spatial_entity
#ifdef XR_FB_spatial_entity
  //! @brief Call xrEnumerateSpaceSupportedComponentsFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateSpaceSupportedComponentsFB(
      XrSpace space, uint32_t componentTypeCapacityInput, uint32_t* componentTypeCountOutput,
      XrSpaceComponentTypeFB* componentTypes) {
    XrResult result =
        populate_("xrEnumerateSpaceSupportedComponentsFB", pfnEnumerateSpaceSupportedComponentsFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateSpaceSupportedComponentsFB>(
        pfnEnumerateSpaceSupportedComponentsFB))(space, componentTypeCapacityInput,
                                                 componentTypeCountOutput, componentTypes);
  }

  //! @brief Call xrEnumerateSpaceSupportedComponentsFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateSpaceSupportedComponentsFB(
      XrSpace space, uint32_t componentTypeCapacityInput, uint32_t* componentTypeCountOutput,
      XrSpaceComponentTypeFB* componentTypes) const {
    return (reinterpret_cast<PFN_xrEnumerateSpaceSupportedComponentsFB>(
        pfnEnumerateSpaceSupportedComponentsFB))(space, componentTypeCapacityInput,
                                                 componentTypeCountOutput, componentTypes);
  }
#endif  // XR_FB_spatial_entity
#ifdef XR_FB_spatial_entity
  //! @brief Call xrSetSpaceComponentStatusFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetSpaceComponentStatusFB(
      XrSpace space, const XrSpaceComponentStatusSetInfoFB* info, XrAsyncRequestIdFB* requestId) {
    XrResult result = populate_("xrSetSpaceComponentStatusFB", pfnSetSpaceComponentStatusFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetSpaceComponentStatusFB>(pfnSetSpaceComponentStatusFB))(
        space, info, requestId);
  }

  //! @brief Call xrSetSpaceComponentStatusFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrSetSpaceComponentStatusFB(XrSpace space, const XrSpaceComponentStatusSetInfoFB* info,
                              XrAsyncRequestIdFB* requestId) const {
    return (reinterpret_cast<PFN_xrSetSpaceComponentStatusFB>(pfnSetSpaceComponentStatusFB))(
        space, info, requestId);
  }
#endif  // XR_FB_spatial_entity
#ifdef XR_FB_spatial_entity
  //! @brief Call xrGetSpaceComponentStatusFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpaceComponentStatusFB(XrSpace space,
                                                         XrSpaceComponentTypeFB componentType,
                                                         XrSpaceComponentStatusFB* status) {
    XrResult result = populate_("xrGetSpaceComponentStatusFB", pfnGetSpaceComponentStatusFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpaceComponentStatusFB>(pfnGetSpaceComponentStatusFB))(
        space, componentType, status);
  }

  //! @brief Call xrGetSpaceComponentStatusFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpaceComponentStatusFB(XrSpace space,
                                                         XrSpaceComponentTypeFB componentType,
                                                         XrSpaceComponentStatusFB* status) const {
    return (reinterpret_cast<PFN_xrGetSpaceComponentStatusFB>(pfnGetSpaceComponentStatusFB))(
        space, componentType, status);
  }
#endif  // XR_FB_spatial_entity
#ifdef XR_FB_foveation
  //! @brief Call xrCreateFoveationProfileFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateFoveationProfileFB(XrSession session, const XrFoveationProfileCreateInfoFB* createInfo,
                             XrFoveationProfileFB* profile) {
    XrResult result = populate_("xrCreateFoveationProfileFB", pfnCreateFoveationProfileFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateFoveationProfileFB>(pfnCreateFoveationProfileFB))(
        session, createInfo, profile);
  }

  //! @brief Call xrCreateFoveationProfileFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateFoveationProfileFB(XrSession session, const XrFoveationProfileCreateInfoFB* createInfo,
                             XrFoveationProfileFB* profile) const {
    return (reinterpret_cast<PFN_xrCreateFoveationProfileFB>(pfnCreateFoveationProfileFB))(
        session, createInfo, profile);
  }
#endif  // XR_FB_foveation
#ifdef XR_FB_foveation
  //! @brief Call xrDestroyFoveationProfileFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyFoveationProfileFB(XrFoveationProfileFB profile) {
    XrResult result = populate_("xrDestroyFoveationProfileFB", pfnDestroyFoveationProfileFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyFoveationProfileFB>(pfnDestroyFoveationProfileFB))(
        profile);
  }

  //! @brief Call xrDestroyFoveationProfileFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyFoveationProfileFB(XrFoveationProfileFB profile) const {
    return (reinterpret_cast<PFN_xrDestroyFoveationProfileFB>(pfnDestroyFoveationProfileFB))(
        profile);
  }
#endif  // XR_FB_foveation
#ifdef XR_FB_keyboard_tracking
  //! @brief Call xrQuerySystemTrackedKeyboardFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrQuerySystemTrackedKeyboardFB(XrSession session, const XrKeyboardTrackingQueryFB* queryInfo,
                                 XrKeyboardTrackingDescriptionFB* keyboard) {
    XrResult result = populate_("xrQuerySystemTrackedKeyboardFB", pfnQuerySystemTrackedKeyboardFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrQuerySystemTrackedKeyboardFB>(pfnQuerySystemTrackedKeyboardFB))(
        session, queryInfo, keyboard);
  }

  //! @brief Call xrQuerySystemTrackedKeyboardFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrQuerySystemTrackedKeyboardFB(XrSession session, const XrKeyboardTrackingQueryFB* queryInfo,
                                 XrKeyboardTrackingDescriptionFB* keyboard) const {
    return (reinterpret_cast<PFN_xrQuerySystemTrackedKeyboardFB>(pfnQuerySystemTrackedKeyboardFB))(
        session, queryInfo, keyboard);
  }
#endif  // XR_FB_keyboard_tracking
#ifdef XR_FB_keyboard_tracking
  //! @brief Call xrCreateKeyboardSpaceFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateKeyboardSpaceFB(XrSession session,
                                                     const XrKeyboardSpaceCreateInfoFB* createInfo,
                                                     XrSpace* keyboardSpace) {
    XrResult result = populate_("xrCreateKeyboardSpaceFB", pfnCreateKeyboardSpaceFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateKeyboardSpaceFB>(pfnCreateKeyboardSpaceFB))(
        session, createInfo, keyboardSpace);
  }

  //! @brief Call xrCreateKeyboardSpaceFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateKeyboardSpaceFB(XrSession session,
                                                     const XrKeyboardSpaceCreateInfoFB* createInfo,
                                                     XrSpace* keyboardSpace) const {
    return (reinterpret_cast<PFN_xrCreateKeyboardSpaceFB>(pfnCreateKeyboardSpaceFB))(
        session, createInfo, keyboardSpace);
  }
#endif  // XR_FB_keyboard_tracking
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrCreateTriangleMeshFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateTriangleMeshFB(XrSession session,
                                                    const XrTriangleMeshCreateInfoFB* createInfo,
                                                    XrTriangleMeshFB* outTriangleMesh) {
    XrResult result = populate_("xrCreateTriangleMeshFB", pfnCreateTriangleMeshFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateTriangleMeshFB>(pfnCreateTriangleMeshFB))(
        session, createInfo, outTriangleMesh);
  }

  //! @brief Call xrCreateTriangleMeshFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateTriangleMeshFB(XrSession session,
                                                    const XrTriangleMeshCreateInfoFB* createInfo,
                                                    XrTriangleMeshFB* outTriangleMesh) const {
    return (reinterpret_cast<PFN_xrCreateTriangleMeshFB>(pfnCreateTriangleMeshFB))(
        session, createInfo, outTriangleMesh);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrDestroyTriangleMeshFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyTriangleMeshFB(XrTriangleMeshFB mesh) {
    XrResult result = populate_("xrDestroyTriangleMeshFB", pfnDestroyTriangleMeshFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyTriangleMeshFB>(pfnDestroyTriangleMeshFB))(mesh);
  }

  //! @brief Call xrDestroyTriangleMeshFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyTriangleMeshFB(XrTriangleMeshFB mesh) const {
    return (reinterpret_cast<PFN_xrDestroyTriangleMeshFB>(pfnDestroyTriangleMeshFB))(mesh);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrTriangleMeshGetVertexBufferFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrTriangleMeshGetVertexBufferFB(XrTriangleMeshFB mesh,
                                                             XrVector3f** outVertexBuffer) {
    XrResult result =
        populate_("xrTriangleMeshGetVertexBufferFB", pfnTriangleMeshGetVertexBufferFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshGetVertexBufferFB>(
        pfnTriangleMeshGetVertexBufferFB))(mesh, outVertexBuffer);
  }

  //! @brief Call xrTriangleMeshGetVertexBufferFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrTriangleMeshGetVertexBufferFB(XrTriangleMeshFB mesh,
                                                             XrVector3f** outVertexBuffer) const {
    return (reinterpret_cast<PFN_xrTriangleMeshGetVertexBufferFB>(
        pfnTriangleMeshGetVertexBufferFB))(mesh, outVertexBuffer);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrTriangleMeshGetIndexBufferFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrTriangleMeshGetIndexBufferFB(XrTriangleMeshFB mesh,
                                                            uint32_t** outIndexBuffer) {
    XrResult result = populate_("xrTriangleMeshGetIndexBufferFB", pfnTriangleMeshGetIndexBufferFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshGetIndexBufferFB>(pfnTriangleMeshGetIndexBufferFB))(
        mesh, outIndexBuffer);
  }

  //! @brief Call xrTriangleMeshGetIndexBufferFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrTriangleMeshGetIndexBufferFB(XrTriangleMeshFB mesh,
                                                            uint32_t** outIndexBuffer) const {
    return (reinterpret_cast<PFN_xrTriangleMeshGetIndexBufferFB>(pfnTriangleMeshGetIndexBufferFB))(
        mesh, outIndexBuffer);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrTriangleMeshBeginUpdateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrTriangleMeshBeginUpdateFB(XrTriangleMeshFB mesh) {
    XrResult result = populate_("xrTriangleMeshBeginUpdateFB", pfnTriangleMeshBeginUpdateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshBeginUpdateFB>(pfnTriangleMeshBeginUpdateFB))(mesh);
  }

  //! @brief Call xrTriangleMeshBeginUpdateFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrTriangleMeshBeginUpdateFB(XrTriangleMeshFB mesh) const {
    return (reinterpret_cast<PFN_xrTriangleMeshBeginUpdateFB>(pfnTriangleMeshBeginUpdateFB))(mesh);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrTriangleMeshEndUpdateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrTriangleMeshEndUpdateFB(XrTriangleMeshFB mesh, uint32_t vertexCount,
                                                       uint32_t triangleCount) {
    XrResult result = populate_("xrTriangleMeshEndUpdateFB", pfnTriangleMeshEndUpdateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshEndUpdateFB>(pfnTriangleMeshEndUpdateFB))(
        mesh, vertexCount, triangleCount);
  }

  //! @brief Call xrTriangleMeshEndUpdateFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrTriangleMeshEndUpdateFB(XrTriangleMeshFB mesh, uint32_t vertexCount,
                                                       uint32_t triangleCount) const {
    return (reinterpret_cast<PFN_xrTriangleMeshEndUpdateFB>(pfnTriangleMeshEndUpdateFB))(
        mesh, vertexCount, triangleCount);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrTriangleMeshBeginVertexBufferUpdateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrTriangleMeshBeginVertexBufferUpdateFB(XrTriangleMeshFB mesh,
                                                                     uint32_t* outVertexCount) {
    XrResult result = populate_("xrTriangleMeshBeginVertexBufferUpdateFB",
                                pfnTriangleMeshBeginVertexBufferUpdateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshBeginVertexBufferUpdateFB>(
        pfnTriangleMeshBeginVertexBufferUpdateFB))(mesh, outVertexCount);
  }

  //! @brief Call xrTriangleMeshBeginVertexBufferUpdateFB (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult
  xrTriangleMeshBeginVertexBufferUpdateFB(XrTriangleMeshFB mesh, uint32_t* outVertexCount) const {
    return (reinterpret_cast<PFN_xrTriangleMeshBeginVertexBufferUpdateFB>(
        pfnTriangleMeshBeginVertexBufferUpdateFB))(mesh, outVertexCount);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_triangle_mesh
  //! @brief Call xrTriangleMeshEndVertexBufferUpdateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrTriangleMeshEndVertexBufferUpdateFB(XrTriangleMeshFB mesh) {
    XrResult result =
        populate_("xrTriangleMeshEndVertexBufferUpdateFB", pfnTriangleMeshEndVertexBufferUpdateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshEndVertexBufferUpdateFB>(
        pfnTriangleMeshEndVertexBufferUpdateFB))(mesh);
  }

  //! @brief Call xrTriangleMeshEndVertexBufferUpdateFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrTriangleMeshEndVertexBufferUpdateFB(XrTriangleMeshFB mesh) const {
    return (reinterpret_cast<PFN_xrTriangleMeshEndVertexBufferUpdateFB>(
        pfnTriangleMeshEndVertexBufferUpdateFB))(mesh);
  }
#endif  // XR_FB_triangle_mesh
#ifdef XR_FB_passthrough
  //! @brief Call xrCreatePassthroughFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreatePassthroughFB(XrSession session,
                                                   const XrPassthroughCreateInfoFB* createInfo,
                                                   XrPassthroughFB* outPassthrough) {
    XrResult result = populate_("xrCreatePassthroughFB", pfnCreatePassthroughFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreatePassthroughFB>(pfnCreatePassthroughFB))(
        session, createInfo, outPassthrough);
  }

  //! @brief Call xrCreatePassthroughFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreatePassthroughFB(XrSession session,
                                                   const XrPassthroughCreateInfoFB* createInfo,
                                                   XrPassthroughFB* outPassthrough) const {
    return (reinterpret_cast<PFN_xrCreatePassthroughFB>(pfnCreatePassthroughFB))(
        session, createInfo, outPassthrough);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrDestroyPassthroughFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyPassthroughFB(XrPassthroughFB passthrough) {
    XrResult result = populate_("xrDestroyPassthroughFB", pfnDestroyPassthroughFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyPassthroughFB>(pfnDestroyPassthroughFB))(passthrough);
  }

  //! @brief Call xrDestroyPassthroughFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyPassthroughFB(XrPassthroughFB passthrough) const {
    return (reinterpret_cast<PFN_xrDestroyPassthroughFB>(pfnDestroyPassthroughFB))(passthrough);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrPassthroughStartFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPassthroughStartFB(XrPassthroughFB passthrough) {
    XrResult result = populate_("xrPassthroughStartFB", pfnPassthroughStartFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPassthroughStartFB>(pfnPassthroughStartFB))(passthrough);
  }

  //! @brief Call xrPassthroughStartFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPassthroughStartFB(XrPassthroughFB passthrough) const {
    return (reinterpret_cast<PFN_xrPassthroughStartFB>(pfnPassthroughStartFB))(passthrough);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrPassthroughPauseFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPassthroughPauseFB(XrPassthroughFB passthrough) {
    XrResult result = populate_("xrPassthroughPauseFB", pfnPassthroughPauseFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPassthroughPauseFB>(pfnPassthroughPauseFB))(passthrough);
  }

  //! @brief Call xrPassthroughPauseFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPassthroughPauseFB(XrPassthroughFB passthrough) const {
    return (reinterpret_cast<PFN_xrPassthroughPauseFB>(pfnPassthroughPauseFB))(passthrough);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrCreatePassthroughLayerFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreatePassthroughLayerFB(XrSession session, const XrPassthroughLayerCreateInfoFB* createInfo,
                             XrPassthroughLayerFB* outLayer) {
    XrResult result = populate_("xrCreatePassthroughLayerFB", pfnCreatePassthroughLayerFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreatePassthroughLayerFB>(pfnCreatePassthroughLayerFB))(
        session, createInfo, outLayer);
  }

  //! @brief Call xrCreatePassthroughLayerFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreatePassthroughLayerFB(XrSession session, const XrPassthroughLayerCreateInfoFB* createInfo,
                             XrPassthroughLayerFB* outLayer) const {
    return (reinterpret_cast<PFN_xrCreatePassthroughLayerFB>(pfnCreatePassthroughLayerFB))(
        session, createInfo, outLayer);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrDestroyPassthroughLayerFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyPassthroughLayerFB(XrPassthroughLayerFB layer) {
    XrResult result = populate_("xrDestroyPassthroughLayerFB", pfnDestroyPassthroughLayerFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyPassthroughLayerFB>(pfnDestroyPassthroughLayerFB))(layer);
  }

  //! @brief Call xrDestroyPassthroughLayerFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyPassthroughLayerFB(XrPassthroughLayerFB layer) const {
    return (reinterpret_cast<PFN_xrDestroyPassthroughLayerFB>(pfnDestroyPassthroughLayerFB))(layer);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrPassthroughLayerPauseFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerPauseFB(XrPassthroughLayerFB layer) {
    XrResult result = populate_("xrPassthroughLayerPauseFB", pfnPassthroughLayerPauseFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerPauseFB>(pfnPassthroughLayerPauseFB))(layer);
  }

  //! @brief Call xrPassthroughLayerPauseFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerPauseFB(XrPassthroughLayerFB layer) const {
    return (reinterpret_cast<PFN_xrPassthroughLayerPauseFB>(pfnPassthroughLayerPauseFB))(layer);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrPassthroughLayerResumeFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerResumeFB(XrPassthroughLayerFB layer) {
    XrResult result = populate_("xrPassthroughLayerResumeFB", pfnPassthroughLayerResumeFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerResumeFB>(pfnPassthroughLayerResumeFB))(layer);
  }

  //! @brief Call xrPassthroughLayerResumeFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerResumeFB(XrPassthroughLayerFB layer) const {
    return (reinterpret_cast<PFN_xrPassthroughLayerResumeFB>(pfnPassthroughLayerResumeFB))(layer);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrPassthroughLayerSetStyleFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerSetStyleFB(XrPassthroughLayerFB layer,
                                                          const XrPassthroughStyleFB* style) {
    XrResult result = populate_("xrPassthroughLayerSetStyleFB", pfnPassthroughLayerSetStyleFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerSetStyleFB>(pfnPassthroughLayerSetStyleFB))(
        layer, style);
  }

  //! @brief Call xrPassthroughLayerSetStyleFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerSetStyleFB(XrPassthroughLayerFB layer,
                                                          const XrPassthroughStyleFB* style) const {
    return (reinterpret_cast<PFN_xrPassthroughLayerSetStyleFB>(pfnPassthroughLayerSetStyleFB))(
        layer, style);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrCreateGeometryInstanceFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateGeometryInstanceFB(XrSession session, const XrGeometryInstanceCreateInfoFB* createInfo,
                             XrGeometryInstanceFB* outGeometryInstance) {
    XrResult result = populate_("xrCreateGeometryInstanceFB", pfnCreateGeometryInstanceFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateGeometryInstanceFB>(pfnCreateGeometryInstanceFB))(
        session, createInfo, outGeometryInstance);
  }

  //! @brief Call xrCreateGeometryInstanceFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateGeometryInstanceFB(XrSession session, const XrGeometryInstanceCreateInfoFB* createInfo,
                             XrGeometryInstanceFB* outGeometryInstance) const {
    return (reinterpret_cast<PFN_xrCreateGeometryInstanceFB>(pfnCreateGeometryInstanceFB))(
        session, createInfo, outGeometryInstance);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrDestroyGeometryInstanceFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyGeometryInstanceFB(XrGeometryInstanceFB instance) {
    XrResult result = populate_("xrDestroyGeometryInstanceFB", pfnDestroyGeometryInstanceFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyGeometryInstanceFB>(pfnDestroyGeometryInstanceFB))(
        instance);
  }

  //! @brief Call xrDestroyGeometryInstanceFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyGeometryInstanceFB(XrGeometryInstanceFB instance) const {
    return (reinterpret_cast<PFN_xrDestroyGeometryInstanceFB>(pfnDestroyGeometryInstanceFB))(
        instance);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_passthrough
  //! @brief Call xrGeometryInstanceSetTransformFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGeometryInstanceSetTransformFB(
      XrGeometryInstanceFB instance, const XrGeometryInstanceTransformFB* transformation) {
    XrResult result =
        populate_("xrGeometryInstanceSetTransformFB", pfnGeometryInstanceSetTransformFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGeometryInstanceSetTransformFB>(
        pfnGeometryInstanceSetTransformFB))(instance, transformation);
  }

  //! @brief Call xrGeometryInstanceSetTransformFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGeometryInstanceSetTransformFB(
      XrGeometryInstanceFB instance, const XrGeometryInstanceTransformFB* transformation) const {
    return (reinterpret_cast<PFN_xrGeometryInstanceSetTransformFB>(
        pfnGeometryInstanceSetTransformFB))(instance, transformation);
  }
#endif  // XR_FB_passthrough
#ifdef XR_FB_render_model
  //! @brief Call xrEnumerateRenderModelPathsFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateRenderModelPathsFB(XrSession session,
                                                           uint32_t pathCapacityInput,
                                                           uint32_t* pathCountOutput,
                                                           XrRenderModelPathInfoFB* paths) {
    XrResult result = populate_("xrEnumerateRenderModelPathsFB", pfnEnumerateRenderModelPathsFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateRenderModelPathsFB>(pfnEnumerateRenderModelPathsFB))(
        session, pathCapacityInput, pathCountOutput, paths);
  }

  //! @brief Call xrEnumerateRenderModelPathsFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateRenderModelPathsFB(XrSession session,
                                                           uint32_t pathCapacityInput,
                                                           uint32_t* pathCountOutput,
                                                           XrRenderModelPathInfoFB* paths) const {
    return (reinterpret_cast<PFN_xrEnumerateRenderModelPathsFB>(pfnEnumerateRenderModelPathsFB))(
        session, pathCapacityInput, pathCountOutput, paths);
  }
#endif  // XR_FB_render_model
#ifdef XR_FB_render_model
  //! @brief Call xrGetRenderModelPropertiesFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetRenderModelPropertiesFB(XrSession session, XrPath path,
                                                          XrRenderModelPropertiesFB* properties) {
    XrResult result = populate_("xrGetRenderModelPropertiesFB", pfnGetRenderModelPropertiesFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelPropertiesFB>(pfnGetRenderModelPropertiesFB))(
        session, path, properties);
  }

  //! @brief Call xrGetRenderModelPropertiesFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetRenderModelPropertiesFB(
      XrSession session, XrPath path, XrRenderModelPropertiesFB* properties) const {
    return (reinterpret_cast<PFN_xrGetRenderModelPropertiesFB>(pfnGetRenderModelPropertiesFB))(
        session, path, properties);
  }
#endif  // XR_FB_render_model
#ifdef XR_FB_render_model
  //! @brief Call xrLoadRenderModelFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLoadRenderModelFB(XrSession session,
                                                 const XrRenderModelLoadInfoFB* info,
                                                 XrRenderModelBufferFB* buffer) {
    XrResult result = populate_("xrLoadRenderModelFB", pfnLoadRenderModelFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLoadRenderModelFB>(pfnLoadRenderModelFB))(session, info, buffer);
  }

  //! @brief Call xrLoadRenderModelFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLoadRenderModelFB(XrSession session,
                                                 const XrRenderModelLoadInfoFB* info,
                                                 XrRenderModelBufferFB* buffer) const {
    return (reinterpret_cast<PFN_xrLoadRenderModelFB>(pfnLoadRenderModelFB))(session, info, buffer);
  }
#endif  // XR_FB_render_model
#ifdef XR_VARJO_environment_depth_estimation
  //! @brief Call xrSetEnvironmentDepthEstimationVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetEnvironmentDepthEstimationVARJO(XrSession session,
                                                                  XrBool32 enabled) {
    XrResult result =
        populate_("xrSetEnvironmentDepthEstimationVARJO", pfnSetEnvironmentDepthEstimationVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetEnvironmentDepthEstimationVARJO>(
        pfnSetEnvironmentDepthEstimationVARJO))(session, enabled);
  }

  //! @brief Call xrSetEnvironmentDepthEstimationVARJO (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetEnvironmentDepthEstimationVARJO(XrSession session,
                                                                  XrBool32 enabled) const {
    return (reinterpret_cast<PFN_xrSetEnvironmentDepthEstimationVARJO>(
        pfnSetEnvironmentDepthEstimationVARJO))(session, enabled);
  }
#endif  // XR_VARJO_environment_depth_estimation
#ifdef XR_VARJO_marker_tracking
  //! @brief Call xrSetMarkerTrackingVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetMarkerTrackingVARJO(XrSession session, XrBool32 enabled) {
    XrResult result = populate_("xrSetMarkerTrackingVARJO", pfnSetMarkerTrackingVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetMarkerTrackingVARJO>(pfnSetMarkerTrackingVARJO))(session,
                                                                                       enabled);
  }

  //! @brief Call xrSetMarkerTrackingVARJO (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetMarkerTrackingVARJO(XrSession session, XrBool32 enabled) const {
    return (reinterpret_cast<PFN_xrSetMarkerTrackingVARJO>(pfnSetMarkerTrackingVARJO))(session,
                                                                                       enabled);
  }
#endif  // XR_VARJO_marker_tracking
#ifdef XR_VARJO_marker_tracking
  //! @brief Call xrSetMarkerTrackingTimeoutVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetMarkerTrackingTimeoutVARJO(XrSession session, uint64_t markerId,
                                                             XrDuration timeout) {
    XrResult result =
        populate_("xrSetMarkerTrackingTimeoutVARJO", pfnSetMarkerTrackingTimeoutVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetMarkerTrackingTimeoutVARJO>(
        pfnSetMarkerTrackingTimeoutVARJO))(session, markerId, timeout);
  }

  //! @brief Call xrSetMarkerTrackingTimeoutVARJO (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetMarkerTrackingTimeoutVARJO(XrSession session, uint64_t markerId,
                                                             XrDuration timeout) const {
    return (reinterpret_cast<PFN_xrSetMarkerTrackingTimeoutVARJO>(
        pfnSetMarkerTrackingTimeoutVARJO))(session, markerId, timeout);
  }
#endif  // XR_VARJO_marker_tracking
#ifdef XR_VARJO_marker_tracking
  //! @brief Call xrSetMarkerTrackingPredictionVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetMarkerTrackingPredictionVARJO(XrSession session,
                                                                uint64_t markerId,
                                                                XrBool32 enable) {
    XrResult result =
        populate_("xrSetMarkerTrackingPredictionVARJO", pfnSetMarkerTrackingPredictionVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetMarkerTrackingPredictionVARJO>(
        pfnSetMarkerTrackingPredictionVARJO))(session, markerId, enable);
  }

  //! @brief Call xrSetMarkerTrackingPredictionVARJO (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetMarkerTrackingPredictionVARJO(XrSession session,
                                                                uint64_t markerId,
                                                                XrBool32 enable) const {
    return (reinterpret_cast<PFN_xrSetMarkerTrackingPredictionVARJO>(
        pfnSetMarkerTrackingPredictionVARJO))(session, markerId, enable);
  }
#endif  // XR_VARJO_marker_tracking
#ifdef XR_VARJO_marker_tracking
  //! @brief Call xrGetMarkerSizeVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetMarkerSizeVARJO(XrSession session, uint64_t markerId,
                                                  XrExtent2Df* size) {
    XrResult result = populate_("xrGetMarkerSizeVARJO", pfnGetMarkerSizeVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetMarkerSizeVARJO>(pfnGetMarkerSizeVARJO))(session, markerId,
                                                                               size);
  }

  //! @brief Call xrGetMarkerSizeVARJO (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetMarkerSizeVARJO(XrSession session, uint64_t markerId,
                                                  XrExtent2Df* size) const {
    return (reinterpret_cast<PFN_xrGetMarkerSizeVARJO>(pfnGetMarkerSizeVARJO))(session, markerId,
                                                                               size);
  }
#endif  // XR_VARJO_marker_tracking
#ifdef XR_VARJO_marker_tracking
  //! @brief Call xrCreateMarkerSpaceVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateMarkerSpaceVARJO(
      XrSession session, const XrMarkerSpaceCreateInfoVARJO* createInfo, XrSpace* space) {
    XrResult result = populate_("xrCreateMarkerSpaceVARJO", pfnCreateMarkerSpaceVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateMarkerSpaceVARJO>(pfnCreateMarkerSpaceVARJO))(
        session, createInfo, space);
  }

  //! @brief Call xrCreateMarkerSpaceVARJO (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateMarkerSpaceVARJO(
      XrSession session, const XrMarkerSpaceCreateInfoVARJO* createInfo, XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateMarkerSpaceVARJO>(pfnCreateMarkerSpaceVARJO))(
        session, createInfo, space);
  }
#endif  // XR_VARJO_marker_tracking
#ifdef XR_VARJO_view_offset
  //! @brief Call xrSetViewOffsetVARJO, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetViewOffsetVARJO(XrSession session, float offset) {
    XrResult result = populate_("xrSetViewOffsetVARJO", pfnSetViewOffsetVARJO);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetViewOffsetVARJO>(pfnSetViewOffsetVARJO))(session, offset);
  }

  //! @brief Call xrSetViewOffsetVARJO (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetViewOffsetVARJO(XrSession session, float offset) const {
    return (reinterpret_cast<PFN_xrSetViewOffsetVARJO>(pfnSetViewOffsetVARJO))(session, offset);
  }
#endif  // XR_VARJO_view_offset
#ifdef XR_ML_compat
#if defined(XR_USE_PLATFORM_ML)
  //! @brief Call xrCreateSpaceFromCoordinateFrameUIDML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpaceFromCoordinateFrameUIDML(
      XrSession session, const XrCoordinateSpaceCreateInfoML* createInfo, XrSpace* space) {
    XrResult result =
        populate_("xrCreateSpaceFromCoordinateFrameUIDML", pfnCreateSpaceFromCoordinateFrameUIDML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpaceFromCoordinateFrameUIDML>(
        pfnCreateSpaceFromCoordinateFrameUIDML))(session, createInfo, space);
  }

  //! @brief Call xrCreateSpaceFromCoordinateFrameUIDML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpaceFromCoordinateFrameUIDML(
      XrSession session, const XrCoordinateSpaceCreateInfoML* createInfo, XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateSpaceFromCoordinateFrameUIDML>(
        pfnCreateSpaceFromCoordinateFrameUIDML))(session, createInfo, space);
  }
#endif  // defined(XR_USE_PLATFORM_ML)
#endif  // XR_ML_compat
#ifdef XR_ML_marker_understanding
  //! @brief Call xrCreateMarkerDetectorML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateMarkerDetectorML(XrSession session, const XrMarkerDetectorCreateInfoML* createInfo,
                           XrMarkerDetectorML* markerDetector) {
    XrResult result = populate_("xrCreateMarkerDetectorML", pfnCreateMarkerDetectorML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateMarkerDetectorML>(pfnCreateMarkerDetectorML))(
        session, createInfo, markerDetector);
  }

  //! @brief Call xrCreateMarkerDetectorML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateMarkerDetectorML(XrSession session, const XrMarkerDetectorCreateInfoML* createInfo,
                           XrMarkerDetectorML* markerDetector) const {
    return (reinterpret_cast<PFN_xrCreateMarkerDetectorML>(pfnCreateMarkerDetectorML))(
        session, createInfo, markerDetector);
  }
#endif  // XR_ML_marker_understanding
#ifdef XR_ML_marker_understanding
  //! @brief Call xrDestroyMarkerDetectorML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyMarkerDetectorML(XrMarkerDetectorML markerDetector) {
    XrResult result = populate_("xrDestroyMarkerDetectorML", pfnDestroyMarkerDetectorML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyMarkerDetectorML>(pfnDestroyMarkerDetectorML))(
        markerDetector);
  }

  //! @brief Call xrDestroyMarkerDetectorML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyMarkerDetectorML(XrMarkerDetectorML markerDetector) const {
    return (reinterpret_cast<PFN_xrDestroyMarkerDetectorML>(pfnDestroyMarkerDetectorML))(
        markerDetector);
  }
#endif  // XR_ML_marker_understanding
#ifdef XR_ML_marker_understanding
  //! @brief Call xrSnapshotMarkerDetectorML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSnapshotMarkerDetectorML(
      XrMarkerDetectorML markerDetector, XrMarkerDetectorSnapshotInfoML* snapshotInfo) {
    XrResult result = populate_("xrSnapshotMarkerDetectorML", pfnSnapshotMarkerDetectorML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSnapshotMarkerDetectorML>(pfnSnapshotMarkerDetectorML))(
        markerDetector, snapshotInfo);
  }

  //! @brief Call xrSnapshotMarkerDetectorML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSnapshotMarkerDetectorML(
      XrMarkerDetectorML markerDetector, XrMarkerDetectorSnapshotInfoML* snapshotInfo) const {
    return (reinterpret_cast<PFN_xrSnapshotMarkerDetectorML>(pfnSnapshotMarkerDetectorML))(
        markerDetector, snapshotInfo);
  }
#endif  // XR_ML_marker_understanding
#ifdef XR_ML_marker_understanding
  //! @brief Call xrGetMarkerDetectorStateML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetMarkerDetectorStateML(XrMarkerDetectorML markerDetector,
                                                        XrMarkerDetectorStateML* state) {
    XrResult result = populate_("xrGetMarkerDetectorStateML", pfnGetMarkerDetectorStateML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetMarkerDetectorStateML>(pfnGetMarkerDetectorStateML))(
        markerDetector, state);
  }

  //! @brief Call xrGetMarkerDetectorStateML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetMarkerDetectorStateML(XrMarkerDetectorML markerDetector,
                                                        XrMarkerDetectorStateML* state) const {
    return (reinterpret_cast<PFN_xrGetMarkerDetectorStateML>(pfnGetMarkerDetectorStateML))(
        markerDetector, state);
  }
#endif  // XR_ML_marker_understanding
#ifdef XR_ML_marker_understanding
  //! @brief Call xrGetMarkersML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetMarkersML(XrMarkerDetectorML markerDetector,
                                            uint32_t markerCapacityInput,
                                            uint32_t* markerCountOutput, XrMarkerML* markers) {
    XrResult result = populate_("xrGetMarkersML", pfnGetMarkersML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetMarkersML>(pfnGetMarkersML))(
        markerDetector, markerCapacityInput, markerCountOutput, markers);
  }

  //! @brief Call xrGetMarkersML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetMarkersML(XrMarkerDetectorML markerDetector,
                                            uint32_t markerCapacityInput,
                                            uint32_t* markerCountOutput,
                                            XrMarkerML* markers) const {
    return (reinterpret_cast<PFN_xrGetMarkersML>(pfnGetMarkersML))(
        markerDetector, markerCapacityInput, markerCountOutput, markers);
  }
#endif  // XR_ML_marker_understanding
#ifdef XR_ML_marker_understanding
  //! @brief Call xrGetMarkerReprojectionErrorML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetMarkerReprojectionErrorML(XrMarkerDetectorML markerDetector,
                                                            XrMarkerML marker,
                                                            float* reprojectionErrorMeters) {
    XrResult result = populate_("xrGetMarkerReprojectionErrorML", pfnGetMarkerReprojectionErrorML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetMarkerReprojectionErrorML>(pfnGetMarkerReprojectionErrorML))(
        markerDetector, marker, reprojectionErrorMeters);
  }

  //! @brief Call xrGetMarkerReprojectionErrorML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetMarkerReprojectionErrorML(XrMarkerDetectorML markerDetector,
                                                            XrMarkerML marker,
                                                            float* reprojectionErrorMeters) const {
    return (reinterpret_cast<PFN_xrGetMarkerReprojectionErrorML>(pfnGetMarkerReprojectionErrorML))(
        markerDetector, marker, reprojectionErrorMeters);
  }
#endif  // XR_ML_marker_understanding
#ifdef XR_ML_marker_understanding
  //! @brief Call xrGetMarkerLengthML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetMarkerLengthML(XrMarkerDetectorML markerDetector,
                                                 XrMarkerML marker, float* meters) {
    XrResult result = populate_("xrGetMarkerLengthML", pfnGetMarkerLengthML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetMarkerLengthML>(pfnGetMarkerLengthML))(markerDetector, marker,
                                                                             meters);
  }

  //! @brief Call xrGetMarkerLengthML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetMarkerLengthML(XrMarkerDetectorML markerDetector,
                                                 XrMarkerML marker, float* meters) const {
    return (reinterpret_cast<PFN_xrGetMarkerLengthML>(pfnGetMarkerLengthML))(markerDetector, marker,
                                                                             meters);
  }
#endif  // XR_ML_marker_understanding
#ifdef XR_ML_marker_understanding
  //! @brief Call xrGetMarkerNumberML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetMarkerNumberML(XrMarkerDetectorML markerDetector,
                                                 XrMarkerML marker, uint64_t* number) {
    XrResult result = populate_("xrGetMarkerNumberML", pfnGetMarkerNumberML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetMarkerNumberML>(pfnGetMarkerNumberML))(markerDetector, marker,
                                                                             number);
  }

  //! @brief Call xrGetMarkerNumberML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetMarkerNumberML(XrMarkerDetectorML markerDetector,
                                                 XrMarkerML marker, uint64_t* number) const {
    return (reinterpret_cast<PFN_xrGetMarkerNumberML>(pfnGetMarkerNumberML))(markerDetector, marker,
                                                                             number);
  }
#endif  // XR_ML_marker_understanding
#ifdef XR_ML_marker_understanding
  //! @brief Call xrGetMarkerStringML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetMarkerStringML(XrMarkerDetectorML markerDetector,
                                                 XrMarkerML marker, uint32_t bufferCapacityInput,
                                                 uint32_t* bufferCountOutput, char* buffer) {
    XrResult result = populate_("xrGetMarkerStringML", pfnGetMarkerStringML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetMarkerStringML>(pfnGetMarkerStringML))(
        markerDetector, marker, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetMarkerStringML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetMarkerStringML(XrMarkerDetectorML markerDetector,
                                                 XrMarkerML marker, uint32_t bufferCapacityInput,
                                                 uint32_t* bufferCountOutput, char* buffer) const {
    return (reinterpret_cast<PFN_xrGetMarkerStringML>(pfnGetMarkerStringML))(
        markerDetector, marker, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // XR_ML_marker_understanding
#ifdef XR_ML_marker_understanding
  //! @brief Call xrCreateMarkerSpaceML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateMarkerSpaceML(XrSession session,
                                                   const XrMarkerSpaceCreateInfoML* createInfo,
                                                   XrSpace* space) {
    XrResult result = populate_("xrCreateMarkerSpaceML", pfnCreateMarkerSpaceML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateMarkerSpaceML>(pfnCreateMarkerSpaceML))(session,
                                                                                 createInfo, space);
  }

  //! @brief Call xrCreateMarkerSpaceML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateMarkerSpaceML(XrSession session,
                                                   const XrMarkerSpaceCreateInfoML* createInfo,
                                                   XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateMarkerSpaceML>(pfnCreateMarkerSpaceML))(session,
                                                                                 createInfo, space);
  }
#endif  // XR_ML_marker_understanding
#ifdef XR_ML_localization_map
  //! @brief Call xrEnableLocalizationEventsML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrEnableLocalizationEventsML(XrSession session, const XrLocalizationEnableEventsInfoML* info) {
    XrResult result = populate_("xrEnableLocalizationEventsML", pfnEnableLocalizationEventsML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnableLocalizationEventsML>(pfnEnableLocalizationEventsML))(
        session, info);
  }

  //! @brief Call xrEnableLocalizationEventsML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEnableLocalizationEventsML(
      XrSession session, const XrLocalizationEnableEventsInfoML* info) const {
    return (reinterpret_cast<PFN_xrEnableLocalizationEventsML>(pfnEnableLocalizationEventsML))(
        session, info);
  }
#endif  // XR_ML_localization_map
#ifdef XR_ML_localization_map
  //! @brief Call xrQueryLocalizationMapsML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrQueryLocalizationMapsML(
      XrSession session, const XrLocalizationMapQueryInfoBaseHeaderML* queryInfo,
      uint32_t mapCapacityInput, uint32_t* mapCountOutput, XrLocalizationMapML* maps) {
    XrResult result = populate_("xrQueryLocalizationMapsML", pfnQueryLocalizationMapsML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrQueryLocalizationMapsML>(pfnQueryLocalizationMapsML))(
        session, queryInfo, mapCapacityInput, mapCountOutput, maps);
  }

  //! @brief Call xrQueryLocalizationMapsML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrQueryLocalizationMapsML(
      XrSession session, const XrLocalizationMapQueryInfoBaseHeaderML* queryInfo,
      uint32_t mapCapacityInput, uint32_t* mapCountOutput, XrLocalizationMapML* maps) const {
    return (reinterpret_cast<PFN_xrQueryLocalizationMapsML>(pfnQueryLocalizationMapsML))(
        session, queryInfo, mapCapacityInput, mapCountOutput, maps);
  }
#endif  // XR_ML_localization_map
#ifdef XR_ML_localization_map
  //! @brief Call xrRequestMapLocalizationML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrRequestMapLocalizationML(XrSession session, const XrMapLocalizationRequestInfoML* requestInfo) {
    XrResult result = populate_("xrRequestMapLocalizationML", pfnRequestMapLocalizationML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrRequestMapLocalizationML>(pfnRequestMapLocalizationML))(
        session, requestInfo);
  }

  //! @brief Call xrRequestMapLocalizationML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrRequestMapLocalizationML(
      XrSession session, const XrMapLocalizationRequestInfoML* requestInfo) const {
    return (reinterpret_cast<PFN_xrRequestMapLocalizationML>(pfnRequestMapLocalizationML))(
        session, requestInfo);
  }
#endif  // XR_ML_localization_map
#ifdef XR_ML_localization_map
  //! @brief Call xrImportLocalizationMapML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrImportLocalizationMapML(
      XrSession session, const XrLocalizationMapImportInfoML* importInfo, XrUuidEXT* mapUuid) {
    XrResult result = populate_("xrImportLocalizationMapML", pfnImportLocalizationMapML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrImportLocalizationMapML>(pfnImportLocalizationMapML))(
        session, importInfo, mapUuid);
  }

  //! @brief Call xrImportLocalizationMapML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrImportLocalizationMapML(XrSession session, const XrLocalizationMapImportInfoML* importInfo,
                            XrUuidEXT* mapUuid) const {
    return (reinterpret_cast<PFN_xrImportLocalizationMapML>(pfnImportLocalizationMapML))(
        session, importInfo, mapUuid);
  }
#endif  // XR_ML_localization_map
#ifdef XR_ML_localization_map
  //! @brief Call xrCreateExportedLocalizationMapML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateExportedLocalizationMapML(XrSession session,
                                                               const XrUuidEXT* mapUuid,
                                                               XrExportedLocalizationMapML* map) {
    XrResult result =
        populate_("xrCreateExportedLocalizationMapML", pfnCreateExportedLocalizationMapML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateExportedLocalizationMapML>(
        pfnCreateExportedLocalizationMapML))(session, mapUuid, map);
  }

  //! @brief Call xrCreateExportedLocalizationMapML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateExportedLocalizationMapML(
      XrSession session, const XrUuidEXT* mapUuid, XrExportedLocalizationMapML* map) const {
    return (reinterpret_cast<PFN_xrCreateExportedLocalizationMapML>(
        pfnCreateExportedLocalizationMapML))(session, mapUuid, map);
  }
#endif  // XR_ML_localization_map
#ifdef XR_ML_localization_map
  //! @brief Call xrDestroyExportedLocalizationMapML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyExportedLocalizationMapML(XrExportedLocalizationMapML map) {
    XrResult result =
        populate_("xrDestroyExportedLocalizationMapML", pfnDestroyExportedLocalizationMapML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyExportedLocalizationMapML>(
        pfnDestroyExportedLocalizationMapML))(map);
  }

  //! @brief Call xrDestroyExportedLocalizationMapML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrDestroyExportedLocalizationMapML(XrExportedLocalizationMapML map) const {
    return (reinterpret_cast<PFN_xrDestroyExportedLocalizationMapML>(
        pfnDestroyExportedLocalizationMapML))(map);
  }
#endif  // XR_ML_localization_map
#ifdef XR_ML_localization_map
  //! @brief Call xrGetExportedLocalizationMapDataML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetExportedLocalizationMapDataML(XrExportedLocalizationMapML map,
                                                                uint32_t bufferCapacityInput,
                                                                uint32_t* bufferCountOutput,
                                                                char* buffer) {
    XrResult result =
        populate_("xrGetExportedLocalizationMapDataML", pfnGetExportedLocalizationMapDataML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetExportedLocalizationMapDataML>(
        pfnGetExportedLocalizationMapDataML))(map, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetExportedLocalizationMapDataML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetExportedLocalizationMapDataML(XrExportedLocalizationMapML map,
                                                                uint32_t bufferCapacityInput,
                                                                uint32_t* bufferCountOutput,
                                                                char* buffer) const {
    return (reinterpret_cast<PFN_xrGetExportedLocalizationMapDataML>(
        pfnGetExportedLocalizationMapDataML))(map, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // XR_ML_localization_map
#ifdef XR_ML_spatial_anchors
  //! @brief Call xrCreateSpatialAnchorsAsyncML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorsAsyncML(
      XrSession session, const XrSpatialAnchorsCreateInfoBaseHeaderML* createInfo,
      XrFutureEXT* future) {
    XrResult result = populate_("xrCreateSpatialAnchorsAsyncML", pfnCreateSpatialAnchorsAsyncML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorsAsyncML>(pfnCreateSpatialAnchorsAsyncML))(
        session, createInfo, future);
  }

  //! @brief Call xrCreateSpatialAnchorsAsyncML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorsAsyncML(
      XrSession session, const XrSpatialAnchorsCreateInfoBaseHeaderML* createInfo,
      XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorsAsyncML>(pfnCreateSpatialAnchorsAsyncML))(
        session, createInfo, future);
  }
#endif  // XR_ML_spatial_anchors
#ifdef XR_ML_spatial_anchors
  //! @brief Call xrCreateSpatialAnchorsCompleteML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorsCompleteML(
      XrSession session, XrFutureEXT future, XrCreateSpatialAnchorsCompletionML* completion) {
    XrResult result =
        populate_("xrCreateSpatialAnchorsCompleteML", pfnCreateSpatialAnchorsCompleteML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorsCompleteML>(
        pfnCreateSpatialAnchorsCompleteML))(session, future, completion);
  }

  //! @brief Call xrCreateSpatialAnchorsCompleteML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorsCompleteML(
      XrSession session, XrFutureEXT future, XrCreateSpatialAnchorsCompletionML* completion) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorsCompleteML>(
        pfnCreateSpatialAnchorsCompleteML))(session, future, completion);
  }
#endif  // XR_ML_spatial_anchors
#ifdef XR_ML_spatial_anchors
  //! @brief Call xrGetSpatialAnchorStateML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpatialAnchorStateML(XrSpace anchor,
                                                       XrSpatialAnchorStateML* state) {
    XrResult result = populate_("xrGetSpatialAnchorStateML", pfnGetSpatialAnchorStateML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpatialAnchorStateML>(pfnGetSpatialAnchorStateML))(anchor,
                                                                                         state);
  }

  //! @brief Call xrGetSpatialAnchorStateML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpatialAnchorStateML(XrSpace anchor,
                                                       XrSpatialAnchorStateML* state) const {
    return (reinterpret_cast<PFN_xrGetSpatialAnchorStateML>(pfnGetSpatialAnchorStateML))(anchor,
                                                                                         state);
  }
#endif  // XR_ML_spatial_anchors
#ifdef XR_ML_spatial_anchors_storage
  //! @brief Call xrCreateSpatialAnchorsStorageML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorsStorageML(
      XrSession session, const XrSpatialAnchorsCreateStorageInfoML* createInfo,
      XrSpatialAnchorsStorageML* storage) {
    XrResult result =
        populate_("xrCreateSpatialAnchorsStorageML", pfnCreateSpatialAnchorsStorageML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorsStorageML>(
        pfnCreateSpatialAnchorsStorageML))(session, createInfo, storage);
  }

  //! @brief Call xrCreateSpatialAnchorsStorageML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorsStorageML(
      XrSession session, const XrSpatialAnchorsCreateStorageInfoML* createInfo,
      XrSpatialAnchorsStorageML* storage) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorsStorageML>(
        pfnCreateSpatialAnchorsStorageML))(session, createInfo, storage);
  }
#endif  // XR_ML_spatial_anchors_storage
#ifdef XR_ML_spatial_anchors_storage
  //! @brief Call xrDestroySpatialAnchorsStorageML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySpatialAnchorsStorageML(XrSpatialAnchorsStorageML storage) {
    XrResult result =
        populate_("xrDestroySpatialAnchorsStorageML", pfnDestroySpatialAnchorsStorageML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialAnchorsStorageML>(
        pfnDestroySpatialAnchorsStorageML))(storage);
  }

  //! @brief Call xrDestroySpatialAnchorsStorageML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrDestroySpatialAnchorsStorageML(XrSpatialAnchorsStorageML storage) const {
    return (reinterpret_cast<PFN_xrDestroySpatialAnchorsStorageML>(
        pfnDestroySpatialAnchorsStorageML))(storage);
  }
#endif  // XR_ML_spatial_anchors_storage
#ifdef XR_ML_spatial_anchors_storage
  //! @brief Call xrQuerySpatialAnchorsAsyncML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrQuerySpatialAnchorsAsyncML(
      XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsQueryInfoBaseHeaderML* queryInfo,
      XrFutureEXT* future) {
    XrResult result = populate_("xrQuerySpatialAnchorsAsyncML", pfnQuerySpatialAnchorsAsyncML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrQuerySpatialAnchorsAsyncML>(pfnQuerySpatialAnchorsAsyncML))(
        storage, queryInfo, future);
  }

  //! @brief Call xrQuerySpatialAnchorsAsyncML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrQuerySpatialAnchorsAsyncML(
      XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsQueryInfoBaseHeaderML* queryInfo,
      XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrQuerySpatialAnchorsAsyncML>(pfnQuerySpatialAnchorsAsyncML))(
        storage, queryInfo, future);
  }
#endif  // XR_ML_spatial_anchors_storage
#ifdef XR_ML_spatial_anchors_storage
  //! @brief Call xrQuerySpatialAnchorsCompleteML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrQuerySpatialAnchorsCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future,
                                  XrSpatialAnchorsQueryCompletionML* completion) {
    XrResult result =
        populate_("xrQuerySpatialAnchorsCompleteML", pfnQuerySpatialAnchorsCompleteML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrQuerySpatialAnchorsCompleteML>(
        pfnQuerySpatialAnchorsCompleteML))(storage, future, completion);
  }

  //! @brief Call xrQuerySpatialAnchorsCompleteML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrQuerySpatialAnchorsCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future,
                                  XrSpatialAnchorsQueryCompletionML* completion) const {
    return (reinterpret_cast<PFN_xrQuerySpatialAnchorsCompleteML>(
        pfnQuerySpatialAnchorsCompleteML))(storage, future, completion);
  }
#endif  // XR_ML_spatial_anchors_storage
#ifdef XR_ML_spatial_anchors_storage
  //! @brief Call xrPublishSpatialAnchorsAsyncML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPublishSpatialAnchorsAsyncML(
      XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsPublishInfoML* publishInfo,
      XrFutureEXT* future) {
    XrResult result = populate_("xrPublishSpatialAnchorsAsyncML", pfnPublishSpatialAnchorsAsyncML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPublishSpatialAnchorsAsyncML>(pfnPublishSpatialAnchorsAsyncML))(
        storage, publishInfo, future);
  }

  //! @brief Call xrPublishSpatialAnchorsAsyncML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrPublishSpatialAnchorsAsyncML(
      XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsPublishInfoML* publishInfo,
      XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrPublishSpatialAnchorsAsyncML>(pfnPublishSpatialAnchorsAsyncML))(
        storage, publishInfo, future);
  }
#endif  // XR_ML_spatial_anchors_storage
#ifdef XR_ML_spatial_anchors_storage
  //! @brief Call xrPublishSpatialAnchorsCompleteML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrPublishSpatialAnchorsCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future,
                                    XrSpatialAnchorsPublishCompletionML* completion) {
    XrResult result =
        populate_("xrPublishSpatialAnchorsCompleteML", pfnPublishSpatialAnchorsCompleteML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPublishSpatialAnchorsCompleteML>(
        pfnPublishSpatialAnchorsCompleteML))(storage, future, completion);
  }

  //! @brief Call xrPublishSpatialAnchorsCompleteML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrPublishSpatialAnchorsCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future,
                                    XrSpatialAnchorsPublishCompletionML* completion) const {
    return (reinterpret_cast<PFN_xrPublishSpatialAnchorsCompleteML>(
        pfnPublishSpatialAnchorsCompleteML))(storage, future, completion);
  }
#endif  // XR_ML_spatial_anchors_storage
#ifdef XR_ML_spatial_anchors_storage
  //! @brief Call xrDeleteSpatialAnchorsAsyncML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDeleteSpatialAnchorsAsyncML(
      XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsDeleteInfoML* deleteInfo,
      XrFutureEXT* future) {
    XrResult result = populate_("xrDeleteSpatialAnchorsAsyncML", pfnDeleteSpatialAnchorsAsyncML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDeleteSpatialAnchorsAsyncML>(pfnDeleteSpatialAnchorsAsyncML))(
        storage, deleteInfo, future);
  }

  //! @brief Call xrDeleteSpatialAnchorsAsyncML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrDeleteSpatialAnchorsAsyncML(
      XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsDeleteInfoML* deleteInfo,
      XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrDeleteSpatialAnchorsAsyncML>(pfnDeleteSpatialAnchorsAsyncML))(
        storage, deleteInfo, future);
  }
#endif  // XR_ML_spatial_anchors_storage
#ifdef XR_ML_spatial_anchors_storage
  //! @brief Call xrDeleteSpatialAnchorsCompleteML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrDeleteSpatialAnchorsCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future,
                                   XrSpatialAnchorsDeleteCompletionML* completion) {
    XrResult result =
        populate_("xrDeleteSpatialAnchorsCompleteML", pfnDeleteSpatialAnchorsCompleteML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDeleteSpatialAnchorsCompleteML>(
        pfnDeleteSpatialAnchorsCompleteML))(storage, future, completion);
  }

  //! @brief Call xrDeleteSpatialAnchorsCompleteML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrDeleteSpatialAnchorsCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future,
                                   XrSpatialAnchorsDeleteCompletionML* completion) const {
    return (reinterpret_cast<PFN_xrDeleteSpatialAnchorsCompleteML>(
        pfnDeleteSpatialAnchorsCompleteML))(storage, future, completion);
  }
#endif  // XR_ML_spatial_anchors_storage
#ifdef XR_ML_spatial_anchors_storage
  //! @brief Call xrUpdateSpatialAnchorsExpirationAsyncML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrUpdateSpatialAnchorsExpirationAsyncML(
      XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsUpdateExpirationInfoML* updateInfo,
      XrFutureEXT* future) {
    XrResult result = populate_("xrUpdateSpatialAnchorsExpirationAsyncML",
                                pfnUpdateSpatialAnchorsExpirationAsyncML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUpdateSpatialAnchorsExpirationAsyncML>(
        pfnUpdateSpatialAnchorsExpirationAsyncML))(storage, updateInfo, future);
  }

  //! @brief Call xrUpdateSpatialAnchorsExpirationAsyncML (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrUpdateSpatialAnchorsExpirationAsyncML(
      XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsUpdateExpirationInfoML* updateInfo,
      XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrUpdateSpatialAnchorsExpirationAsyncML>(
        pfnUpdateSpatialAnchorsExpirationAsyncML))(storage, updateInfo, future);
  }
#endif  // XR_ML_spatial_anchors_storage
#ifdef XR_ML_spatial_anchors_storage
  //! @brief Call xrUpdateSpatialAnchorsExpirationCompleteML, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrUpdateSpatialAnchorsExpirationCompleteML(
      XrSpatialAnchorsStorageML storage, XrFutureEXT future,
      XrSpatialAnchorsUpdateExpirationCompletionML* completion) {
    XrResult result = populate_("xrUpdateSpatialAnchorsExpirationCompleteML",
                                pfnUpdateSpatialAnchorsExpirationCompleteML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUpdateSpatialAnchorsExpirationCompleteML>(
        pfnUpdateSpatialAnchorsExpirationCompleteML))(storage, future, completion);
  }

  //! @brief Call xrUpdateSpatialAnchorsExpirationCompleteML (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrUpdateSpatialAnchorsExpirationCompleteML(
      XrSpatialAnchorsStorageML storage, XrFutureEXT future,
      XrSpatialAnchorsUpdateExpirationCompletionML* completion) const {
    return (reinterpret_cast<PFN_xrUpdateSpatialAnchorsExpirationCompleteML>(
        pfnUpdateSpatialAnchorsExpirationCompleteML))(storage, future, completion);
  }
#endif  // XR_ML_spatial_anchors_storage
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrCreateSpatialAnchorStoreConnectionMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorStoreConnectionMSFT(
      XrSession session, XrSpatialAnchorStoreConnectionMSFT* spatialAnchorStore) {
    XrResult result = populate_("xrCreateSpatialAnchorStoreConnectionMSFT",
                                pfnCreateSpatialAnchorStoreConnectionMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorStoreConnectionMSFT>(
        pfnCreateSpatialAnchorStoreConnectionMSFT))(session, spatialAnchorStore);
  }

  //! @brief Call xrCreateSpatialAnchorStoreConnectionMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorStoreConnectionMSFT(
      XrSession session, XrSpatialAnchorStoreConnectionMSFT* spatialAnchorStore) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorStoreConnectionMSFT>(
        pfnCreateSpatialAnchorStoreConnectionMSFT))(session, spatialAnchorStore);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrDestroySpatialAnchorStoreConnectionMSFT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult
  xrDestroySpatialAnchorStoreConnectionMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore) {
    XrResult result = populate_("xrDestroySpatialAnchorStoreConnectionMSFT",
                                pfnDestroySpatialAnchorStoreConnectionMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialAnchorStoreConnectionMSFT>(
        pfnDestroySpatialAnchorStoreConnectionMSFT))(spatialAnchorStore);
  }

  //! @brief Call xrDestroySpatialAnchorStoreConnectionMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySpatialAnchorStoreConnectionMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore) const {
    return (reinterpret_cast<PFN_xrDestroySpatialAnchorStoreConnectionMSFT>(
        pfnDestroySpatialAnchorStoreConnectionMSFT))(spatialAnchorStore);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrPersistSpatialAnchorMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPersistSpatialAnchorMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore,
      const XrSpatialAnchorPersistenceInfoMSFT* spatialAnchorPersistenceInfo) {
    XrResult result = populate_("xrPersistSpatialAnchorMSFT", pfnPersistSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPersistSpatialAnchorMSFT>(pfnPersistSpatialAnchorMSFT))(
        spatialAnchorStore, spatialAnchorPersistenceInfo);
  }

  //! @brief Call xrPersistSpatialAnchorMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPersistSpatialAnchorMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore,
      const XrSpatialAnchorPersistenceInfoMSFT* spatialAnchorPersistenceInfo) const {
    return (reinterpret_cast<PFN_xrPersistSpatialAnchorMSFT>(pfnPersistSpatialAnchorMSFT))(
        spatialAnchorStore, spatialAnchorPersistenceInfo);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrEnumeratePersistedSpatialAnchorNamesMSFT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrEnumeratePersistedSpatialAnchorNamesMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore,
      uint32_t spatialAnchorNameCapacityInput, uint32_t* spatialAnchorNameCountOutput,
      XrSpatialAnchorPersistenceNameMSFT* spatialAnchorNames) {
    XrResult result = populate_("xrEnumeratePersistedSpatialAnchorNamesMSFT",
                                pfnEnumeratePersistedSpatialAnchorNamesMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT>(
        pfnEnumeratePersistedSpatialAnchorNamesMSFT))(
        spatialAnchorStore, spatialAnchorNameCapacityInput, spatialAnchorNameCountOutput,
        spatialAnchorNames);
  }

  //! @brief Call xrEnumeratePersistedSpatialAnchorNamesMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumeratePersistedSpatialAnchorNamesMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore,
      uint32_t spatialAnchorNameCapacityInput, uint32_t* spatialAnchorNameCountOutput,
      XrSpatialAnchorPersistenceNameMSFT* spatialAnchorNames) const {
    return (reinterpret_cast<PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT>(
        pfnEnumeratePersistedSpatialAnchorNamesMSFT))(
        spatialAnchorStore, spatialAnchorNameCapacityInput, spatialAnchorNameCountOutput,
        spatialAnchorNames);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrCreateSpatialAnchorFromPersistedNameMSFT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorFromPersistedNameMSFT(
      XrSession session,
      const XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT* spatialAnchorCreateInfo,
      XrSpatialAnchorMSFT* spatialAnchor) {
    XrResult result = populate_("xrCreateSpatialAnchorFromPersistedNameMSFT",
                                pfnCreateSpatialAnchorFromPersistedNameMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPersistedNameMSFT>(
        pfnCreateSpatialAnchorFromPersistedNameMSFT))(session, spatialAnchorCreateInfo,
                                                      spatialAnchor);
  }

  //! @brief Call xrCreateSpatialAnchorFromPersistedNameMSFT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorFromPersistedNameMSFT(
      XrSession session,
      const XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT* spatialAnchorCreateInfo,
      XrSpatialAnchorMSFT* spatialAnchor) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPersistedNameMSFT>(
        pfnCreateSpatialAnchorFromPersistedNameMSFT))(session, spatialAnchorCreateInfo,
                                                      spatialAnchor);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrUnpersistSpatialAnchorMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrUnpersistSpatialAnchorMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore,
      const XrSpatialAnchorPersistenceNameMSFT* spatialAnchorPersistenceName) {
    XrResult result = populate_("xrUnpersistSpatialAnchorMSFT", pfnUnpersistSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorMSFT>(pfnUnpersistSpatialAnchorMSFT))(
        spatialAnchorStore, spatialAnchorPersistenceName);
  }

  //! @brief Call xrUnpersistSpatialAnchorMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrUnpersistSpatialAnchorMSFT(
      XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore,
      const XrSpatialAnchorPersistenceNameMSFT* spatialAnchorPersistenceName) const {
    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorMSFT>(pfnUnpersistSpatialAnchorMSFT))(
        spatialAnchorStore, spatialAnchorPersistenceName);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_spatial_anchor_persistence
  //! @brief Call xrClearSpatialAnchorStoreMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrClearSpatialAnchorStoreMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore) {
    XrResult result = populate_("xrClearSpatialAnchorStoreMSFT", pfnClearSpatialAnchorStoreMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrClearSpatialAnchorStoreMSFT>(pfnClearSpatialAnchorStoreMSFT))(
        spatialAnchorStore);
  }

  //! @brief Call xrClearSpatialAnchorStoreMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrClearSpatialAnchorStoreMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore) const {
    return (reinterpret_cast<PFN_xrClearSpatialAnchorStoreMSFT>(pfnClearSpatialAnchorStoreMSFT))(
        spatialAnchorStore);
  }
#endif  // XR_MSFT_spatial_anchor_persistence
#ifdef XR_MSFT_scene_marker
  //! @brief Call xrGetSceneMarkerRawDataMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSceneMarkerRawDataMSFT(XrSceneMSFT scene,
                                                         const XrUuidMSFT* markerId,
                                                         uint32_t bufferCapacityInput,
                                                         uint32_t* bufferCountOutput,
                                                         uint8_t* buffer) {
    XrResult result = populate_("xrGetSceneMarkerRawDataMSFT", pfnGetSceneMarkerRawDataMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSceneMarkerRawDataMSFT>(pfnGetSceneMarkerRawDataMSFT))(
        scene, markerId, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetSceneMarkerRawDataMSFT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSceneMarkerRawDataMSFT(XrSceneMSFT scene,
                                                         const XrUuidMSFT* markerId,
                                                         uint32_t bufferCapacityInput,
                                                         uint32_t* bufferCountOutput,
                                                         uint8_t* buffer) const {
    return (reinterpret_cast<PFN_xrGetSceneMarkerRawDataMSFT>(pfnGetSceneMarkerRawDataMSFT))(
        scene, markerId, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // XR_MSFT_scene_marker
#ifdef XR_MSFT_scene_marker
  //! @brief Call xrGetSceneMarkerDecodedStringMSFT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSceneMarkerDecodedStringMSFT(XrSceneMSFT scene,
                                                               const XrUuidMSFT* markerId,
                                                               uint32_t bufferCapacityInput,
                                                               uint32_t* bufferCountOutput,
                                                               char* buffer) {
    XrResult result =
        populate_("xrGetSceneMarkerDecodedStringMSFT", pfnGetSceneMarkerDecodedStringMSFT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSceneMarkerDecodedStringMSFT>(
        pfnGetSceneMarkerDecodedStringMSFT))(scene, markerId, bufferCapacityInput,
                                             bufferCountOutput, buffer);
  }

  //! @brief Call xrGetSceneMarkerDecodedStringMSFT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetSceneMarkerDecodedStringMSFT(XrSceneMSFT scene,
                                                               const XrUuidMSFT* markerId,
                                                               uint32_t bufferCapacityInput,
                                                               uint32_t* bufferCountOutput,
                                                               char* buffer) const {
    return (reinterpret_cast<PFN_xrGetSceneMarkerDecodedStringMSFT>(
        pfnGetSceneMarkerDecodedStringMSFT))(scene, markerId, bufferCapacityInput,
                                             bufferCountOutput, buffer);
  }
#endif  // XR_MSFT_scene_marker
#ifdef XR_FB_spatial_entity_query
  //! @brief Call xrQuerySpacesFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrQuerySpacesFB(XrSession session,
                                             const XrSpaceQueryInfoBaseHeaderFB* info,
                                             XrAsyncRequestIdFB* requestId) {
    XrResult result = populate_("xrQuerySpacesFB", pfnQuerySpacesFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrQuerySpacesFB>(pfnQuerySpacesFB))(session, info, requestId);
  }

  //! @brief Call xrQuerySpacesFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrQuerySpacesFB(XrSession session,
                                             const XrSpaceQueryInfoBaseHeaderFB* info,
                                             XrAsyncRequestIdFB* requestId) const {
    return (reinterpret_cast<PFN_xrQuerySpacesFB>(pfnQuerySpacesFB))(session, info, requestId);
  }
#endif  // XR_FB_spatial_entity_query
#ifdef XR_FB_spatial_entity_query
  //! @brief Call xrRetrieveSpaceQueryResultsFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrRetrieveSpaceQueryResultsFB(XrSession session,
                                                           XrAsyncRequestIdFB requestId,
                                                           XrSpaceQueryResultsFB* results) {
    XrResult result = populate_("xrRetrieveSpaceQueryResultsFB", pfnRetrieveSpaceQueryResultsFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrRetrieveSpaceQueryResultsFB>(pfnRetrieveSpaceQueryResultsFB))(
        session, requestId, results);
  }

  //! @brief Call xrRetrieveSpaceQueryResultsFB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrRetrieveSpaceQueryResultsFB(XrSession session,
                                                           XrAsyncRequestIdFB requestId,
                                                           XrSpaceQueryResultsFB* results) const {
    return (reinterpret_cast<PFN_xrRetrieveSpaceQueryResultsFB>(pfnRetrieveSpaceQueryResultsFB))(
        session, requestId, results);
  }
#endif  // XR_FB_spatial_entity_query
#ifdef XR_FB_spatial_entity_storage
  //! @brief Call xrSaveSpaceFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSaveSpaceFB(XrSession session, const XrSpaceSaveInfoFB* info,
                                           XrAsyncRequestIdFB* requestId) {
    XrResult result = populate_("xrSaveSpaceFB", pfnSaveSpaceFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSaveSpaceFB>(pfnSaveSpaceFB))(session, info, requestId);
  }

  //! @brief Call xrSaveSpaceFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSaveSpaceFB(XrSession session, const XrSpaceSaveInfoFB* info,
                                           XrAsyncRequestIdFB* requestId) const {
    return (reinterpret_cast<PFN_xrSaveSpaceFB>(pfnSaveSpaceFB))(session, info, requestId);
  }
#endif  // XR_FB_spatial_entity_storage
#ifdef XR_FB_spatial_entity_storage
  //! @brief Call xrEraseSpaceFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEraseSpaceFB(XrSession session, const XrSpaceEraseInfoFB* info,
                                            XrAsyncRequestIdFB* requestId) {
    XrResult result = populate_("xrEraseSpaceFB", pfnEraseSpaceFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEraseSpaceFB>(pfnEraseSpaceFB))(session, info, requestId);
  }

  //! @brief Call xrEraseSpaceFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrEraseSpaceFB(XrSession session, const XrSpaceEraseInfoFB* info,
                                            XrAsyncRequestIdFB* requestId) const {
    return (reinterpret_cast<PFN_xrEraseSpaceFB>(pfnEraseSpaceFB))(session, info, requestId);
  }
#endif  // XR_FB_spatial_entity_storage
#ifdef XR_OCULUS_audio_device_guid
#if defined(XR_USE_PLATFORM_WIN32)
  //! @brief Call xrGetAudioOutputDeviceGuidOculus, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetAudioOutputDeviceGuidOculus(
      XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS]) {
    XrResult result =
        populate_("xrGetAudioOutputDeviceGuidOculus", pfnGetAudioOutputDeviceGuidOculus);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetAudioOutputDeviceGuidOculus>(
        pfnGetAudioOutputDeviceGuidOculus))(instance, buffer);
  }

  //! @brief Call xrGetAudioOutputDeviceGuidOculus (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetAudioOutputDeviceGuidOculus(
      XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS]) const {
    return (reinterpret_cast<PFN_xrGetAudioOutputDeviceGuidOculus>(
        pfnGetAudioOutputDeviceGuidOculus))(instance, buffer);
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_OCULUS_audio_device_guid
#ifdef XR_OCULUS_audio_device_guid
#if defined(XR_USE_PLATFORM_WIN32)
  //! @brief Call xrGetAudioInputDeviceGuidOculus, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetAudioInputDeviceGuidOculus(
      XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS]) {
    XrResult result =
        populate_("xrGetAudioInputDeviceGuidOculus", pfnGetAudioInputDeviceGuidOculus);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetAudioInputDeviceGuidOculus>(
        pfnGetAudioInputDeviceGuidOculus))(instance, buffer);
  }

  //! @brief Call xrGetAudioInputDeviceGuidOculus (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetAudioInputDeviceGuidOculus(
      XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS]) const {
    return (reinterpret_cast<PFN_xrGetAudioInputDeviceGuidOculus>(
        pfnGetAudioInputDeviceGuidOculus))(instance, buffer);
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_OCULUS_audio_device_guid
#ifdef XR_FB_spatial_entity_sharing
  //! @brief Call xrShareSpacesFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrShareSpacesFB(XrSession session, const XrSpaceShareInfoFB* info,
                                             XrAsyncRequestIdFB* requestId) {
    XrResult result = populate_("xrShareSpacesFB", pfnShareSpacesFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrShareSpacesFB>(pfnShareSpacesFB))(session, info, requestId);
  }

  //! @brief Call xrShareSpacesFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrShareSpacesFB(XrSession session, const XrSpaceShareInfoFB* info,
                                             XrAsyncRequestIdFB* requestId) const {
    return (reinterpret_cast<PFN_xrShareSpacesFB>(pfnShareSpacesFB))(session, info, requestId);
  }
#endif  // XR_FB_spatial_entity_sharing
#ifdef XR_FB_scene
  //! @brief Call xrGetSpaceBoundingBox2DFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpaceBoundingBox2DFB(XrSession session, XrSpace space,
                                                       XrRect2Df* boundingBox2DOutput) {
    XrResult result = populate_("xrGetSpaceBoundingBox2DFB", pfnGetSpaceBoundingBox2DFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpaceBoundingBox2DFB>(pfnGetSpaceBoundingBox2DFB))(
        session, space, boundingBox2DOutput);
  }

  //! @brief Call xrGetSpaceBoundingBox2DFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpaceBoundingBox2DFB(XrSession session, XrSpace space,
                                                       XrRect2Df* boundingBox2DOutput) const {
    return (reinterpret_cast<PFN_xrGetSpaceBoundingBox2DFB>(pfnGetSpaceBoundingBox2DFB))(
        session, space, boundingBox2DOutput);
  }
#endif  // XR_FB_scene
#ifdef XR_FB_scene
  //! @brief Call xrGetSpaceBoundingBox3DFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpaceBoundingBox3DFB(XrSession session, XrSpace space,
                                                       XrRect3DfFB* boundingBox3DOutput) {
    XrResult result = populate_("xrGetSpaceBoundingBox3DFB", pfnGetSpaceBoundingBox3DFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpaceBoundingBox3DFB>(pfnGetSpaceBoundingBox3DFB))(
        session, space, boundingBox3DOutput);
  }

  //! @brief Call xrGetSpaceBoundingBox3DFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpaceBoundingBox3DFB(XrSession session, XrSpace space,
                                                       XrRect3DfFB* boundingBox3DOutput) const {
    return (reinterpret_cast<PFN_xrGetSpaceBoundingBox3DFB>(pfnGetSpaceBoundingBox3DFB))(
        session, space, boundingBox3DOutput);
  }
#endif  // XR_FB_scene
#ifdef XR_FB_scene
  //! @brief Call xrGetSpaceSemanticLabelsFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpaceSemanticLabelsFB(XrSession session, XrSpace space,
                                                        XrSemanticLabelsFB* semanticLabelsOutput) {
    XrResult result = populate_("xrGetSpaceSemanticLabelsFB", pfnGetSpaceSemanticLabelsFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpaceSemanticLabelsFB>(pfnGetSpaceSemanticLabelsFB))(
        session, space, semanticLabelsOutput);
  }

  //! @brief Call xrGetSpaceSemanticLabelsFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpaceSemanticLabelsFB(
      XrSession session, XrSpace space, XrSemanticLabelsFB* semanticLabelsOutput) const {
    return (reinterpret_cast<PFN_xrGetSpaceSemanticLabelsFB>(pfnGetSpaceSemanticLabelsFB))(
        session, space, semanticLabelsOutput);
  }
#endif  // XR_FB_scene
#ifdef XR_FB_scene
  //! @brief Call xrGetSpaceBoundary2DFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpaceBoundary2DFB(XrSession session, XrSpace space,
                                                    XrBoundary2DFB* boundary2DOutput) {
    XrResult result = populate_("xrGetSpaceBoundary2DFB", pfnGetSpaceBoundary2DFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpaceBoundary2DFB>(pfnGetSpaceBoundary2DFB))(
        session, space, boundary2DOutput);
  }

  //! @brief Call xrGetSpaceBoundary2DFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpaceBoundary2DFB(XrSession session, XrSpace space,
                                                    XrBoundary2DFB* boundary2DOutput) const {
    return (reinterpret_cast<PFN_xrGetSpaceBoundary2DFB>(pfnGetSpaceBoundary2DFB))(
        session, space, boundary2DOutput);
  }
#endif  // XR_FB_scene
#ifdef XR_FB_scene
  //! @brief Call xrGetSpaceRoomLayoutFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpaceRoomLayoutFB(XrSession session, XrSpace space,
                                                    XrRoomLayoutFB* roomLayoutOutput) {
    XrResult result = populate_("xrGetSpaceRoomLayoutFB", pfnGetSpaceRoomLayoutFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpaceRoomLayoutFB>(pfnGetSpaceRoomLayoutFB))(
        session, space, roomLayoutOutput);
  }

  //! @brief Call xrGetSpaceRoomLayoutFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpaceRoomLayoutFB(XrSession session, XrSpace space,
                                                    XrRoomLayoutFB* roomLayoutOutput) const {
    return (reinterpret_cast<PFN_xrGetSpaceRoomLayoutFB>(pfnGetSpaceRoomLayoutFB))(
        session, space, roomLayoutOutput);
  }
#endif  // XR_FB_scene
#ifdef XR_ALMALENCE_digital_lens_control
  //! @brief Call xrSetDigitalLensControlALMALENCE, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetDigitalLensControlALMALENCE(
      XrSession session, const XrDigitalLensControlALMALENCE* digitalLensControl) {
    XrResult result =
        populate_("xrSetDigitalLensControlALMALENCE", pfnSetDigitalLensControlALMALENCE);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetDigitalLensControlALMALENCE>(
        pfnSetDigitalLensControlALMALENCE))(session, digitalLensControl);
  }

  //! @brief Call xrSetDigitalLensControlALMALENCE (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetDigitalLensControlALMALENCE(
      XrSession session, const XrDigitalLensControlALMALENCE* digitalLensControl) const {
    return (reinterpret_cast<PFN_xrSetDigitalLensControlALMALENCE>(
        pfnSetDigitalLensControlALMALENCE))(session, digitalLensControl);
  }
#endif  // XR_ALMALENCE_digital_lens_control
#ifdef XR_FB_scene_capture
  //! @brief Call xrRequestSceneCaptureFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrRequestSceneCaptureFB(XrSession session,
                                                     const XrSceneCaptureRequestInfoFB* info,
                                                     XrAsyncRequestIdFB* requestId) {
    XrResult result = populate_("xrRequestSceneCaptureFB", pfnRequestSceneCaptureFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrRequestSceneCaptureFB>(pfnRequestSceneCaptureFB))(session, info,
                                                                                     requestId);
  }

  //! @brief Call xrRequestSceneCaptureFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrRequestSceneCaptureFB(XrSession session,
                                                     const XrSceneCaptureRequestInfoFB* info,
                                                     XrAsyncRequestIdFB* requestId) const {
    return (reinterpret_cast<PFN_xrRequestSceneCaptureFB>(pfnRequestSceneCaptureFB))(session, info,
                                                                                     requestId);
  }
#endif  // XR_FB_scene_capture
#ifdef XR_FB_spatial_entity_container
  //! @brief Call xrGetSpaceContainerFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpaceContainerFB(XrSession session, XrSpace space,
                                                   XrSpaceContainerFB* spaceContainerOutput) {
    XrResult result = populate_("xrGetSpaceContainerFB", pfnGetSpaceContainerFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpaceContainerFB>(pfnGetSpaceContainerFB))(
        session, space, spaceContainerOutput);
  }

  //! @brief Call xrGetSpaceContainerFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpaceContainerFB(XrSession session, XrSpace space,
                                                   XrSpaceContainerFB* spaceContainerOutput) const {
    return (reinterpret_cast<PFN_xrGetSpaceContainerFB>(pfnGetSpaceContainerFB))(
        session, space, spaceContainerOutput);
  }
#endif  // XR_FB_spatial_entity_container
#ifdef XR_META_foveation_eye_tracked
  //! @brief Call xrGetFoveationEyeTrackedStateMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetFoveationEyeTrackedStateMETA(
      XrSession session, XrFoveationEyeTrackedStateMETA* foveationState) {
    XrResult result =
        populate_("xrGetFoveationEyeTrackedStateMETA", pfnGetFoveationEyeTrackedStateMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetFoveationEyeTrackedStateMETA>(
        pfnGetFoveationEyeTrackedStateMETA))(session, foveationState);
  }

  //! @brief Call xrGetFoveationEyeTrackedStateMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetFoveationEyeTrackedStateMETA(
      XrSession session, XrFoveationEyeTrackedStateMETA* foveationState) const {
    return (reinterpret_cast<PFN_xrGetFoveationEyeTrackedStateMETA>(
        pfnGetFoveationEyeTrackedStateMETA))(session, foveationState);
  }
#endif  // XR_META_foveation_eye_tracked
#ifdef XR_FB_face_tracking
  //! @brief Call xrCreateFaceTrackerFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateFaceTrackerFB(XrSession session,
                                                   const XrFaceTrackerCreateInfoFB* createInfo,
                                                   XrFaceTrackerFB* faceTracker) {
    XrResult result = populate_("xrCreateFaceTrackerFB", pfnCreateFaceTrackerFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateFaceTrackerFB>(pfnCreateFaceTrackerFB))(
        session, createInfo, faceTracker);
  }

  //! @brief Call xrCreateFaceTrackerFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateFaceTrackerFB(XrSession session,
                                                   const XrFaceTrackerCreateInfoFB* createInfo,
                                                   XrFaceTrackerFB* faceTracker) const {
    return (reinterpret_cast<PFN_xrCreateFaceTrackerFB>(pfnCreateFaceTrackerFB))(
        session, createInfo, faceTracker);
  }
#endif  // XR_FB_face_tracking
#ifdef XR_FB_face_tracking
  //! @brief Call xrDestroyFaceTrackerFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyFaceTrackerFB(XrFaceTrackerFB faceTracker) {
    XrResult result = populate_("xrDestroyFaceTrackerFB", pfnDestroyFaceTrackerFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyFaceTrackerFB>(pfnDestroyFaceTrackerFB))(faceTracker);
  }

  //! @brief Call xrDestroyFaceTrackerFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyFaceTrackerFB(XrFaceTrackerFB faceTracker) const {
    return (reinterpret_cast<PFN_xrDestroyFaceTrackerFB>(pfnDestroyFaceTrackerFB))(faceTracker);
  }
#endif  // XR_FB_face_tracking
#ifdef XR_FB_face_tracking
  //! @brief Call xrGetFaceExpressionWeightsFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetFaceExpressionWeightsFB(
      XrFaceTrackerFB faceTracker, const XrFaceExpressionInfoFB* expressionInfo,
      XrFaceExpressionWeightsFB* expressionWeights) {
    XrResult result = populate_("xrGetFaceExpressionWeightsFB", pfnGetFaceExpressionWeightsFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetFaceExpressionWeightsFB>(pfnGetFaceExpressionWeightsFB))(
        faceTracker, expressionInfo, expressionWeights);
  }

  //! @brief Call xrGetFaceExpressionWeightsFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetFaceExpressionWeightsFB(
      XrFaceTrackerFB faceTracker, const XrFaceExpressionInfoFB* expressionInfo,
      XrFaceExpressionWeightsFB* expressionWeights) const {
    return (reinterpret_cast<PFN_xrGetFaceExpressionWeightsFB>(pfnGetFaceExpressionWeightsFB))(
        faceTracker, expressionInfo, expressionWeights);
  }
#endif  // XR_FB_face_tracking
#ifdef XR_FB_eye_tracking_social
  //! @brief Call xrCreateEyeTrackerFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateEyeTrackerFB(XrSession session,
                                                  const XrEyeTrackerCreateInfoFB* createInfo,
                                                  XrEyeTrackerFB* eyeTracker) {
    XrResult result = populate_("xrCreateEyeTrackerFB", pfnCreateEyeTrackerFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateEyeTrackerFB>(pfnCreateEyeTrackerFB))(session, createInfo,
                                                                               eyeTracker);
  }

  //! @brief Call xrCreateEyeTrackerFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateEyeTrackerFB(XrSession session,
                                                  const XrEyeTrackerCreateInfoFB* createInfo,
                                                  XrEyeTrackerFB* eyeTracker) const {
    return (reinterpret_cast<PFN_xrCreateEyeTrackerFB>(pfnCreateEyeTrackerFB))(session, createInfo,
                                                                               eyeTracker);
  }
#endif  // XR_FB_eye_tracking_social
#ifdef XR_FB_eye_tracking_social
  //! @brief Call xrDestroyEyeTrackerFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyEyeTrackerFB(XrEyeTrackerFB eyeTracker) {
    XrResult result = populate_("xrDestroyEyeTrackerFB", pfnDestroyEyeTrackerFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyEyeTrackerFB>(pfnDestroyEyeTrackerFB))(eyeTracker);
  }

  //! @brief Call xrDestroyEyeTrackerFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyEyeTrackerFB(XrEyeTrackerFB eyeTracker) const {
    return (reinterpret_cast<PFN_xrDestroyEyeTrackerFB>(pfnDestroyEyeTrackerFB))(eyeTracker);
  }
#endif  // XR_FB_eye_tracking_social
#ifdef XR_FB_eye_tracking_social
  //! @brief Call xrGetEyeGazesFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetEyeGazesFB(XrEyeTrackerFB eyeTracker,
                                             const XrEyeGazesInfoFB* gazeInfo,
                                             XrEyeGazesFB* eyeGazes) {
    XrResult result = populate_("xrGetEyeGazesFB", pfnGetEyeGazesFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetEyeGazesFB>(pfnGetEyeGazesFB))(eyeTracker, gazeInfo,
                                                                     eyeGazes);
  }

  //! @brief Call xrGetEyeGazesFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetEyeGazesFB(XrEyeTrackerFB eyeTracker,
                                             const XrEyeGazesInfoFB* gazeInfo,
                                             XrEyeGazesFB* eyeGazes) const {
    return (reinterpret_cast<PFN_xrGetEyeGazesFB>(pfnGetEyeGazesFB))(eyeTracker, gazeInfo,
                                                                     eyeGazes);
  }
#endif  // XR_FB_eye_tracking_social
#ifdef XR_FB_passthrough_keyboard_hands
  //! @brief Call xrPassthroughLayerSetKeyboardHandsIntensityFB, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerSetKeyboardHandsIntensityFB(
      XrPassthroughLayerFB layer, const XrPassthroughKeyboardHandsIntensityFB* intensity) {
    XrResult result = populate_("xrPassthroughLayerSetKeyboardHandsIntensityFB",
                                pfnPassthroughLayerSetKeyboardHandsIntensityFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB>(
        pfnPassthroughLayerSetKeyboardHandsIntensityFB))(layer, intensity);
  }

  //! @brief Call xrPassthroughLayerSetKeyboardHandsIntensityFB (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrPassthroughLayerSetKeyboardHandsIntensityFB(
      XrPassthroughLayerFB layer, const XrPassthroughKeyboardHandsIntensityFB* intensity) const {
    return (reinterpret_cast<PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB>(
        pfnPassthroughLayerSetKeyboardHandsIntensityFB))(layer, intensity);
  }
#endif  // XR_FB_passthrough_keyboard_hands
#ifdef XR_FB_haptic_pcm
  //! @brief Call xrGetDeviceSampleRateFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetDeviceSampleRateFB(XrSession session, const XrHapticActionInfo* hapticActionInfo,
                          XrDevicePcmSampleRateGetInfoFB* deviceSampleRate) {
    XrResult result = populate_("xrGetDeviceSampleRateFB", pfnGetDeviceSampleRateFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetDeviceSampleRateFB>(pfnGetDeviceSampleRateFB))(
        session, hapticActionInfo, deviceSampleRate);
  }

  //! @brief Call xrGetDeviceSampleRateFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetDeviceSampleRateFB(XrSession session, const XrHapticActionInfo* hapticActionInfo,
                          XrDevicePcmSampleRateGetInfoFB* deviceSampleRate) const {
    return (reinterpret_cast<PFN_xrGetDeviceSampleRateFB>(pfnGetDeviceSampleRateFB))(
        session, hapticActionInfo, deviceSampleRate);
  }
#endif  // XR_FB_haptic_pcm
#ifdef XR_META_passthrough_preferences
  //! @brief Call xrGetPassthroughPreferencesMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetPassthroughPreferencesMETA(XrSession session, XrPassthroughPreferencesMETA* preferences) {
    XrResult result =
        populate_("xrGetPassthroughPreferencesMETA", pfnGetPassthroughPreferencesMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetPassthroughPreferencesMETA>(
        pfnGetPassthroughPreferencesMETA))(session, preferences);
  }

  //! @brief Call xrGetPassthroughPreferencesMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetPassthroughPreferencesMETA(
      XrSession session, XrPassthroughPreferencesMETA* preferences) const {
    return (reinterpret_cast<PFN_xrGetPassthroughPreferencesMETA>(
        pfnGetPassthroughPreferencesMETA))(session, preferences);
  }
#endif  // XR_META_passthrough_preferences
#ifdef XR_META_virtual_keyboard
  //! @brief Call xrCreateVirtualKeyboardMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateVirtualKeyboardMETA(XrSession session, const XrVirtualKeyboardCreateInfoMETA* createInfo,
                              XrVirtualKeyboardMETA* keyboard) {
    XrResult result = populate_("xrCreateVirtualKeyboardMETA", pfnCreateVirtualKeyboardMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateVirtualKeyboardMETA>(pfnCreateVirtualKeyboardMETA))(
        session, createInfo, keyboard);
  }

  //! @brief Call xrCreateVirtualKeyboardMETA (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateVirtualKeyboardMETA(XrSession session, const XrVirtualKeyboardCreateInfoMETA* createInfo,
                              XrVirtualKeyboardMETA* keyboard) const {
    return (reinterpret_cast<PFN_xrCreateVirtualKeyboardMETA>(pfnCreateVirtualKeyboardMETA))(
        session, createInfo, keyboard);
  }
#endif  // XR_META_virtual_keyboard
#ifdef XR_META_virtual_keyboard
  //! @brief Call xrDestroyVirtualKeyboardMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyVirtualKeyboardMETA(XrVirtualKeyboardMETA keyboard) {
    XrResult result = populate_("xrDestroyVirtualKeyboardMETA", pfnDestroyVirtualKeyboardMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyVirtualKeyboardMETA>(pfnDestroyVirtualKeyboardMETA))(
        keyboard);
  }

  //! @brief Call xrDestroyVirtualKeyboardMETA (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyVirtualKeyboardMETA(XrVirtualKeyboardMETA keyboard) const {
    return (reinterpret_cast<PFN_xrDestroyVirtualKeyboardMETA>(pfnDestroyVirtualKeyboardMETA))(
        keyboard);
  }
#endif  // XR_META_virtual_keyboard
#ifdef XR_META_virtual_keyboard
  //! @brief Call xrCreateVirtualKeyboardSpaceMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateVirtualKeyboardSpaceMETA(
      XrSession session, XrVirtualKeyboardMETA keyboard,
      const XrVirtualKeyboardSpaceCreateInfoMETA* createInfo, XrSpace* keyboardSpace) {
    XrResult result =
        populate_("xrCreateVirtualKeyboardSpaceMETA", pfnCreateVirtualKeyboardSpaceMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateVirtualKeyboardSpaceMETA>(
        pfnCreateVirtualKeyboardSpaceMETA))(session, keyboard, createInfo, keyboardSpace);
  }

  //! @brief Call xrCreateVirtualKeyboardSpaceMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateVirtualKeyboardSpaceMETA(
      XrSession session, XrVirtualKeyboardMETA keyboard,
      const XrVirtualKeyboardSpaceCreateInfoMETA* createInfo, XrSpace* keyboardSpace) const {
    return (reinterpret_cast<PFN_xrCreateVirtualKeyboardSpaceMETA>(
        pfnCreateVirtualKeyboardSpaceMETA))(session, keyboard, createInfo, keyboardSpace);
  }
#endif  // XR_META_virtual_keyboard
#ifdef XR_META_virtual_keyboard
  //! @brief Call xrSuggestVirtualKeyboardLocationMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSuggestVirtualKeyboardLocationMETA(
      XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardLocationInfoMETA* locationInfo) {
    XrResult result =
        populate_("xrSuggestVirtualKeyboardLocationMETA", pfnSuggestVirtualKeyboardLocationMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSuggestVirtualKeyboardLocationMETA>(
        pfnSuggestVirtualKeyboardLocationMETA))(keyboard, locationInfo);
  }

  //! @brief Call xrSuggestVirtualKeyboardLocationMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSuggestVirtualKeyboardLocationMETA(
      XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardLocationInfoMETA* locationInfo) const {
    return (reinterpret_cast<PFN_xrSuggestVirtualKeyboardLocationMETA>(
        pfnSuggestVirtualKeyboardLocationMETA))(keyboard, locationInfo);
  }
#endif  // XR_META_virtual_keyboard
#ifdef XR_META_virtual_keyboard
  //! @brief Call xrGetVirtualKeyboardScaleMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetVirtualKeyboardScaleMETA(XrVirtualKeyboardMETA keyboard,
                                                           float* scale) {
    XrResult result = populate_("xrGetVirtualKeyboardScaleMETA", pfnGetVirtualKeyboardScaleMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVirtualKeyboardScaleMETA>(pfnGetVirtualKeyboardScaleMETA))(
        keyboard, scale);
  }

  //! @brief Call xrGetVirtualKeyboardScaleMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetVirtualKeyboardScaleMETA(XrVirtualKeyboardMETA keyboard,
                                                           float* scale) const {
    return (reinterpret_cast<PFN_xrGetVirtualKeyboardScaleMETA>(pfnGetVirtualKeyboardScaleMETA))(
        keyboard, scale);
  }
#endif  // XR_META_virtual_keyboard
#ifdef XR_META_virtual_keyboard
  //! @brief Call xrSetVirtualKeyboardModelVisibilityMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSetVirtualKeyboardModelVisibilityMETA(
      XrVirtualKeyboardMETA keyboard,
      const XrVirtualKeyboardModelVisibilitySetInfoMETA* modelVisibility) {
    XrResult result = populate_("xrSetVirtualKeyboardModelVisibilityMETA",
                                pfnSetVirtualKeyboardModelVisibilityMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetVirtualKeyboardModelVisibilityMETA>(
        pfnSetVirtualKeyboardModelVisibilityMETA))(keyboard, modelVisibility);
  }

  //! @brief Call xrSetVirtualKeyboardModelVisibilityMETA (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrSetVirtualKeyboardModelVisibilityMETA(
      XrVirtualKeyboardMETA keyboard,
      const XrVirtualKeyboardModelVisibilitySetInfoMETA* modelVisibility) const {
    return (reinterpret_cast<PFN_xrSetVirtualKeyboardModelVisibilityMETA>(
        pfnSetVirtualKeyboardModelVisibilityMETA))(keyboard, modelVisibility);
  }
#endif  // XR_META_virtual_keyboard
#ifdef XR_META_virtual_keyboard
  //! @brief Call xrGetVirtualKeyboardModelAnimationStatesMETA, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrGetVirtualKeyboardModelAnimationStatesMETA(
      XrVirtualKeyboardMETA keyboard, XrVirtualKeyboardModelAnimationStatesMETA* animationStates) {
    XrResult result = populate_("xrGetVirtualKeyboardModelAnimationStatesMETA",
                                pfnGetVirtualKeyboardModelAnimationStatesMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVirtualKeyboardModelAnimationStatesMETA>(
        pfnGetVirtualKeyboardModelAnimationStatesMETA))(keyboard, animationStates);
  }

  //! @brief Call xrGetVirtualKeyboardModelAnimationStatesMETA (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrGetVirtualKeyboardModelAnimationStatesMETA(
      XrVirtualKeyboardMETA keyboard,
      XrVirtualKeyboardModelAnimationStatesMETA* animationStates) const {
    return (reinterpret_cast<PFN_xrGetVirtualKeyboardModelAnimationStatesMETA>(
        pfnGetVirtualKeyboardModelAnimationStatesMETA))(keyboard, animationStates);
  }
#endif  // XR_META_virtual_keyboard
#ifdef XR_META_virtual_keyboard
  //! @brief Call xrGetVirtualKeyboardDirtyTexturesMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetVirtualKeyboardDirtyTexturesMETA(XrVirtualKeyboardMETA keyboard,
                                                                   uint32_t textureIdCapacityInput,
                                                                   uint32_t* textureIdCountOutput,
                                                                   uint64_t* textureIds) {
    XrResult result =
        populate_("xrGetVirtualKeyboardDirtyTexturesMETA", pfnGetVirtualKeyboardDirtyTexturesMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVirtualKeyboardDirtyTexturesMETA>(
        pfnGetVirtualKeyboardDirtyTexturesMETA))(keyboard, textureIdCapacityInput,
                                                 textureIdCountOutput, textureIds);
  }

  //! @brief Call xrGetVirtualKeyboardDirtyTexturesMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetVirtualKeyboardDirtyTexturesMETA(XrVirtualKeyboardMETA keyboard,
                                                                   uint32_t textureIdCapacityInput,
                                                                   uint32_t* textureIdCountOutput,
                                                                   uint64_t* textureIds) const {
    return (reinterpret_cast<PFN_xrGetVirtualKeyboardDirtyTexturesMETA>(
        pfnGetVirtualKeyboardDirtyTexturesMETA))(keyboard, textureIdCapacityInput,
                                                 textureIdCountOutput, textureIds);
  }
#endif  // XR_META_virtual_keyboard
#ifdef XR_META_virtual_keyboard
  //! @brief Call xrGetVirtualKeyboardTextureDataMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetVirtualKeyboardTextureDataMETA(XrVirtualKeyboardMETA keyboard, uint64_t textureId,
                                      XrVirtualKeyboardTextureDataMETA* textureData) {
    XrResult result =
        populate_("xrGetVirtualKeyboardTextureDataMETA", pfnGetVirtualKeyboardTextureDataMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetVirtualKeyboardTextureDataMETA>(
        pfnGetVirtualKeyboardTextureDataMETA))(keyboard, textureId, textureData);
  }

  //! @brief Call xrGetVirtualKeyboardTextureDataMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetVirtualKeyboardTextureDataMETA(XrVirtualKeyboardMETA keyboard, uint64_t textureId,
                                      XrVirtualKeyboardTextureDataMETA* textureData) const {
    return (reinterpret_cast<PFN_xrGetVirtualKeyboardTextureDataMETA>(
        pfnGetVirtualKeyboardTextureDataMETA))(keyboard, textureId, textureData);
  }
#endif  // XR_META_virtual_keyboard
#ifdef XR_META_virtual_keyboard
  //! @brief Call xrSendVirtualKeyboardInputMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSendVirtualKeyboardInputMETA(
      XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardInputInfoMETA* info,
      XrPosef* interactorRootPose) {
    XrResult result = populate_("xrSendVirtualKeyboardInputMETA", pfnSendVirtualKeyboardInputMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSendVirtualKeyboardInputMETA>(pfnSendVirtualKeyboardInputMETA))(
        keyboard, info, interactorRootPose);
  }

  //! @brief Call xrSendVirtualKeyboardInputMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSendVirtualKeyboardInputMETA(
      XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardInputInfoMETA* info,
      XrPosef* interactorRootPose) const {
    return (reinterpret_cast<PFN_xrSendVirtualKeyboardInputMETA>(pfnSendVirtualKeyboardInputMETA))(
        keyboard, info, interactorRootPose);
  }
#endif  // XR_META_virtual_keyboard
#ifdef XR_META_virtual_keyboard
  //! @brief Call xrChangeVirtualKeyboardTextContextMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrChangeVirtualKeyboardTextContextMETA(
      XrVirtualKeyboardMETA keyboard,
      const XrVirtualKeyboardTextContextChangeInfoMETA* changeInfo) {
    XrResult result = populate_("xrChangeVirtualKeyboardTextContextMETA",
                                pfnChangeVirtualKeyboardTextContextMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrChangeVirtualKeyboardTextContextMETA>(
        pfnChangeVirtualKeyboardTextContextMETA))(keyboard, changeInfo);
  }

  //! @brief Call xrChangeVirtualKeyboardTextContextMETA (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrChangeVirtualKeyboardTextContextMETA(
      XrVirtualKeyboardMETA keyboard,
      const XrVirtualKeyboardTextContextChangeInfoMETA* changeInfo) const {
    return (reinterpret_cast<PFN_xrChangeVirtualKeyboardTextContextMETA>(
        pfnChangeVirtualKeyboardTextContextMETA))(keyboard, changeInfo);
  }
#endif  // XR_META_virtual_keyboard
#ifdef XR_OCULUS_external_camera
  //! @brief Call xrEnumerateExternalCamerasOCULUS, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateExternalCamerasOCULUS(XrSession session,
                                                              uint32_t cameraCapacityInput,
                                                              uint32_t* cameraCountOutput,
                                                              XrExternalCameraOCULUS* cameras) {
    XrResult result =
        populate_("xrEnumerateExternalCamerasOCULUS", pfnEnumerateExternalCamerasOCULUS);
    if (XR_FAILED(result)) {
      return result;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateExternalCamerasOCULUS>(pfnEnumerateExternalCamerasOCULUS))(
        session, cameraCapacityInput, cameraCountOutput, cameras);
  }

  //! @brief Call xrEnumerateExternalCamerasOCULUS (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateExternalCamerasOCULUS(
      XrSession session, uint32_t cameraCapacityInput, uint32_t* cameraCountOutput,
      XrExternalCameraOCULUS* cameras) const {
    return (
        reinterpret_cast<PFN_xrEnumerateExternalCamerasOCULUS>(pfnEnumerateExternalCamerasOCULUS))(
        session, cameraCapacityInput, cameraCountOutput, cameras);
  }
#endif  // XR_OCULUS_external_camera
#ifdef XR_META_performance_metrics
  //! @brief Call xrEnumeratePerformanceMetricsCounterPathsMETA, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrEnumeratePerformanceMetricsCounterPathsMETA(
      XrInstance instance, uint32_t counterPathCapacityInput, uint32_t* counterPathCountOutput,
      XrPath* counterPaths) {
    XrResult result = populate_("xrEnumeratePerformanceMetricsCounterPathsMETA",
                                pfnEnumeratePerformanceMetricsCounterPathsMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumeratePerformanceMetricsCounterPathsMETA>(
        pfnEnumeratePerformanceMetricsCounterPathsMETA))(instance, counterPathCapacityInput,
                                                         counterPathCountOutput, counterPaths);
  }

  //! @brief Call xrEnumeratePerformanceMetricsCounterPathsMETA (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumeratePerformanceMetricsCounterPathsMETA(
      XrInstance instance, uint32_t counterPathCapacityInput, uint32_t* counterPathCountOutput,
      XrPath* counterPaths) const {
    return (reinterpret_cast<PFN_xrEnumeratePerformanceMetricsCounterPathsMETA>(
        pfnEnumeratePerformanceMetricsCounterPathsMETA))(instance, counterPathCapacityInput,
                                                         counterPathCountOutput, counterPaths);
  }
#endif  // XR_META_performance_metrics
#ifdef XR_META_performance_metrics
  //! @brief Call xrSetPerformanceMetricsStateMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrSetPerformanceMetricsStateMETA(XrSession session, const XrPerformanceMetricsStateMETA* state) {
    XrResult result =
        populate_("xrSetPerformanceMetricsStateMETA", pfnSetPerformanceMetricsStateMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetPerformanceMetricsStateMETA>(
        pfnSetPerformanceMetricsStateMETA))(session, state);
  }

  //! @brief Call xrSetPerformanceMetricsStateMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetPerformanceMetricsStateMETA(
      XrSession session, const XrPerformanceMetricsStateMETA* state) const {
    return (reinterpret_cast<PFN_xrSetPerformanceMetricsStateMETA>(
        pfnSetPerformanceMetricsStateMETA))(session, state);
  }
#endif  // XR_META_performance_metrics
#ifdef XR_META_performance_metrics
  //! @brief Call xrGetPerformanceMetricsStateMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetPerformanceMetricsStateMETA(XrSession session, XrPerformanceMetricsStateMETA* state) {
    XrResult result =
        populate_("xrGetPerformanceMetricsStateMETA", pfnGetPerformanceMetricsStateMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetPerformanceMetricsStateMETA>(
        pfnGetPerformanceMetricsStateMETA))(session, state);
  }

  //! @brief Call xrGetPerformanceMetricsStateMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetPerformanceMetricsStateMETA(XrSession session, XrPerformanceMetricsStateMETA* state) const {
    return (reinterpret_cast<PFN_xrGetPerformanceMetricsStateMETA>(
        pfnGetPerformanceMetricsStateMETA))(session, state);
  }
#endif  // XR_META_performance_metrics
#ifdef XR_META_performance_metrics
  //! @brief Call xrQueryPerformanceMetricsCounterMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrQueryPerformanceMetricsCounterMETA(
      XrSession session, XrPath counterPath, XrPerformanceMetricsCounterMETA* counter) {
    XrResult result =
        populate_("xrQueryPerformanceMetricsCounterMETA", pfnQueryPerformanceMetricsCounterMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrQueryPerformanceMetricsCounterMETA>(
        pfnQueryPerformanceMetricsCounterMETA))(session, counterPath, counter);
  }

  //! @brief Call xrQueryPerformanceMetricsCounterMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrQueryPerformanceMetricsCounterMETA(
      XrSession session, XrPath counterPath, XrPerformanceMetricsCounterMETA* counter) const {
    return (reinterpret_cast<PFN_xrQueryPerformanceMetricsCounterMETA>(
        pfnQueryPerformanceMetricsCounterMETA))(session, counterPath, counter);
  }
#endif  // XR_META_performance_metrics
#ifdef XR_FB_spatial_entity_storage_batch
  //! @brief Call xrSaveSpaceListFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrSaveSpaceListFB(XrSession session, const XrSpaceListSaveInfoFB* info,
                                               XrAsyncRequestIdFB* requestId) {
    XrResult result = populate_("xrSaveSpaceListFB", pfnSaveSpaceListFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSaveSpaceListFB>(pfnSaveSpaceListFB))(session, info, requestId);
  }

  //! @brief Call xrSaveSpaceListFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSaveSpaceListFB(XrSession session, const XrSpaceListSaveInfoFB* info,
                                               XrAsyncRequestIdFB* requestId) const {
    return (reinterpret_cast<PFN_xrSaveSpaceListFB>(pfnSaveSpaceListFB))(session, info, requestId);
  }
#endif  // XR_FB_spatial_entity_storage_batch
#ifdef XR_FB_spatial_entity_user
  //! @brief Call xrCreateSpaceUserFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpaceUserFB(XrSession session,
                                                 const XrSpaceUserCreateInfoFB* info,
                                                 XrSpaceUserFB* user) {
    XrResult result = populate_("xrCreateSpaceUserFB", pfnCreateSpaceUserFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpaceUserFB>(pfnCreateSpaceUserFB))(session, info, user);
  }

  //! @brief Call xrCreateSpaceUserFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpaceUserFB(XrSession session,
                                                 const XrSpaceUserCreateInfoFB* info,
                                                 XrSpaceUserFB* user) const {
    return (reinterpret_cast<PFN_xrCreateSpaceUserFB>(pfnCreateSpaceUserFB))(session, info, user);
  }
#endif  // XR_FB_spatial_entity_user
#ifdef XR_FB_spatial_entity_user
  //! @brief Call xrGetSpaceUserIdFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpaceUserIdFB(XrSpaceUserFB user, XrSpaceUserIdFB* userId) {
    XrResult result = populate_("xrGetSpaceUserIdFB", pfnGetSpaceUserIdFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpaceUserIdFB>(pfnGetSpaceUserIdFB))(user, userId);
  }

  //! @brief Call xrGetSpaceUserIdFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpaceUserIdFB(XrSpaceUserFB user, XrSpaceUserIdFB* userId) const {
    return (reinterpret_cast<PFN_xrGetSpaceUserIdFB>(pfnGetSpaceUserIdFB))(user, userId);
  }
#endif  // XR_FB_spatial_entity_user
#ifdef XR_FB_spatial_entity_user
  //! @brief Call xrDestroySpaceUserFB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySpaceUserFB(XrSpaceUserFB user) {
    XrResult result = populate_("xrDestroySpaceUserFB", pfnDestroySpaceUserFB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpaceUserFB>(pfnDestroySpaceUserFB))(user);
  }

  //! @brief Call xrDestroySpaceUserFB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySpaceUserFB(XrSpaceUserFB user) const {
    return (reinterpret_cast<PFN_xrDestroySpaceUserFB>(pfnDestroySpaceUserFB))(user);
  }
#endif  // XR_FB_spatial_entity_user
#ifdef XR_META_recommended_layer_resolution
  //! @brief Call xrGetRecommendedLayerResolutionMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetRecommendedLayerResolutionMETA(
      XrSession session, const XrRecommendedLayerResolutionGetInfoMETA* info,
      XrRecommendedLayerResolutionMETA* resolution) {
    XrResult result =
        populate_("xrGetRecommendedLayerResolutionMETA", pfnGetRecommendedLayerResolutionMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetRecommendedLayerResolutionMETA>(
        pfnGetRecommendedLayerResolutionMETA))(session, info, resolution);
  }

  //! @brief Call xrGetRecommendedLayerResolutionMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetRecommendedLayerResolutionMETA(
      XrSession session, const XrRecommendedLayerResolutionGetInfoMETA* info,
      XrRecommendedLayerResolutionMETA* resolution) const {
    return (reinterpret_cast<PFN_xrGetRecommendedLayerResolutionMETA>(
        pfnGetRecommendedLayerResolutionMETA))(session, info, resolution);
  }
#endif  // XR_META_recommended_layer_resolution
#ifdef XR_META_passthrough_color_lut
  //! @brief Call xrCreatePassthroughColorLutMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreatePassthroughColorLutMETA(
      XrPassthroughFB passthrough, const XrPassthroughColorLutCreateInfoMETA* createInfo,
      XrPassthroughColorLutMETA* colorLut) {
    XrResult result =
        populate_("xrCreatePassthroughColorLutMETA", pfnCreatePassthroughColorLutMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreatePassthroughColorLutMETA>(
        pfnCreatePassthroughColorLutMETA))(passthrough, createInfo, colorLut);
  }

  //! @brief Call xrCreatePassthroughColorLutMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreatePassthroughColorLutMETA(
      XrPassthroughFB passthrough, const XrPassthroughColorLutCreateInfoMETA* createInfo,
      XrPassthroughColorLutMETA* colorLut) const {
    return (reinterpret_cast<PFN_xrCreatePassthroughColorLutMETA>(
        pfnCreatePassthroughColorLutMETA))(passthrough, createInfo, colorLut);
  }
#endif  // XR_META_passthrough_color_lut
#ifdef XR_META_passthrough_color_lut
  //! @brief Call xrDestroyPassthroughColorLutMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyPassthroughColorLutMETA(XrPassthroughColorLutMETA colorLut) {
    XrResult result =
        populate_("xrDestroyPassthroughColorLutMETA", pfnDestroyPassthroughColorLutMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyPassthroughColorLutMETA>(
        pfnDestroyPassthroughColorLutMETA))(colorLut);
  }

  //! @brief Call xrDestroyPassthroughColorLutMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrDestroyPassthroughColorLutMETA(XrPassthroughColorLutMETA colorLut) const {
    return (reinterpret_cast<PFN_xrDestroyPassthroughColorLutMETA>(
        pfnDestroyPassthroughColorLutMETA))(colorLut);
  }
#endif  // XR_META_passthrough_color_lut
#ifdef XR_META_passthrough_color_lut
  //! @brief Call xrUpdatePassthroughColorLutMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrUpdatePassthroughColorLutMETA(
      XrPassthroughColorLutMETA colorLut, const XrPassthroughColorLutUpdateInfoMETA* updateInfo) {
    XrResult result =
        populate_("xrUpdatePassthroughColorLutMETA", pfnUpdatePassthroughColorLutMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUpdatePassthroughColorLutMETA>(
        pfnUpdatePassthroughColorLutMETA))(colorLut, updateInfo);
  }

  //! @brief Call xrUpdatePassthroughColorLutMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrUpdatePassthroughColorLutMETA(XrPassthroughColorLutMETA colorLut,
                                  const XrPassthroughColorLutUpdateInfoMETA* updateInfo) const {
    return (reinterpret_cast<PFN_xrUpdatePassthroughColorLutMETA>(
        pfnUpdatePassthroughColorLutMETA))(colorLut, updateInfo);
  }
#endif  // XR_META_passthrough_color_lut
#ifdef XR_META_spatial_entity_mesh
  //! @brief Call xrGetSpaceTriangleMeshMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrGetSpaceTriangleMeshMETA(XrSpace space, const XrSpaceTriangleMeshGetInfoMETA* getInfo,
                             XrSpaceTriangleMeshMETA* triangleMeshOutput) {
    XrResult result = populate_("xrGetSpaceTriangleMeshMETA", pfnGetSpaceTriangleMeshMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpaceTriangleMeshMETA>(pfnGetSpaceTriangleMeshMETA))(
        space, getInfo, triangleMeshOutput);
  }

  //! @brief Call xrGetSpaceTriangleMeshMETA (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetSpaceTriangleMeshMETA(XrSpace space, const XrSpaceTriangleMeshGetInfoMETA* getInfo,
                             XrSpaceTriangleMeshMETA* triangleMeshOutput) const {
    return (reinterpret_cast<PFN_xrGetSpaceTriangleMeshMETA>(pfnGetSpaceTriangleMeshMETA))(
        space, getInfo, triangleMeshOutput);
  }
#endif  // XR_META_spatial_entity_mesh
#ifdef XR_FB_face_tracking2
  //! @brief Call xrCreateFaceTracker2FB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateFaceTracker2FB(XrSession session,
                                                    const XrFaceTrackerCreateInfo2FB* createInfo,
                                                    XrFaceTracker2FB* faceTracker) {
    XrResult result = populate_("xrCreateFaceTracker2FB", pfnCreateFaceTracker2FB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateFaceTracker2FB>(pfnCreateFaceTracker2FB))(
        session, createInfo, faceTracker);
  }

  //! @brief Call xrCreateFaceTracker2FB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateFaceTracker2FB(XrSession session,
                                                    const XrFaceTrackerCreateInfo2FB* createInfo,
                                                    XrFaceTracker2FB* faceTracker) const {
    return (reinterpret_cast<PFN_xrCreateFaceTracker2FB>(pfnCreateFaceTracker2FB))(
        session, createInfo, faceTracker);
  }
#endif  // XR_FB_face_tracking2
#ifdef XR_FB_face_tracking2
  //! @brief Call xrDestroyFaceTracker2FB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyFaceTracker2FB(XrFaceTracker2FB faceTracker) {
    XrResult result = populate_("xrDestroyFaceTracker2FB", pfnDestroyFaceTracker2FB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyFaceTracker2FB>(pfnDestroyFaceTracker2FB))(faceTracker);
  }

  //! @brief Call xrDestroyFaceTracker2FB (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyFaceTracker2FB(XrFaceTracker2FB faceTracker) const {
    return (reinterpret_cast<PFN_xrDestroyFaceTracker2FB>(pfnDestroyFaceTracker2FB))(faceTracker);
  }
#endif  // XR_FB_face_tracking2
#ifdef XR_FB_face_tracking2
  //! @brief Call xrGetFaceExpressionWeights2FB, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetFaceExpressionWeights2FB(
      XrFaceTracker2FB faceTracker, const XrFaceExpressionInfo2FB* expressionInfo,
      XrFaceExpressionWeights2FB* expressionWeights) {
    XrResult result = populate_("xrGetFaceExpressionWeights2FB", pfnGetFaceExpressionWeights2FB);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetFaceExpressionWeights2FB>(pfnGetFaceExpressionWeights2FB))(
        faceTracker, expressionInfo, expressionWeights);
  }

  //! @brief Call xrGetFaceExpressionWeights2FB (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetFaceExpressionWeights2FB(
      XrFaceTracker2FB faceTracker, const XrFaceExpressionInfo2FB* expressionInfo,
      XrFaceExpressionWeights2FB* expressionWeights) const {
    return (reinterpret_cast<PFN_xrGetFaceExpressionWeights2FB>(pfnGetFaceExpressionWeights2FB))(
        faceTracker, expressionInfo, expressionWeights);
  }
#endif  // XR_FB_face_tracking2
#ifdef XR_META_spatial_entity_sharing
  //! @brief Call xrShareSpacesMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrShareSpacesMETA(XrSession session, const XrShareSpacesInfoMETA* info,
                                               XrAsyncRequestIdFB* requestId) {
    XrResult result = populate_("xrShareSpacesMETA", pfnShareSpacesMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrShareSpacesMETA>(pfnShareSpacesMETA))(session, info, requestId);
  }

  //! @brief Call xrShareSpacesMETA (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrShareSpacesMETA(XrSession session, const XrShareSpacesInfoMETA* info,
                                               XrAsyncRequestIdFB* requestId) const {
    return (reinterpret_cast<PFN_xrShareSpacesMETA>(pfnShareSpacesMETA))(session, info, requestId);
  }
#endif  // XR_META_spatial_entity_sharing
#ifdef XR_META_environment_depth
  //! @brief Call xrCreateEnvironmentDepthProviderMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateEnvironmentDepthProviderMETA(
      XrSession session, const XrEnvironmentDepthProviderCreateInfoMETA* createInfo,
      XrEnvironmentDepthProviderMETA* environmentDepthProvider) {
    XrResult result =
        populate_("xrCreateEnvironmentDepthProviderMETA", pfnCreateEnvironmentDepthProviderMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateEnvironmentDepthProviderMETA>(
        pfnCreateEnvironmentDepthProviderMETA))(session, createInfo, environmentDepthProvider);
  }

  //! @brief Call xrCreateEnvironmentDepthProviderMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateEnvironmentDepthProviderMETA(
      XrSession session, const XrEnvironmentDepthProviderCreateInfoMETA* createInfo,
      XrEnvironmentDepthProviderMETA* environmentDepthProvider) const {
    return (reinterpret_cast<PFN_xrCreateEnvironmentDepthProviderMETA>(
        pfnCreateEnvironmentDepthProviderMETA))(session, createInfo, environmentDepthProvider);
  }
#endif  // XR_META_environment_depth
#ifdef XR_META_environment_depth
  //! @brief Call xrDestroyEnvironmentDepthProviderMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrDestroyEnvironmentDepthProviderMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider) {
    XrResult result =
        populate_("xrDestroyEnvironmentDepthProviderMETA", pfnDestroyEnvironmentDepthProviderMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyEnvironmentDepthProviderMETA>(
        pfnDestroyEnvironmentDepthProviderMETA))(environmentDepthProvider);
  }

  //! @brief Call xrDestroyEnvironmentDepthProviderMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyEnvironmentDepthProviderMETA(
      XrEnvironmentDepthProviderMETA environmentDepthProvider) const {
    return (reinterpret_cast<PFN_xrDestroyEnvironmentDepthProviderMETA>(
        pfnDestroyEnvironmentDepthProviderMETA))(environmentDepthProvider);
  }
#endif  // XR_META_environment_depth
#ifdef XR_META_environment_depth
  //! @brief Call xrStartEnvironmentDepthProviderMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrStartEnvironmentDepthProviderMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider) {
    XrResult result =
        populate_("xrStartEnvironmentDepthProviderMETA", pfnStartEnvironmentDepthProviderMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStartEnvironmentDepthProviderMETA>(
        pfnStartEnvironmentDepthProviderMETA))(environmentDepthProvider);
  }

  //! @brief Call xrStartEnvironmentDepthProviderMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrStartEnvironmentDepthProviderMETA(
      XrEnvironmentDepthProviderMETA environmentDepthProvider) const {
    return (reinterpret_cast<PFN_xrStartEnvironmentDepthProviderMETA>(
        pfnStartEnvironmentDepthProviderMETA))(environmentDepthProvider);
  }
#endif  // XR_META_environment_depth
#ifdef XR_META_environment_depth
  //! @brief Call xrStopEnvironmentDepthProviderMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrStopEnvironmentDepthProviderMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider) {
    XrResult result =
        populate_("xrStopEnvironmentDepthProviderMETA", pfnStopEnvironmentDepthProviderMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStopEnvironmentDepthProviderMETA>(
        pfnStopEnvironmentDepthProviderMETA))(environmentDepthProvider);
  }

  //! @brief Call xrStopEnvironmentDepthProviderMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrStopEnvironmentDepthProviderMETA(
      XrEnvironmentDepthProviderMETA environmentDepthProvider) const {
    return (reinterpret_cast<PFN_xrStopEnvironmentDepthProviderMETA>(
        pfnStopEnvironmentDepthProviderMETA))(environmentDepthProvider);
  }
#endif  // XR_META_environment_depth
#ifdef XR_META_environment_depth
  //! @brief Call xrCreateEnvironmentDepthSwapchainMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateEnvironmentDepthSwapchainMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider,
                                        const XrEnvironmentDepthSwapchainCreateInfoMETA* createInfo,
                                        XrEnvironmentDepthSwapchainMETA* swapchain) {
    XrResult result =
        populate_("xrCreateEnvironmentDepthSwapchainMETA", pfnCreateEnvironmentDepthSwapchainMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateEnvironmentDepthSwapchainMETA>(
        pfnCreateEnvironmentDepthSwapchainMETA))(environmentDepthProvider, createInfo, swapchain);
  }

  //! @brief Call xrCreateEnvironmentDepthSwapchainMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateEnvironmentDepthSwapchainMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider,
                                        const XrEnvironmentDepthSwapchainCreateInfoMETA* createInfo,
                                        XrEnvironmentDepthSwapchainMETA* swapchain) const {
    return (reinterpret_cast<PFN_xrCreateEnvironmentDepthSwapchainMETA>(
        pfnCreateEnvironmentDepthSwapchainMETA))(environmentDepthProvider, createInfo, swapchain);
  }
#endif  // XR_META_environment_depth
#ifdef XR_META_environment_depth
  //! @brief Call xrDestroyEnvironmentDepthSwapchainMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrDestroyEnvironmentDepthSwapchainMETA(XrEnvironmentDepthSwapchainMETA swapchain) {
    XrResult result = populate_("xrDestroyEnvironmentDepthSwapchainMETA",
                                pfnDestroyEnvironmentDepthSwapchainMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyEnvironmentDepthSwapchainMETA>(
        pfnDestroyEnvironmentDepthSwapchainMETA))(swapchain);
  }

  //! @brief Call xrDestroyEnvironmentDepthSwapchainMETA (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult
  xrDestroyEnvironmentDepthSwapchainMETA(XrEnvironmentDepthSwapchainMETA swapchain) const {
    return (reinterpret_cast<PFN_xrDestroyEnvironmentDepthSwapchainMETA>(
        pfnDestroyEnvironmentDepthSwapchainMETA))(swapchain);
  }
#endif  // XR_META_environment_depth
#ifdef XR_META_environment_depth
  //! @brief Call xrEnumerateEnvironmentDepthSwapchainImagesMETA, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrEnumerateEnvironmentDepthSwapchainImagesMETA(
      XrEnvironmentDepthSwapchainMETA swapchain, uint32_t imageCapacityInput,
      uint32_t* imageCountOutput, XrSwapchainImageBaseHeader* images) {
    XrResult result = populate_("xrEnumerateEnvironmentDepthSwapchainImagesMETA",
                                pfnEnumerateEnvironmentDepthSwapchainImagesMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateEnvironmentDepthSwapchainImagesMETA>(
        pfnEnumerateEnvironmentDepthSwapchainImagesMETA))(swapchain, imageCapacityInput,
                                                          imageCountOutput, images);
  }

  //! @brief Call xrEnumerateEnvironmentDepthSwapchainImagesMETA (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateEnvironmentDepthSwapchainImagesMETA(
      XrEnvironmentDepthSwapchainMETA swapchain, uint32_t imageCapacityInput,
      uint32_t* imageCountOutput, XrSwapchainImageBaseHeader* images) const {
    return (reinterpret_cast<PFN_xrEnumerateEnvironmentDepthSwapchainImagesMETA>(
        pfnEnumerateEnvironmentDepthSwapchainImagesMETA))(swapchain, imageCapacityInput,
                                                          imageCountOutput, images);
  }
#endif  // XR_META_environment_depth
#ifdef XR_META_environment_depth
  //! @brief Call xrGetEnvironmentDepthSwapchainStateMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetEnvironmentDepthSwapchainStateMETA(
      XrEnvironmentDepthSwapchainMETA swapchain, XrEnvironmentDepthSwapchainStateMETA* state) {
    XrResult result = populate_("xrGetEnvironmentDepthSwapchainStateMETA",
                                pfnGetEnvironmentDepthSwapchainStateMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetEnvironmentDepthSwapchainStateMETA>(
        pfnGetEnvironmentDepthSwapchainStateMETA))(swapchain, state);
  }

  //! @brief Call xrGetEnvironmentDepthSwapchainStateMETA (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult
  xrGetEnvironmentDepthSwapchainStateMETA(XrEnvironmentDepthSwapchainMETA swapchain,
                                          XrEnvironmentDepthSwapchainStateMETA* state) const {
    return (reinterpret_cast<PFN_xrGetEnvironmentDepthSwapchainStateMETA>(
        pfnGetEnvironmentDepthSwapchainStateMETA))(swapchain, state);
  }
#endif  // XR_META_environment_depth
#ifdef XR_META_environment_depth
  //! @brief Call xrAcquireEnvironmentDepthImageMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrAcquireEnvironmentDepthImageMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider,
                                     const XrEnvironmentDepthImageAcquireInfoMETA* acquireInfo,
                                     XrEnvironmentDepthImageMETA* environmentDepthImage) {
    XrResult result =
        populate_("xrAcquireEnvironmentDepthImageMETA", pfnAcquireEnvironmentDepthImageMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrAcquireEnvironmentDepthImageMETA>(
        pfnAcquireEnvironmentDepthImageMETA))(environmentDepthProvider, acquireInfo,
                                              environmentDepthImage);
  }

  //! @brief Call xrAcquireEnvironmentDepthImageMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrAcquireEnvironmentDepthImageMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider,
                                     const XrEnvironmentDepthImageAcquireInfoMETA* acquireInfo,
                                     XrEnvironmentDepthImageMETA* environmentDepthImage) const {
    return (reinterpret_cast<PFN_xrAcquireEnvironmentDepthImageMETA>(
        pfnAcquireEnvironmentDepthImageMETA))(environmentDepthProvider, acquireInfo,
                                              environmentDepthImage);
  }
#endif  // XR_META_environment_depth
#ifdef XR_META_environment_depth
  //! @brief Call xrSetEnvironmentDepthHandRemovalMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrSetEnvironmentDepthHandRemovalMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider,
                                       const XrEnvironmentDepthHandRemovalSetInfoMETA* setInfo) {
    XrResult result =
        populate_("xrSetEnvironmentDepthHandRemovalMETA", pfnSetEnvironmentDepthHandRemovalMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetEnvironmentDepthHandRemovalMETA>(
        pfnSetEnvironmentDepthHandRemovalMETA))(environmentDepthProvider, setInfo);
  }

  //! @brief Call xrSetEnvironmentDepthHandRemovalMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrSetEnvironmentDepthHandRemovalMETA(
      XrEnvironmentDepthProviderMETA environmentDepthProvider,
      const XrEnvironmentDepthHandRemovalSetInfoMETA* setInfo) const {
    return (reinterpret_cast<PFN_xrSetEnvironmentDepthHandRemovalMETA>(
        pfnSetEnvironmentDepthHandRemovalMETA))(environmentDepthProvider, setInfo);
  }
#endif  // XR_META_environment_depth
#ifdef XR_EXT_render_model
  //! @brief Call xrCreateRenderModelEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateRenderModelEXT(XrSession session,
                                                    const XrRenderModelCreateInfoEXT* createInfo,
                                                    XrRenderModelEXT* renderModel) {
    XrResult result = populate_("xrCreateRenderModelEXT", pfnCreateRenderModelEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateRenderModelEXT>(pfnCreateRenderModelEXT))(
        session, createInfo, renderModel);
  }

  //! @brief Call xrCreateRenderModelEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateRenderModelEXT(XrSession session,
                                                    const XrRenderModelCreateInfoEXT* createInfo,
                                                    XrRenderModelEXT* renderModel) const {
    return (reinterpret_cast<PFN_xrCreateRenderModelEXT>(pfnCreateRenderModelEXT))(
        session, createInfo, renderModel);
  }
#endif  // XR_EXT_render_model
#ifdef XR_EXT_render_model
  //! @brief Call xrDestroyRenderModelEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyRenderModelEXT(XrRenderModelEXT renderModel) {
    XrResult result = populate_("xrDestroyRenderModelEXT", pfnDestroyRenderModelEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyRenderModelEXT>(pfnDestroyRenderModelEXT))(renderModel);
  }

  //! @brief Call xrDestroyRenderModelEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyRenderModelEXT(XrRenderModelEXT renderModel) const {
    return (reinterpret_cast<PFN_xrDestroyRenderModelEXT>(pfnDestroyRenderModelEXT))(renderModel);
  }
#endif  // XR_EXT_render_model
#ifdef XR_EXT_render_model
  //! @brief Call xrGetRenderModelPropertiesEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetRenderModelPropertiesEXT(
      XrRenderModelEXT renderModel, const XrRenderModelPropertiesGetInfoEXT* getInfo,
      XrRenderModelPropertiesEXT* properties) {
    XrResult result = populate_("xrGetRenderModelPropertiesEXT", pfnGetRenderModelPropertiesEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelPropertiesEXT>(pfnGetRenderModelPropertiesEXT))(
        renderModel, getInfo, properties);
  }

  //! @brief Call xrGetRenderModelPropertiesEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetRenderModelPropertiesEXT(
      XrRenderModelEXT renderModel, const XrRenderModelPropertiesGetInfoEXT* getInfo,
      XrRenderModelPropertiesEXT* properties) const {
    return (reinterpret_cast<PFN_xrGetRenderModelPropertiesEXT>(pfnGetRenderModelPropertiesEXT))(
        renderModel, getInfo, properties);
  }
#endif  // XR_EXT_render_model
#ifdef XR_EXT_render_model
  //! @brief Call xrCreateRenderModelSpaceEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateRenderModelSpaceEXT(
      XrSession session, const XrRenderModelSpaceCreateInfoEXT* createInfo, XrSpace* space) {
    XrResult result = populate_("xrCreateRenderModelSpaceEXT", pfnCreateRenderModelSpaceEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateRenderModelSpaceEXT>(pfnCreateRenderModelSpaceEXT))(
        session, createInfo, space);
  }

  //! @brief Call xrCreateRenderModelSpaceEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateRenderModelSpaceEXT(
      XrSession session, const XrRenderModelSpaceCreateInfoEXT* createInfo, XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateRenderModelSpaceEXT>(pfnCreateRenderModelSpaceEXT))(
        session, createInfo, space);
  }
#endif  // XR_EXT_render_model
#ifdef XR_EXT_render_model
  //! @brief Call xrCreateRenderModelAssetEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateRenderModelAssetEXT(XrSession session, const XrRenderModelAssetCreateInfoEXT* createInfo,
                              XrRenderModelAssetEXT* asset) {
    XrResult result = populate_("xrCreateRenderModelAssetEXT", pfnCreateRenderModelAssetEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateRenderModelAssetEXT>(pfnCreateRenderModelAssetEXT))(
        session, createInfo, asset);
  }

  //! @brief Call xrCreateRenderModelAssetEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateRenderModelAssetEXT(XrSession session, const XrRenderModelAssetCreateInfoEXT* createInfo,
                              XrRenderModelAssetEXT* asset) const {
    return (reinterpret_cast<PFN_xrCreateRenderModelAssetEXT>(pfnCreateRenderModelAssetEXT))(
        session, createInfo, asset);
  }
#endif  // XR_EXT_render_model
#ifdef XR_EXT_render_model
  //! @brief Call xrDestroyRenderModelAssetEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyRenderModelAssetEXT(XrRenderModelAssetEXT asset) {
    XrResult result = populate_("xrDestroyRenderModelAssetEXT", pfnDestroyRenderModelAssetEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyRenderModelAssetEXT>(pfnDestroyRenderModelAssetEXT))(
        asset);
  }

  //! @brief Call xrDestroyRenderModelAssetEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyRenderModelAssetEXT(XrRenderModelAssetEXT asset) const {
    return (reinterpret_cast<PFN_xrDestroyRenderModelAssetEXT>(pfnDestroyRenderModelAssetEXT))(
        asset);
  }
#endif  // XR_EXT_render_model
#ifdef XR_EXT_render_model
  //! @brief Call xrGetRenderModelAssetDataEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetRenderModelAssetDataEXT(
      XrRenderModelAssetEXT asset, const XrRenderModelAssetDataGetInfoEXT* getInfo,
      XrRenderModelAssetDataEXT* buffer) {
    XrResult result = populate_("xrGetRenderModelAssetDataEXT", pfnGetRenderModelAssetDataEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelAssetDataEXT>(pfnGetRenderModelAssetDataEXT))(
        asset, getInfo, buffer);
  }

  //! @brief Call xrGetRenderModelAssetDataEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetRenderModelAssetDataEXT(
      XrRenderModelAssetEXT asset, const XrRenderModelAssetDataGetInfoEXT* getInfo,
      XrRenderModelAssetDataEXT* buffer) const {
    return (reinterpret_cast<PFN_xrGetRenderModelAssetDataEXT>(pfnGetRenderModelAssetDataEXT))(
        asset, getInfo, buffer);
  }
#endif  // XR_EXT_render_model
#ifdef XR_EXT_render_model
  //! @brief Call xrGetRenderModelAssetPropertiesEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetRenderModelAssetPropertiesEXT(
      XrRenderModelAssetEXT asset, const XrRenderModelAssetPropertiesGetInfoEXT* getInfo,
      XrRenderModelAssetPropertiesEXT* properties) {
    XrResult result =
        populate_("xrGetRenderModelAssetPropertiesEXT", pfnGetRenderModelAssetPropertiesEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelAssetPropertiesEXT>(
        pfnGetRenderModelAssetPropertiesEXT))(asset, getInfo, properties);
  }

  //! @brief Call xrGetRenderModelAssetPropertiesEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetRenderModelAssetPropertiesEXT(
      XrRenderModelAssetEXT asset, const XrRenderModelAssetPropertiesGetInfoEXT* getInfo,
      XrRenderModelAssetPropertiesEXT* properties) const {
    return (reinterpret_cast<PFN_xrGetRenderModelAssetPropertiesEXT>(
        pfnGetRenderModelAssetPropertiesEXT))(asset, getInfo, properties);
  }
#endif  // XR_EXT_render_model
#ifdef XR_EXT_render_model
  //! @brief Call xrGetRenderModelStateEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetRenderModelStateEXT(XrRenderModelEXT renderModel,
                                                      const XrRenderModelStateGetInfoEXT* getInfo,
                                                      XrRenderModelStateEXT* state) {
    XrResult result = populate_("xrGetRenderModelStateEXT", pfnGetRenderModelStateEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelStateEXT>(pfnGetRenderModelStateEXT))(
        renderModel, getInfo, state);
  }

  //! @brief Call xrGetRenderModelStateEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetRenderModelStateEXT(XrRenderModelEXT renderModel,
                                                      const XrRenderModelStateGetInfoEXT* getInfo,
                                                      XrRenderModelStateEXT* state) const {
    return (reinterpret_cast<PFN_xrGetRenderModelStateEXT>(pfnGetRenderModelStateEXT))(
        renderModel, getInfo, state);
  }
#endif  // XR_EXT_render_model
#ifdef XR_EXT_interaction_render_model
  //! @brief Call xrEnumerateInteractionRenderModelIdsEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateInteractionRenderModelIdsEXT(
      XrSession session, const XrInteractionRenderModelIdsEnumerateInfoEXT* getInfo,
      uint32_t renderModelIdCapacityInput, uint32_t* renderModelIdCountOutput,
      XrRenderModelIdEXT* renderModelIds) {
    XrResult result = populate_("xrEnumerateInteractionRenderModelIdsEXT",
                                pfnEnumerateInteractionRenderModelIdsEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateInteractionRenderModelIdsEXT>(
        pfnEnumerateInteractionRenderModelIdsEXT))(session, getInfo, renderModelIdCapacityInput,
                                                   renderModelIdCountOutput, renderModelIds);
  }

  //! @brief Call xrEnumerateInteractionRenderModelIdsEXT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateInteractionRenderModelIdsEXT(
      XrSession session, const XrInteractionRenderModelIdsEnumerateInfoEXT* getInfo,
      uint32_t renderModelIdCapacityInput, uint32_t* renderModelIdCountOutput,
      XrRenderModelIdEXT* renderModelIds) const {
    return (reinterpret_cast<PFN_xrEnumerateInteractionRenderModelIdsEXT>(
        pfnEnumerateInteractionRenderModelIdsEXT))(session, getInfo, renderModelIdCapacityInput,
                                                   renderModelIdCountOutput, renderModelIds);
  }
#endif  // XR_EXT_interaction_render_model
#ifdef XR_EXT_interaction_render_model
  //! @brief Call xrEnumerateRenderModelSubactionPathsEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateRenderModelSubactionPathsEXT(
      XrRenderModelEXT renderModel, const XrInteractionRenderModelSubactionPathInfoEXT* info,
      uint32_t pathCapacityInput, uint32_t* pathCountOutput, XrPath* paths) {
    XrResult result = populate_("xrEnumerateRenderModelSubactionPathsEXT",
                                pfnEnumerateRenderModelSubactionPathsEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateRenderModelSubactionPathsEXT>(
        pfnEnumerateRenderModelSubactionPathsEXT))(renderModel, info, pathCapacityInput,
                                                   pathCountOutput, paths);
  }

  //! @brief Call xrEnumerateRenderModelSubactionPathsEXT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateRenderModelSubactionPathsEXT(
      XrRenderModelEXT renderModel, const XrInteractionRenderModelSubactionPathInfoEXT* info,
      uint32_t pathCapacityInput, uint32_t* pathCountOutput, XrPath* paths) const {
    return (reinterpret_cast<PFN_xrEnumerateRenderModelSubactionPathsEXT>(
        pfnEnumerateRenderModelSubactionPathsEXT))(renderModel, info, pathCapacityInput,
                                                   pathCountOutput, paths);
  }
#endif  // XR_EXT_interaction_render_model
#ifdef XR_EXT_interaction_render_model
  //! @brief Call xrGetRenderModelPoseTopLevelUserPathEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetRenderModelPoseTopLevelUserPathEXT(
      XrRenderModelEXT renderModel, const XrInteractionRenderModelTopLevelUserPathGetInfoEXT* info,
      XrPath* topLevelUserPath) {
    XrResult result = populate_("xrGetRenderModelPoseTopLevelUserPathEXT",
                                pfnGetRenderModelPoseTopLevelUserPathEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelPoseTopLevelUserPathEXT>(
        pfnGetRenderModelPoseTopLevelUserPathEXT))(renderModel, info, topLevelUserPath);
  }

  //! @brief Call xrGetRenderModelPoseTopLevelUserPathEXT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrGetRenderModelPoseTopLevelUserPathEXT(
      XrRenderModelEXT renderModel, const XrInteractionRenderModelTopLevelUserPathGetInfoEXT* info,
      XrPath* topLevelUserPath) const {
    return (reinterpret_cast<PFN_xrGetRenderModelPoseTopLevelUserPathEXT>(
        pfnGetRenderModelPoseTopLevelUserPathEXT))(renderModel, info, topLevelUserPath);
  }
#endif  // XR_EXT_interaction_render_model
#ifdef XR_QCOM_tracking_optimization_settings
  //! @brief Call xrSetTrackingOptimizationSettingsHintQCOM, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrSetTrackingOptimizationSettingsHintQCOM(
      XrSession session, XrTrackingOptimizationSettingsDomainQCOM domain,
      XrTrackingOptimizationSettingsHintQCOM hint) {
    XrResult result = populate_("xrSetTrackingOptimizationSettingsHintQCOM",
                                pfnSetTrackingOptimizationSettingsHintQCOM);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetTrackingOptimizationSettingsHintQCOM>(
        pfnSetTrackingOptimizationSettingsHintQCOM))(session, domain, hint);
  }

  //! @brief Call xrSetTrackingOptimizationSettingsHintQCOM (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrSetTrackingOptimizationSettingsHintQCOM(
      XrSession session, XrTrackingOptimizationSettingsDomainQCOM domain,
      XrTrackingOptimizationSettingsHintQCOM hint) const {
    return (reinterpret_cast<PFN_xrSetTrackingOptimizationSettingsHintQCOM>(
        pfnSetTrackingOptimizationSettingsHintQCOM))(session, domain, hint);
  }
#endif  // XR_QCOM_tracking_optimization_settings
#ifdef XR_HTC_passthrough
  //! @brief Call xrCreatePassthroughHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreatePassthroughHTC(XrSession session,
                                                    const XrPassthroughCreateInfoHTC* createInfo,
                                                    XrPassthroughHTC* passthrough) {
    XrResult result = populate_("xrCreatePassthroughHTC", pfnCreatePassthroughHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreatePassthroughHTC>(pfnCreatePassthroughHTC))(
        session, createInfo, passthrough);
  }

  //! @brief Call xrCreatePassthroughHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreatePassthroughHTC(XrSession session,
                                                    const XrPassthroughCreateInfoHTC* createInfo,
                                                    XrPassthroughHTC* passthrough) const {
    return (reinterpret_cast<PFN_xrCreatePassthroughHTC>(pfnCreatePassthroughHTC))(
        session, createInfo, passthrough);
  }
#endif  // XR_HTC_passthrough
#ifdef XR_HTC_passthrough
  //! @brief Call xrDestroyPassthroughHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyPassthroughHTC(XrPassthroughHTC passthrough) {
    XrResult result = populate_("xrDestroyPassthroughHTC", pfnDestroyPassthroughHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyPassthroughHTC>(pfnDestroyPassthroughHTC))(passthrough);
  }

  //! @brief Call xrDestroyPassthroughHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyPassthroughHTC(XrPassthroughHTC passthrough) const {
    return (reinterpret_cast<PFN_xrDestroyPassthroughHTC>(pfnDestroyPassthroughHTC))(passthrough);
  }
#endif  // XR_HTC_passthrough
#ifdef XR_HTC_foveation
  //! @brief Call xrApplyFoveationHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrApplyFoveationHTC(XrSession session,
                                                 const XrFoveationApplyInfoHTC* applyInfo) {
    XrResult result = populate_("xrApplyFoveationHTC", pfnApplyFoveationHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrApplyFoveationHTC>(pfnApplyFoveationHTC))(session, applyInfo);
  }

  //! @brief Call xrApplyFoveationHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrApplyFoveationHTC(XrSession session,
                                                 const XrFoveationApplyInfoHTC* applyInfo) const {
    return (reinterpret_cast<PFN_xrApplyFoveationHTC>(pfnApplyFoveationHTC))(session, applyInfo);
  }
#endif  // XR_HTC_foveation
#ifdef XR_HTC_anchor
  //! @brief Call xrCreateSpatialAnchorHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorHTC(
      XrSession session, const XrSpatialAnchorCreateInfoHTC* createInfo, XrSpace* anchor) {
    XrResult result = populate_("xrCreateSpatialAnchorHTC", pfnCreateSpatialAnchorHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorHTC>(pfnCreateSpatialAnchorHTC))(
        session, createInfo, anchor);
  }

  //! @brief Call xrCreateSpatialAnchorHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorHTC(
      XrSession session, const XrSpatialAnchorCreateInfoHTC* createInfo, XrSpace* anchor) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorHTC>(pfnCreateSpatialAnchorHTC))(
        session, createInfo, anchor);
  }
#endif  // XR_HTC_anchor
#ifdef XR_HTC_anchor
  //! @brief Call xrGetSpatialAnchorNameHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpatialAnchorNameHTC(XrSpace anchor,
                                                       XrSpatialAnchorNameHTC* name) {
    XrResult result = populate_("xrGetSpatialAnchorNameHTC", pfnGetSpatialAnchorNameHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpatialAnchorNameHTC>(pfnGetSpatialAnchorNameHTC))(anchor,
                                                                                         name);
  }

  //! @brief Call xrGetSpatialAnchorNameHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpatialAnchorNameHTC(XrSpace anchor,
                                                       XrSpatialAnchorNameHTC* name) const {
    return (reinterpret_cast<PFN_xrGetSpatialAnchorNameHTC>(pfnGetSpatialAnchorNameHTC))(anchor,
                                                                                         name);
  }
#endif  // XR_HTC_anchor
#ifdef XR_HTC_body_tracking
  //! @brief Call xrCreateBodyTrackerHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateBodyTrackerHTC(XrSession session,
                                                    const XrBodyTrackerCreateInfoHTC* createInfo,
                                                    XrBodyTrackerHTC* bodyTracker) {
    XrResult result = populate_("xrCreateBodyTrackerHTC", pfnCreateBodyTrackerHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateBodyTrackerHTC>(pfnCreateBodyTrackerHTC))(
        session, createInfo, bodyTracker);
  }

  //! @brief Call xrCreateBodyTrackerHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateBodyTrackerHTC(XrSession session,
                                                    const XrBodyTrackerCreateInfoHTC* createInfo,
                                                    XrBodyTrackerHTC* bodyTracker) const {
    return (reinterpret_cast<PFN_xrCreateBodyTrackerHTC>(pfnCreateBodyTrackerHTC))(
        session, createInfo, bodyTracker);
  }
#endif  // XR_HTC_body_tracking
#ifdef XR_HTC_body_tracking
  //! @brief Call xrDestroyBodyTrackerHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyBodyTrackerHTC(XrBodyTrackerHTC bodyTracker) {
    XrResult result = populate_("xrDestroyBodyTrackerHTC", pfnDestroyBodyTrackerHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyBodyTrackerHTC>(pfnDestroyBodyTrackerHTC))(bodyTracker);
  }

  //! @brief Call xrDestroyBodyTrackerHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyBodyTrackerHTC(XrBodyTrackerHTC bodyTracker) const {
    return (reinterpret_cast<PFN_xrDestroyBodyTrackerHTC>(pfnDestroyBodyTrackerHTC))(bodyTracker);
  }
#endif  // XR_HTC_body_tracking
#ifdef XR_HTC_body_tracking
  //! @brief Call xrLocateBodyJointsHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLocateBodyJointsHTC(XrBodyTrackerHTC bodyTracker,
                                                   const XrBodyJointsLocateInfoHTC* locateInfo,
                                                   XrBodyJointLocationsHTC* locations) {
    XrResult result = populate_("xrLocateBodyJointsHTC", pfnLocateBodyJointsHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateBodyJointsHTC>(pfnLocateBodyJointsHTC))(
        bodyTracker, locateInfo, locations);
  }

  //! @brief Call xrLocateBodyJointsHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLocateBodyJointsHTC(XrBodyTrackerHTC bodyTracker,
                                                   const XrBodyJointsLocateInfoHTC* locateInfo,
                                                   XrBodyJointLocationsHTC* locations) const {
    return (reinterpret_cast<PFN_xrLocateBodyJointsHTC>(pfnLocateBodyJointsHTC))(
        bodyTracker, locateInfo, locations);
  }
#endif  // XR_HTC_body_tracking
#ifdef XR_HTC_body_tracking
  //! @brief Call xrGetBodySkeletonHTC, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetBodySkeletonHTC(XrBodyTrackerHTC bodyTracker, XrSpace baseSpace,
                                                  uint32_t skeletonGenerationId,
                                                  XrBodySkeletonHTC* skeleton) {
    XrResult result = populate_("xrGetBodySkeletonHTC", pfnGetBodySkeletonHTC);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetBodySkeletonHTC>(pfnGetBodySkeletonHTC))(
        bodyTracker, baseSpace, skeletonGenerationId, skeleton);
  }

  //! @brief Call xrGetBodySkeletonHTC (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetBodySkeletonHTC(XrBodyTrackerHTC bodyTracker, XrSpace baseSpace,
                                                  uint32_t skeletonGenerationId,
                                                  XrBodySkeletonHTC* skeleton) const {
    return (reinterpret_cast<PFN_xrGetBodySkeletonHTC>(pfnGetBodySkeletonHTC))(
        bodyTracker, baseSpace, skeletonGenerationId, skeleton);
  }
#endif  // XR_HTC_body_tracking
#ifdef XR_MNDX_force_feedback_curl
  //! @brief Call xrApplyForceFeedbackCurlMNDX, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrApplyForceFeedbackCurlMNDX(
      XrHandTrackerEXT handTracker, const XrForceFeedbackCurlApplyLocationsMNDX* locations) {
    XrResult result = populate_("xrApplyForceFeedbackCurlMNDX", pfnApplyForceFeedbackCurlMNDX);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrApplyForceFeedbackCurlMNDX>(pfnApplyForceFeedbackCurlMNDX))(
        handTracker, locations);
  }

  //! @brief Call xrApplyForceFeedbackCurlMNDX (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrApplyForceFeedbackCurlMNDX(
      XrHandTrackerEXT handTracker, const XrForceFeedbackCurlApplyLocationsMNDX* locations) const {
    return (reinterpret_cast<PFN_xrApplyForceFeedbackCurlMNDX>(pfnApplyForceFeedbackCurlMNDX))(
        handTracker, locations);
  }
#endif  // XR_MNDX_force_feedback_curl
#ifdef XR_BD_body_tracking
  //! @brief Call xrCreateBodyTrackerBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateBodyTrackerBD(XrSession session,
                                                   const XrBodyTrackerCreateInfoBD* createInfo,
                                                   XrBodyTrackerBD* bodyTracker) {
    XrResult result = populate_("xrCreateBodyTrackerBD", pfnCreateBodyTrackerBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateBodyTrackerBD>(pfnCreateBodyTrackerBD))(
        session, createInfo, bodyTracker);
  }

  //! @brief Call xrCreateBodyTrackerBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateBodyTrackerBD(XrSession session,
                                                   const XrBodyTrackerCreateInfoBD* createInfo,
                                                   XrBodyTrackerBD* bodyTracker) const {
    return (reinterpret_cast<PFN_xrCreateBodyTrackerBD>(pfnCreateBodyTrackerBD))(
        session, createInfo, bodyTracker);
  }
#endif  // XR_BD_body_tracking
#ifdef XR_BD_body_tracking
  //! @brief Call xrDestroyBodyTrackerBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyBodyTrackerBD(XrBodyTrackerBD bodyTracker) {
    XrResult result = populate_("xrDestroyBodyTrackerBD", pfnDestroyBodyTrackerBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyBodyTrackerBD>(pfnDestroyBodyTrackerBD))(bodyTracker);
  }

  //! @brief Call xrDestroyBodyTrackerBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyBodyTrackerBD(XrBodyTrackerBD bodyTracker) const {
    return (reinterpret_cast<PFN_xrDestroyBodyTrackerBD>(pfnDestroyBodyTrackerBD))(bodyTracker);
  }
#endif  // XR_BD_body_tracking
#ifdef XR_BD_body_tracking
  //! @brief Call xrLocateBodyJointsBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrLocateBodyJointsBD(XrBodyTrackerBD bodyTracker,
                                                  const XrBodyJointsLocateInfoBD* locateInfo,
                                                  XrBodyJointLocationsBD* locations) {
    XrResult result = populate_("xrLocateBodyJointsBD", pfnLocateBodyJointsBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrLocateBodyJointsBD>(pfnLocateBodyJointsBD))(
        bodyTracker, locateInfo, locations);
  }

  //! @brief Call xrLocateBodyJointsBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrLocateBodyJointsBD(XrBodyTrackerBD bodyTracker,
                                                  const XrBodyJointsLocateInfoBD* locateInfo,
                                                  XrBodyJointLocationsBD* locations) const {
    return (reinterpret_cast<PFN_xrLocateBodyJointsBD>(pfnLocateBodyJointsBD))(
        bodyTracker, locateInfo, locations);
  }
#endif  // XR_BD_body_tracking
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrEnumerateSpatialEntityComponentTypesBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateSpatialEntityComponentTypesBD(
      XrSenseDataSnapshotBD snapshot, XrSpatialEntityIdBD entityId,
      uint32_t componentTypeCapacityInput, uint32_t* componentTypeCountOutput,
      XrSpatialEntityComponentTypeBD* componentTypes) {
    XrResult result = populate_("xrEnumerateSpatialEntityComponentTypesBD",
                                pfnEnumerateSpatialEntityComponentTypesBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateSpatialEntityComponentTypesBD>(
        pfnEnumerateSpatialEntityComponentTypesBD))(snapshot, entityId, componentTypeCapacityInput,
                                                    componentTypeCountOutput, componentTypes);
  }

  //! @brief Call xrEnumerateSpatialEntityComponentTypesBD (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateSpatialEntityComponentTypesBD(
      XrSenseDataSnapshotBD snapshot, XrSpatialEntityIdBD entityId,
      uint32_t componentTypeCapacityInput, uint32_t* componentTypeCountOutput,
      XrSpatialEntityComponentTypeBD* componentTypes) const {
    return (reinterpret_cast<PFN_xrEnumerateSpatialEntityComponentTypesBD>(
        pfnEnumerateSpatialEntityComponentTypesBD))(snapshot, entityId, componentTypeCapacityInput,
                                                    componentTypeCountOutput, componentTypes);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrGetSpatialEntityUuidBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpatialEntityUuidBD(XrSenseDataSnapshotBD snapshot,
                                                      XrSpatialEntityIdBD entityId,
                                                      XrUuidEXT* uuid) {
    XrResult result = populate_("xrGetSpatialEntityUuidBD", pfnGetSpatialEntityUuidBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpatialEntityUuidBD>(pfnGetSpatialEntityUuidBD))(
        snapshot, entityId, uuid);
  }

  //! @brief Call xrGetSpatialEntityUuidBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpatialEntityUuidBD(XrSenseDataSnapshotBD snapshot,
                                                      XrSpatialEntityIdBD entityId,
                                                      XrUuidEXT* uuid) const {
    return (reinterpret_cast<PFN_xrGetSpatialEntityUuidBD>(pfnGetSpatialEntityUuidBD))(
        snapshot, entityId, uuid);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrGetSpatialEntityComponentDataBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpatialEntityComponentDataBD(
      XrSenseDataSnapshotBD snapshot, const XrSpatialEntityComponentGetInfoBD* getInfo,
      XrSpatialEntityComponentDataBaseHeaderBD* componentData) {
    XrResult result =
        populate_("xrGetSpatialEntityComponentDataBD", pfnGetSpatialEntityComponentDataBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpatialEntityComponentDataBD>(
        pfnGetSpatialEntityComponentDataBD))(snapshot, getInfo, componentData);
  }

  //! @brief Call xrGetSpatialEntityComponentDataBD (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpatialEntityComponentDataBD(
      XrSenseDataSnapshotBD snapshot, const XrSpatialEntityComponentGetInfoBD* getInfo,
      XrSpatialEntityComponentDataBaseHeaderBD* componentData) const {
    return (reinterpret_cast<PFN_xrGetSpatialEntityComponentDataBD>(
        pfnGetSpatialEntityComponentDataBD))(snapshot, getInfo, componentData);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrCreateSenseDataProviderBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateSenseDataProviderBD(XrSession session, const XrSenseDataProviderCreateInfoBD* createInfo,
                              XrSenseDataProviderBD* provider) {
    XrResult result = populate_("xrCreateSenseDataProviderBD", pfnCreateSenseDataProviderBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSenseDataProviderBD>(pfnCreateSenseDataProviderBD))(
        session, createInfo, provider);
  }

  //! @brief Call xrCreateSenseDataProviderBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateSenseDataProviderBD(XrSession session, const XrSenseDataProviderCreateInfoBD* createInfo,
                              XrSenseDataProviderBD* provider) const {
    return (reinterpret_cast<PFN_xrCreateSenseDataProviderBD>(pfnCreateSenseDataProviderBD))(
        session, createInfo, provider);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrStartSenseDataProviderAsyncBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrStartSenseDataProviderAsyncBD(
      XrSenseDataProviderBD provider, const XrSenseDataProviderStartInfoBD* startInfo,
      XrFutureEXT* future) {
    XrResult result =
        populate_("xrStartSenseDataProviderAsyncBD", pfnStartSenseDataProviderAsyncBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStartSenseDataProviderAsyncBD>(
        pfnStartSenseDataProviderAsyncBD))(provider, startInfo, future);
  }

  //! @brief Call xrStartSenseDataProviderAsyncBD (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrStartSenseDataProviderAsyncBD(
      XrSenseDataProviderBD provider, const XrSenseDataProviderStartInfoBD* startInfo,
      XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrStartSenseDataProviderAsyncBD>(
        pfnStartSenseDataProviderAsyncBD))(provider, startInfo, future);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrStartSenseDataProviderCompleteBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrStartSenseDataProviderCompleteBD(XrSession session,
                                                                XrFutureEXT future,
                                                                XrFutureCompletionEXT* completion) {
    XrResult result =
        populate_("xrStartSenseDataProviderCompleteBD", pfnStartSenseDataProviderCompleteBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStartSenseDataProviderCompleteBD>(
        pfnStartSenseDataProviderCompleteBD))(session, future, completion);
  }

  //! @brief Call xrStartSenseDataProviderCompleteBD (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrStartSenseDataProviderCompleteBD(
      XrSession session, XrFutureEXT future, XrFutureCompletionEXT* completion) const {
    return (reinterpret_cast<PFN_xrStartSenseDataProviderCompleteBD>(
        pfnStartSenseDataProviderCompleteBD))(session, future, completion);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrGetSenseDataProviderStateBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSenseDataProviderStateBD(XrSenseDataProviderBD provider,
                                                           XrSenseDataProviderStateBD* state) {
    XrResult result = populate_("xrGetSenseDataProviderStateBD", pfnGetSenseDataProviderStateBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSenseDataProviderStateBD>(pfnGetSenseDataProviderStateBD))(
        provider, state);
  }

  //! @brief Call xrGetSenseDataProviderStateBD (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetSenseDataProviderStateBD(
      XrSenseDataProviderBD provider, XrSenseDataProviderStateBD* state) const {
    return (reinterpret_cast<PFN_xrGetSenseDataProviderStateBD>(pfnGetSenseDataProviderStateBD))(
        provider, state);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrQuerySenseDataAsyncBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrQuerySenseDataAsyncBD(XrSenseDataProviderBD provider,
                                                     const XrSenseDataQueryInfoBD* queryInfo,
                                                     XrFutureEXT* future) {
    XrResult result = populate_("xrQuerySenseDataAsyncBD", pfnQuerySenseDataAsyncBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrQuerySenseDataAsyncBD>(pfnQuerySenseDataAsyncBD))(
        provider, queryInfo, future);
  }

  //! @brief Call xrQuerySenseDataAsyncBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrQuerySenseDataAsyncBD(XrSenseDataProviderBD provider,
                                                     const XrSenseDataQueryInfoBD* queryInfo,
                                                     XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrQuerySenseDataAsyncBD>(pfnQuerySenseDataAsyncBD))(
        provider, queryInfo, future);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrQuerySenseDataCompleteBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrQuerySenseDataCompleteBD(XrSenseDataProviderBD provider,
                                                        XrFutureEXT future,
                                                        XrSenseDataQueryCompletionBD* completion) {
    XrResult result = populate_("xrQuerySenseDataCompleteBD", pfnQuerySenseDataCompleteBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrQuerySenseDataCompleteBD>(pfnQuerySenseDataCompleteBD))(
        provider, future, completion);
  }

  //! @brief Call xrQuerySenseDataCompleteBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrQuerySenseDataCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future,
                             XrSenseDataQueryCompletionBD* completion) const {
    return (reinterpret_cast<PFN_xrQuerySenseDataCompleteBD>(pfnQuerySenseDataCompleteBD))(
        provider, future, completion);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrDestroySenseDataSnapshotBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySenseDataSnapshotBD(XrSenseDataSnapshotBD snapshot) {
    XrResult result = populate_("xrDestroySenseDataSnapshotBD", pfnDestroySenseDataSnapshotBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySenseDataSnapshotBD>(pfnDestroySenseDataSnapshotBD))(
        snapshot);
  }

  //! @brief Call xrDestroySenseDataSnapshotBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySenseDataSnapshotBD(XrSenseDataSnapshotBD snapshot) const {
    return (reinterpret_cast<PFN_xrDestroySenseDataSnapshotBD>(pfnDestroySenseDataSnapshotBD))(
        snapshot);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrGetQueriedSenseDataBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetQueriedSenseDataBD(XrSenseDataSnapshotBD snapshot,
                                                     XrQueriedSenseDataGetInfoBD* getInfo,
                                                     XrQueriedSenseDataBD* queriedSenseData) {
    XrResult result = populate_("xrGetQueriedSenseDataBD", pfnGetQueriedSenseDataBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetQueriedSenseDataBD>(pfnGetQueriedSenseDataBD))(
        snapshot, getInfo, queriedSenseData);
  }

  //! @brief Call xrGetQueriedSenseDataBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetQueriedSenseDataBD(XrSenseDataSnapshotBD snapshot,
                                                     XrQueriedSenseDataGetInfoBD* getInfo,
                                                     XrQueriedSenseDataBD* queriedSenseData) const {
    return (reinterpret_cast<PFN_xrGetQueriedSenseDataBD>(pfnGetQueriedSenseDataBD))(
        snapshot, getInfo, queriedSenseData);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrStopSenseDataProviderBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrStopSenseDataProviderBD(XrSenseDataProviderBD provider) {
    XrResult result = populate_("xrStopSenseDataProviderBD", pfnStopSenseDataProviderBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStopSenseDataProviderBD>(pfnStopSenseDataProviderBD))(provider);
  }

  //! @brief Call xrStopSenseDataProviderBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrStopSenseDataProviderBD(XrSenseDataProviderBD provider) const {
    return (reinterpret_cast<PFN_xrStopSenseDataProviderBD>(pfnStopSenseDataProviderBD))(provider);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrDestroySenseDataProviderBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySenseDataProviderBD(XrSenseDataProviderBD provider) {
    XrResult result = populate_("xrDestroySenseDataProviderBD", pfnDestroySenseDataProviderBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySenseDataProviderBD>(pfnDestroySenseDataProviderBD))(
        provider);
  }

  //! @brief Call xrDestroySenseDataProviderBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySenseDataProviderBD(XrSenseDataProviderBD provider) const {
    return (reinterpret_cast<PFN_xrDestroySenseDataProviderBD>(pfnDestroySenseDataProviderBD))(
        provider);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrCreateSpatialEntityAnchorBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialEntityAnchorBD(
      XrSenseDataProviderBD provider, const XrSpatialEntityAnchorCreateInfoBD* createInfo,
      XrAnchorBD* anchor) {
    XrResult result = populate_("xrCreateSpatialEntityAnchorBD", pfnCreateSpatialEntityAnchorBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialEntityAnchorBD>(pfnCreateSpatialEntityAnchorBD))(
        provider, createInfo, anchor);
  }

  //! @brief Call xrCreateSpatialEntityAnchorBD (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialEntityAnchorBD(
      XrSenseDataProviderBD provider, const XrSpatialEntityAnchorCreateInfoBD* createInfo,
      XrAnchorBD* anchor) const {
    return (reinterpret_cast<PFN_xrCreateSpatialEntityAnchorBD>(pfnCreateSpatialEntityAnchorBD))(
        provider, createInfo, anchor);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrDestroyAnchorBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyAnchorBD(XrAnchorBD anchor) {
    XrResult result = populate_("xrDestroyAnchorBD", pfnDestroyAnchorBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyAnchorBD>(pfnDestroyAnchorBD))(anchor);
  }

  //! @brief Call xrDestroyAnchorBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyAnchorBD(XrAnchorBD anchor) const {
    return (reinterpret_cast<PFN_xrDestroyAnchorBD>(pfnDestroyAnchorBD))(anchor);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrGetAnchorUuidBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetAnchorUuidBD(XrAnchorBD anchor, XrUuidEXT* uuid) {
    XrResult result = populate_("xrGetAnchorUuidBD", pfnGetAnchorUuidBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetAnchorUuidBD>(pfnGetAnchorUuidBD))(anchor, uuid);
  }

  //! @brief Call xrGetAnchorUuidBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetAnchorUuidBD(XrAnchorBD anchor, XrUuidEXT* uuid) const {
    return (reinterpret_cast<PFN_xrGetAnchorUuidBD>(pfnGetAnchorUuidBD))(anchor, uuid);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_sensing
  //! @brief Call xrCreateAnchorSpaceBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateAnchorSpaceBD(XrSession session,
                                                   const XrAnchorSpaceCreateInfoBD* createInfo,
                                                   XrSpace* space) {
    XrResult result = populate_("xrCreateAnchorSpaceBD", pfnCreateAnchorSpaceBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateAnchorSpaceBD>(pfnCreateAnchorSpaceBD))(session,
                                                                                 createInfo, space);
  }

  //! @brief Call xrCreateAnchorSpaceBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateAnchorSpaceBD(XrSession session,
                                                   const XrAnchorSpaceCreateInfoBD* createInfo,
                                                   XrSpace* space) const {
    return (reinterpret_cast<PFN_xrCreateAnchorSpaceBD>(pfnCreateAnchorSpaceBD))(session,
                                                                                 createInfo, space);
  }
#endif  // XR_BD_spatial_sensing
#ifdef XR_BD_spatial_anchor
  //! @brief Call xrCreateSpatialAnchorAsyncBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorAsyncBD(XrSenseDataProviderBD provider,
                                                          const XrSpatialAnchorCreateInfoBD* info,
                                                          XrFutureEXT* future) {
    XrResult result = populate_("xrCreateSpatialAnchorAsyncBD", pfnCreateSpatialAnchorAsyncBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorAsyncBD>(pfnCreateSpatialAnchorAsyncBD))(
        provider, info, future);
  }

  //! @brief Call xrCreateSpatialAnchorAsyncBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorAsyncBD(XrSenseDataProviderBD provider,
                                                          const XrSpatialAnchorCreateInfoBD* info,
                                                          XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorAsyncBD>(pfnCreateSpatialAnchorAsyncBD))(
        provider, info, future);
  }
#endif  // XR_BD_spatial_anchor
#ifdef XR_BD_spatial_anchor
  //! @brief Call xrCreateSpatialAnchorCompleteBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateSpatialAnchorCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future,
                                  XrSpatialAnchorCreateCompletionBD* completion) {
    XrResult result =
        populate_("xrCreateSpatialAnchorCompleteBD", pfnCreateSpatialAnchorCompleteBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorCompleteBD>(
        pfnCreateSpatialAnchorCompleteBD))(provider, future, completion);
  }

  //! @brief Call xrCreateSpatialAnchorCompleteBD (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateSpatialAnchorCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future,
                                  XrSpatialAnchorCreateCompletionBD* completion) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorCompleteBD>(
        pfnCreateSpatialAnchorCompleteBD))(provider, future, completion);
  }
#endif  // XR_BD_spatial_anchor
#ifdef XR_BD_spatial_anchor
  //! @brief Call xrPersistSpatialAnchorAsyncBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPersistSpatialAnchorAsyncBD(XrSenseDataProviderBD provider,
                                                           const XrSpatialAnchorPersistInfoBD* info,
                                                           XrFutureEXT* future) {
    XrResult result = populate_("xrPersistSpatialAnchorAsyncBD", pfnPersistSpatialAnchorAsyncBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPersistSpatialAnchorAsyncBD>(pfnPersistSpatialAnchorAsyncBD))(
        provider, info, future);
  }

  //! @brief Call xrPersistSpatialAnchorAsyncBD (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrPersistSpatialAnchorAsyncBD(XrSenseDataProviderBD provider,
                                                           const XrSpatialAnchorPersistInfoBD* info,
                                                           XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrPersistSpatialAnchorAsyncBD>(pfnPersistSpatialAnchorAsyncBD))(
        provider, info, future);
  }
#endif  // XR_BD_spatial_anchor
#ifdef XR_BD_spatial_anchor
  //! @brief Call xrPersistSpatialAnchorCompleteBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPersistSpatialAnchorCompleteBD(XrSenseDataProviderBD provider,
                                                              XrFutureEXT future,
                                                              XrFutureCompletionEXT* completion) {
    XrResult result =
        populate_("xrPersistSpatialAnchorCompleteBD", pfnPersistSpatialAnchorCompleteBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPersistSpatialAnchorCompleteBD>(
        pfnPersistSpatialAnchorCompleteBD))(provider, future, completion);
  }

  //! @brief Call xrPersistSpatialAnchorCompleteBD (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrPersistSpatialAnchorCompleteBD(
      XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion) const {
    return (reinterpret_cast<PFN_xrPersistSpatialAnchorCompleteBD>(
        pfnPersistSpatialAnchorCompleteBD))(provider, future, completion);
  }
#endif  // XR_BD_spatial_anchor
#ifdef XR_BD_spatial_anchor
  //! @brief Call xrUnpersistSpatialAnchorAsyncBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrUnpersistSpatialAnchorAsyncBD(XrSenseDataProviderBD provider,
                                  const XrSpatialAnchorUnpersistInfoBD* info, XrFutureEXT* future) {
    XrResult result =
        populate_("xrUnpersistSpatialAnchorAsyncBD", pfnUnpersistSpatialAnchorAsyncBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorAsyncBD>(
        pfnUnpersistSpatialAnchorAsyncBD))(provider, info, future);
  }

  //! @brief Call xrUnpersistSpatialAnchorAsyncBD (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrUnpersistSpatialAnchorAsyncBD(
      XrSenseDataProviderBD provider, const XrSpatialAnchorUnpersistInfoBD* info,
      XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorAsyncBD>(
        pfnUnpersistSpatialAnchorAsyncBD))(provider, info, future);
  }
#endif  // XR_BD_spatial_anchor
#ifdef XR_BD_spatial_anchor
  //! @brief Call xrUnpersistSpatialAnchorCompleteBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrUnpersistSpatialAnchorCompleteBD(XrSenseDataProviderBD provider,
                                                                XrFutureEXT future,
                                                                XrFutureCompletionEXT* completion) {
    XrResult result =
        populate_("xrUnpersistSpatialAnchorCompleteBD", pfnUnpersistSpatialAnchorCompleteBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorCompleteBD>(
        pfnUnpersistSpatialAnchorCompleteBD))(provider, future, completion);
  }

  //! @brief Call xrUnpersistSpatialAnchorCompleteBD (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrUnpersistSpatialAnchorCompleteBD(
      XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion) const {
    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorCompleteBD>(
        pfnUnpersistSpatialAnchorCompleteBD))(provider, future, completion);
  }
#endif  // XR_BD_spatial_anchor
#ifdef XR_BD_spatial_anchor_sharing
  //! @brief Call xrShareSpatialAnchorAsyncBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrShareSpatialAnchorAsyncBD(XrSenseDataProviderBD provider,
                                                         const XrSpatialAnchorShareInfoBD* info,
                                                         XrFutureEXT* future) {
    XrResult result = populate_("xrShareSpatialAnchorAsyncBD", pfnShareSpatialAnchorAsyncBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrShareSpatialAnchorAsyncBD>(pfnShareSpatialAnchorAsyncBD))(
        provider, info, future);
  }

  //! @brief Call xrShareSpatialAnchorAsyncBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrShareSpatialAnchorAsyncBD(XrSenseDataProviderBD provider,
                                                         const XrSpatialAnchorShareInfoBD* info,
                                                         XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrShareSpatialAnchorAsyncBD>(pfnShareSpatialAnchorAsyncBD))(
        provider, info, future);
  }
#endif  // XR_BD_spatial_anchor_sharing
#ifdef XR_BD_spatial_anchor_sharing
  //! @brief Call xrShareSpatialAnchorCompleteBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrShareSpatialAnchorCompleteBD(XrSenseDataProviderBD provider,
                                                            XrFutureEXT future,
                                                            XrFutureCompletionEXT* completion) {
    XrResult result = populate_("xrShareSpatialAnchorCompleteBD", pfnShareSpatialAnchorCompleteBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrShareSpatialAnchorCompleteBD>(pfnShareSpatialAnchorCompleteBD))(
        provider, future, completion);
  }

  //! @brief Call xrShareSpatialAnchorCompleteBD (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrShareSpatialAnchorCompleteBD(
      XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion) const {
    return (reinterpret_cast<PFN_xrShareSpatialAnchorCompleteBD>(pfnShareSpatialAnchorCompleteBD))(
        provider, future, completion);
  }
#endif  // XR_BD_spatial_anchor_sharing
#ifdef XR_BD_spatial_anchor_sharing
  //! @brief Call xrDownloadSharedSpatialAnchorAsyncBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDownloadSharedSpatialAnchorAsyncBD(
      XrSenseDataProviderBD provider, const XrSharedSpatialAnchorDownloadInfoBD* info,
      XrFutureEXT* future) {
    XrResult result =
        populate_("xrDownloadSharedSpatialAnchorAsyncBD", pfnDownloadSharedSpatialAnchorAsyncBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDownloadSharedSpatialAnchorAsyncBD>(
        pfnDownloadSharedSpatialAnchorAsyncBD))(provider, info, future);
  }

  //! @brief Call xrDownloadSharedSpatialAnchorAsyncBD (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrDownloadSharedSpatialAnchorAsyncBD(
      XrSenseDataProviderBD provider, const XrSharedSpatialAnchorDownloadInfoBD* info,
      XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrDownloadSharedSpatialAnchorAsyncBD>(
        pfnDownloadSharedSpatialAnchorAsyncBD))(provider, info, future);
  }
#endif  // XR_BD_spatial_anchor_sharing
#ifdef XR_BD_spatial_anchor_sharing
  //! @brief Call xrDownloadSharedSpatialAnchorCompleteBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDownloadSharedSpatialAnchorCompleteBD(
      XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion) {
    XrResult result = populate_("xrDownloadSharedSpatialAnchorCompleteBD",
                                pfnDownloadSharedSpatialAnchorCompleteBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDownloadSharedSpatialAnchorCompleteBD>(
        pfnDownloadSharedSpatialAnchorCompleteBD))(provider, future, completion);
  }

  //! @brief Call xrDownloadSharedSpatialAnchorCompleteBD (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrDownloadSharedSpatialAnchorCompleteBD(
      XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion) const {
    return (reinterpret_cast<PFN_xrDownloadSharedSpatialAnchorCompleteBD>(
        pfnDownloadSharedSpatialAnchorCompleteBD))(provider, future, completion);
  }
#endif  // XR_BD_spatial_anchor_sharing
#ifdef XR_BD_spatial_scene
  //! @brief Call xrCaptureSceneAsyncBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCaptureSceneAsyncBD(XrSenseDataProviderBD provider,
                                                   const XrSceneCaptureInfoBD* info,
                                                   XrFutureEXT* future) {
    XrResult result = populate_("xrCaptureSceneAsyncBD", pfnCaptureSceneAsyncBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCaptureSceneAsyncBD>(pfnCaptureSceneAsyncBD))(provider, info,
                                                                                 future);
  }

  //! @brief Call xrCaptureSceneAsyncBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCaptureSceneAsyncBD(XrSenseDataProviderBD provider,
                                                   const XrSceneCaptureInfoBD* info,
                                                   XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrCaptureSceneAsyncBD>(pfnCaptureSceneAsyncBD))(provider, info,
                                                                                 future);
  }
#endif  // XR_BD_spatial_scene
#ifdef XR_BD_spatial_scene
  //! @brief Call xrCaptureSceneCompleteBD, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCaptureSceneCompleteBD(XrSenseDataProviderBD provider,
                                                      XrFutureEXT future,
                                                      XrFutureCompletionEXT* completion) {
    XrResult result = populate_("xrCaptureSceneCompleteBD", pfnCaptureSceneCompleteBD);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCaptureSceneCompleteBD>(pfnCaptureSceneCompleteBD))(
        provider, future, completion);
  }

  //! @brief Call xrCaptureSceneCompleteBD (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCaptureSceneCompleteBD(XrSenseDataProviderBD provider,
                                                      XrFutureEXT future,
                                                      XrFutureCompletionEXT* completion) const {
    return (reinterpret_cast<PFN_xrCaptureSceneCompleteBD>(pfnCaptureSceneCompleteBD))(
        provider, future, completion);
  }
#endif  // XR_BD_spatial_scene
#ifdef XR_EXT_plane_detection
  //! @brief Call xrCreatePlaneDetectorEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreatePlaneDetectorEXT(XrSession session, const XrPlaneDetectorCreateInfoEXT* createInfo,
                           XrPlaneDetectorEXT* planeDetector) {
    XrResult result = populate_("xrCreatePlaneDetectorEXT", pfnCreatePlaneDetectorEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreatePlaneDetectorEXT>(pfnCreatePlaneDetectorEXT))(
        session, createInfo, planeDetector);
  }

  //! @brief Call xrCreatePlaneDetectorEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreatePlaneDetectorEXT(XrSession session, const XrPlaneDetectorCreateInfoEXT* createInfo,
                           XrPlaneDetectorEXT* planeDetector) const {
    return (reinterpret_cast<PFN_xrCreatePlaneDetectorEXT>(pfnCreatePlaneDetectorEXT))(
        session, createInfo, planeDetector);
  }
#endif  // XR_EXT_plane_detection
#ifdef XR_EXT_plane_detection
  //! @brief Call xrDestroyPlaneDetectorEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyPlaneDetectorEXT(XrPlaneDetectorEXT planeDetector) {
    XrResult result = populate_("xrDestroyPlaneDetectorEXT", pfnDestroyPlaneDetectorEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyPlaneDetectorEXT>(pfnDestroyPlaneDetectorEXT))(
        planeDetector);
  }

  //! @brief Call xrDestroyPlaneDetectorEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyPlaneDetectorEXT(XrPlaneDetectorEXT planeDetector) const {
    return (reinterpret_cast<PFN_xrDestroyPlaneDetectorEXT>(pfnDestroyPlaneDetectorEXT))(
        planeDetector);
  }
#endif  // XR_EXT_plane_detection
#ifdef XR_EXT_plane_detection
  //! @brief Call xrBeginPlaneDetectionEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrBeginPlaneDetectionEXT(
      XrPlaneDetectorEXT planeDetector, const XrPlaneDetectorBeginInfoEXT* beginInfo) {
    XrResult result = populate_("xrBeginPlaneDetectionEXT", pfnBeginPlaneDetectionEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrBeginPlaneDetectionEXT>(pfnBeginPlaneDetectionEXT))(
        planeDetector, beginInfo);
  }

  //! @brief Call xrBeginPlaneDetectionEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrBeginPlaneDetectionEXT(
      XrPlaneDetectorEXT planeDetector, const XrPlaneDetectorBeginInfoEXT* beginInfo) const {
    return (reinterpret_cast<PFN_xrBeginPlaneDetectionEXT>(pfnBeginPlaneDetectionEXT))(
        planeDetector, beginInfo);
  }
#endif  // XR_EXT_plane_detection
#ifdef XR_EXT_plane_detection
  //! @brief Call xrGetPlaneDetectionStateEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetPlaneDetectionStateEXT(XrPlaneDetectorEXT planeDetector,
                                                         XrPlaneDetectionStateEXT* state) {
    XrResult result = populate_("xrGetPlaneDetectionStateEXT", pfnGetPlaneDetectionStateEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetPlaneDetectionStateEXT>(pfnGetPlaneDetectionStateEXT))(
        planeDetector, state);
  }

  //! @brief Call xrGetPlaneDetectionStateEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetPlaneDetectionStateEXT(XrPlaneDetectorEXT planeDetector,
                                                         XrPlaneDetectionStateEXT* state) const {
    return (reinterpret_cast<PFN_xrGetPlaneDetectionStateEXT>(pfnGetPlaneDetectionStateEXT))(
        planeDetector, state);
  }
#endif  // XR_EXT_plane_detection
#ifdef XR_EXT_plane_detection
  //! @brief Call xrGetPlaneDetectionsEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetPlaneDetectionsEXT(XrPlaneDetectorEXT planeDetector,
                                                     const XrPlaneDetectorGetInfoEXT* info,
                                                     XrPlaneDetectorLocationsEXT* locations) {
    XrResult result = populate_("xrGetPlaneDetectionsEXT", pfnGetPlaneDetectionsEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetPlaneDetectionsEXT>(pfnGetPlaneDetectionsEXT))(
        planeDetector, info, locations);
  }

  //! @brief Call xrGetPlaneDetectionsEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetPlaneDetectionsEXT(XrPlaneDetectorEXT planeDetector,
                                                     const XrPlaneDetectorGetInfoEXT* info,
                                                     XrPlaneDetectorLocationsEXT* locations) const {
    return (reinterpret_cast<PFN_xrGetPlaneDetectionsEXT>(pfnGetPlaneDetectionsEXT))(
        planeDetector, info, locations);
  }
#endif  // XR_EXT_plane_detection
#ifdef XR_EXT_plane_detection
  //! @brief Call xrGetPlanePolygonBufferEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetPlanePolygonBufferEXT(
      XrPlaneDetectorEXT planeDetector, uint64_t planeId, uint32_t polygonBufferIndex,
      XrPlaneDetectorPolygonBufferEXT* polygonBuffer) {
    XrResult result = populate_("xrGetPlanePolygonBufferEXT", pfnGetPlanePolygonBufferEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetPlanePolygonBufferEXT>(pfnGetPlanePolygonBufferEXT))(
        planeDetector, planeId, polygonBufferIndex, polygonBuffer);
  }

  //! @brief Call xrGetPlanePolygonBufferEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetPlanePolygonBufferEXT(
      XrPlaneDetectorEXT planeDetector, uint64_t planeId, uint32_t polygonBufferIndex,
      XrPlaneDetectorPolygonBufferEXT* polygonBuffer) const {
    return (reinterpret_cast<PFN_xrGetPlanePolygonBufferEXT>(pfnGetPlanePolygonBufferEXT))(
        planeDetector, planeId, polygonBufferIndex, polygonBuffer);
  }
#endif  // XR_EXT_plane_detection
#ifdef XR_EXT_future
  //! @brief Call xrPollFutureEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPollFutureEXT(XrInstance instance,
                                             const XrFuturePollInfoEXT* pollInfo,
                                             XrFuturePollResultEXT* pollResult) {
    XrResult result = populate_("xrPollFutureEXT", pfnPollFutureEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPollFutureEXT>(pfnPollFutureEXT))(instance, pollInfo,
                                                                     pollResult);
  }

  //! @brief Call xrPollFutureEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPollFutureEXT(XrInstance instance,
                                             const XrFuturePollInfoEXT* pollInfo,
                                             XrFuturePollResultEXT* pollResult) const {
    return (reinterpret_cast<PFN_xrPollFutureEXT>(pfnPollFutureEXT))(instance, pollInfo,
                                                                     pollResult);
  }
#endif  // XR_EXT_future
#ifdef XR_EXT_future
  //! @brief Call xrCancelFutureEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCancelFutureEXT(XrInstance instance,
                                               const XrFutureCancelInfoEXT* cancelInfo) {
    XrResult result = populate_("xrCancelFutureEXT", pfnCancelFutureEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCancelFutureEXT>(pfnCancelFutureEXT))(instance, cancelInfo);
  }

  //! @brief Call xrCancelFutureEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCancelFutureEXT(XrInstance instance,
                                               const XrFutureCancelInfoEXT* cancelInfo) const {
    return (reinterpret_cast<PFN_xrCancelFutureEXT>(pfnCancelFutureEXT))(instance, cancelInfo);
  }
#endif  // XR_EXT_future
#ifdef XR_ML_user_calibration
  //! @brief Call xrEnableUserCalibrationEventsML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnableUserCalibrationEventsML(
      XrInstance instance, const XrUserCalibrationEnableEventsInfoML* enableInfo) {
    XrResult result =
        populate_("xrEnableUserCalibrationEventsML", pfnEnableUserCalibrationEventsML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnableUserCalibrationEventsML>(
        pfnEnableUserCalibrationEventsML))(instance, enableInfo);
  }

  //! @brief Call xrEnableUserCalibrationEventsML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnableUserCalibrationEventsML(
      XrInstance instance, const XrUserCalibrationEnableEventsInfoML* enableInfo) const {
    return (reinterpret_cast<PFN_xrEnableUserCalibrationEventsML>(
        pfnEnableUserCalibrationEventsML))(instance, enableInfo);
  }
#endif  // XR_ML_user_calibration
#ifdef XR_ML_system_notifications
  //! @brief Call xrSetSystemNotificationsML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrSetSystemNotificationsML(XrInstance instance, const XrSystemNotificationsSetInfoML* info) {
    XrResult result = populate_("xrSetSystemNotificationsML", pfnSetSystemNotificationsML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrSetSystemNotificationsML>(pfnSetSystemNotificationsML))(instance,
                                                                                           info);
  }

  //! @brief Call xrSetSystemNotificationsML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrSetSystemNotificationsML(
      XrInstance instance, const XrSystemNotificationsSetInfoML* info) const {
    return (reinterpret_cast<PFN_xrSetSystemNotificationsML>(pfnSetSystemNotificationsML))(instance,
                                                                                           info);
  }
#endif  // XR_ML_system_notifications
#ifdef XR_ML_world_mesh_detection
  //! @brief Call xrCreateWorldMeshDetectorML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrCreateWorldMeshDetectorML(XrSession session, const XrWorldMeshDetectorCreateInfoML* createInfo,
                              XrWorldMeshDetectorML* detector) {
    XrResult result = populate_("xrCreateWorldMeshDetectorML", pfnCreateWorldMeshDetectorML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateWorldMeshDetectorML>(pfnCreateWorldMeshDetectorML))(
        session, createInfo, detector);
  }

  //! @brief Call xrCreateWorldMeshDetectorML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateWorldMeshDetectorML(XrSession session, const XrWorldMeshDetectorCreateInfoML* createInfo,
                              XrWorldMeshDetectorML* detector) const {
    return (reinterpret_cast<PFN_xrCreateWorldMeshDetectorML>(pfnCreateWorldMeshDetectorML))(
        session, createInfo, detector);
  }
#endif  // XR_ML_world_mesh_detection
#ifdef XR_ML_world_mesh_detection
  //! @brief Call xrDestroyWorldMeshDetectorML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroyWorldMeshDetectorML(XrWorldMeshDetectorML detector) {
    XrResult result = populate_("xrDestroyWorldMeshDetectorML", pfnDestroyWorldMeshDetectorML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyWorldMeshDetectorML>(pfnDestroyWorldMeshDetectorML))(
        detector);
  }

  //! @brief Call xrDestroyWorldMeshDetectorML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroyWorldMeshDetectorML(XrWorldMeshDetectorML detector) const {
    return (reinterpret_cast<PFN_xrDestroyWorldMeshDetectorML>(pfnDestroyWorldMeshDetectorML))(
        detector);
  }
#endif  // XR_ML_world_mesh_detection
#ifdef XR_ML_world_mesh_detection
  //! @brief Call xrRequestWorldMeshStateAsyncML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrRequestWorldMeshStateAsyncML(
      XrWorldMeshDetectorML detector, const XrWorldMeshStateRequestInfoML* stateRequest,
      XrFutureEXT* future) {
    XrResult result = populate_("xrRequestWorldMeshStateAsyncML", pfnRequestWorldMeshStateAsyncML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrRequestWorldMeshStateAsyncML>(pfnRequestWorldMeshStateAsyncML))(
        detector, stateRequest, future);
  }

  //! @brief Call xrRequestWorldMeshStateAsyncML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrRequestWorldMeshStateAsyncML(
      XrWorldMeshDetectorML detector, const XrWorldMeshStateRequestInfoML* stateRequest,
      XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrRequestWorldMeshStateAsyncML>(pfnRequestWorldMeshStateAsyncML))(
        detector, stateRequest, future);
  }
#endif  // XR_ML_world_mesh_detection
#ifdef XR_ML_world_mesh_detection
  //! @brief Call xrRequestWorldMeshStateCompleteML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrRequestWorldMeshStateCompleteML(XrWorldMeshDetectorML detector, XrFutureEXT future,
                                    XrWorldMeshStateRequestCompletionML* completion) {
    XrResult result =
        populate_("xrRequestWorldMeshStateCompleteML", pfnRequestWorldMeshStateCompleteML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrRequestWorldMeshStateCompleteML>(
        pfnRequestWorldMeshStateCompleteML))(detector, future, completion);
  }

  //! @brief Call xrRequestWorldMeshStateCompleteML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrRequestWorldMeshStateCompleteML(XrWorldMeshDetectorML detector, XrFutureEXT future,
                                    XrWorldMeshStateRequestCompletionML* completion) const {
    return (reinterpret_cast<PFN_xrRequestWorldMeshStateCompleteML>(
        pfnRequestWorldMeshStateCompleteML))(detector, future, completion);
  }
#endif  // XR_ML_world_mesh_detection
#ifdef XR_ML_world_mesh_detection
  //! @brief Call xrGetWorldMeshBufferRecommendSizeML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetWorldMeshBufferRecommendSizeML(
      XrWorldMeshDetectorML detector, const XrWorldMeshBufferRecommendedSizeInfoML* sizeInfo,
      XrWorldMeshBufferSizeML* size) {
    XrResult result =
        populate_("xrGetWorldMeshBufferRecommendSizeML", pfnGetWorldMeshBufferRecommendSizeML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetWorldMeshBufferRecommendSizeML>(
        pfnGetWorldMeshBufferRecommendSizeML))(detector, sizeInfo, size);
  }

  //! @brief Call xrGetWorldMeshBufferRecommendSizeML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetWorldMeshBufferRecommendSizeML(
      XrWorldMeshDetectorML detector, const XrWorldMeshBufferRecommendedSizeInfoML* sizeInfo,
      XrWorldMeshBufferSizeML* size) const {
    return (reinterpret_cast<PFN_xrGetWorldMeshBufferRecommendSizeML>(
        pfnGetWorldMeshBufferRecommendSizeML))(detector, sizeInfo, size);
  }
#endif  // XR_ML_world_mesh_detection
#ifdef XR_ML_world_mesh_detection
  //! @brief Call xrAllocateWorldMeshBufferML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrAllocateWorldMeshBufferML(XrWorldMeshDetectorML detector,
                                                         const XrWorldMeshBufferSizeML* size,
                                                         XrWorldMeshBufferML* buffer) {
    XrResult result = populate_("xrAllocateWorldMeshBufferML", pfnAllocateWorldMeshBufferML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrAllocateWorldMeshBufferML>(pfnAllocateWorldMeshBufferML))(
        detector, size, buffer);
  }

  //! @brief Call xrAllocateWorldMeshBufferML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrAllocateWorldMeshBufferML(XrWorldMeshDetectorML detector,
                                                         const XrWorldMeshBufferSizeML* size,
                                                         XrWorldMeshBufferML* buffer) const {
    return (reinterpret_cast<PFN_xrAllocateWorldMeshBufferML>(pfnAllocateWorldMeshBufferML))(
        detector, size, buffer);
  }
#endif  // XR_ML_world_mesh_detection
#ifdef XR_ML_world_mesh_detection
  //! @brief Call xrFreeWorldMeshBufferML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrFreeWorldMeshBufferML(XrWorldMeshDetectorML detector,
                                                     const XrWorldMeshBufferML* buffer) {
    XrResult result = populate_("xrFreeWorldMeshBufferML", pfnFreeWorldMeshBufferML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrFreeWorldMeshBufferML>(pfnFreeWorldMeshBufferML))(detector,
                                                                                     buffer);
  }

  //! @brief Call xrFreeWorldMeshBufferML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrFreeWorldMeshBufferML(XrWorldMeshDetectorML detector,
                                                     const XrWorldMeshBufferML* buffer) const {
    return (reinterpret_cast<PFN_xrFreeWorldMeshBufferML>(pfnFreeWorldMeshBufferML))(detector,
                                                                                     buffer);
  }
#endif  // XR_ML_world_mesh_detection
#ifdef XR_ML_world_mesh_detection
  //! @brief Call xrRequestWorldMeshAsyncML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrRequestWorldMeshAsyncML(XrWorldMeshDetectorML detector,
                                                       const XrWorldMeshGetInfoML* getInfo,
                                                       XrWorldMeshBufferML* buffer,
                                                       XrFutureEXT* future) {
    XrResult result = populate_("xrRequestWorldMeshAsyncML", pfnRequestWorldMeshAsyncML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrRequestWorldMeshAsyncML>(pfnRequestWorldMeshAsyncML))(
        detector, getInfo, buffer, future);
  }

  //! @brief Call xrRequestWorldMeshAsyncML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrRequestWorldMeshAsyncML(XrWorldMeshDetectorML detector,
                                                       const XrWorldMeshGetInfoML* getInfo,
                                                       XrWorldMeshBufferML* buffer,
                                                       XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrRequestWorldMeshAsyncML>(pfnRequestWorldMeshAsyncML))(
        detector, getInfo, buffer, future);
  }
#endif  // XR_ML_world_mesh_detection
#ifdef XR_ML_world_mesh_detection
  //! @brief Call xrRequestWorldMeshCompleteML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrRequestWorldMeshCompleteML(
      XrWorldMeshDetectorML detector, const XrWorldMeshRequestCompletionInfoML* completionInfo,
      XrFutureEXT future, XrWorldMeshRequestCompletionML* completion) {
    XrResult result = populate_("xrRequestWorldMeshCompleteML", pfnRequestWorldMeshCompleteML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrRequestWorldMeshCompleteML>(pfnRequestWorldMeshCompleteML))(
        detector, completionInfo, future, completion);
  }

  //! @brief Call xrRequestWorldMeshCompleteML (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrRequestWorldMeshCompleteML(
      XrWorldMeshDetectorML detector, const XrWorldMeshRequestCompletionInfoML* completionInfo,
      XrFutureEXT future, XrWorldMeshRequestCompletionML* completion) const {
    return (reinterpret_cast<PFN_xrRequestWorldMeshCompleteML>(pfnRequestWorldMeshCompleteML))(
        detector, completionInfo, future, completion);
  }
#endif  // XR_ML_world_mesh_detection
#ifdef XR_ML_facial_expression
  //! @brief Call xrCreateFacialExpressionClientML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateFacialExpressionClientML(
      XrSession session, const XrFacialExpressionClientCreateInfoML* createInfo,
      XrFacialExpressionClientML* facialExpressionClient) {
    XrResult result =
        populate_("xrCreateFacialExpressionClientML", pfnCreateFacialExpressionClientML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateFacialExpressionClientML>(
        pfnCreateFacialExpressionClientML))(session, createInfo, facialExpressionClient);
  }

  //! @brief Call xrCreateFacialExpressionClientML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateFacialExpressionClientML(
      XrSession session, const XrFacialExpressionClientCreateInfoML* createInfo,
      XrFacialExpressionClientML* facialExpressionClient) const {
    return (reinterpret_cast<PFN_xrCreateFacialExpressionClientML>(
        pfnCreateFacialExpressionClientML))(session, createInfo, facialExpressionClient);
  }
#endif  // XR_ML_facial_expression
#ifdef XR_ML_facial_expression
  //! @brief Call xrDestroyFacialExpressionClientML, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrDestroyFacialExpressionClientML(XrFacialExpressionClientML facialExpressionClient) {
    XrResult result =
        populate_("xrDestroyFacialExpressionClientML", pfnDestroyFacialExpressionClientML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroyFacialExpressionClientML>(
        pfnDestroyFacialExpressionClientML))(facialExpressionClient);
  }

  //! @brief Call xrDestroyFacialExpressionClientML (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrDestroyFacialExpressionClientML(XrFacialExpressionClientML facialExpressionClient) const {
    return (reinterpret_cast<PFN_xrDestroyFacialExpressionClientML>(
        pfnDestroyFacialExpressionClientML))(facialExpressionClient);
  }
#endif  // XR_ML_facial_expression
#ifdef XR_ML_facial_expression
  //! @brief Call xrGetFacialExpressionBlendShapePropertiesML, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrGetFacialExpressionBlendShapePropertiesML(
      XrFacialExpressionClientML facialExpressionClient,
      const XrFacialExpressionBlendShapeGetInfoML* blendShapeGetInfo, uint32_t blendShapeCount,
      XrFacialExpressionBlendShapePropertiesML* blendShapes) {
    XrResult result = populate_("xrGetFacialExpressionBlendShapePropertiesML",
                                pfnGetFacialExpressionBlendShapePropertiesML);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetFacialExpressionBlendShapePropertiesML>(
        pfnGetFacialExpressionBlendShapePropertiesML))(facialExpressionClient, blendShapeGetInfo,
                                                       blendShapeCount, blendShapes);
  }

  //! @brief Call xrGetFacialExpressionBlendShapePropertiesML (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrGetFacialExpressionBlendShapePropertiesML(
      XrFacialExpressionClientML facialExpressionClient,
      const XrFacialExpressionBlendShapeGetInfoML* blendShapeGetInfo, uint32_t blendShapeCount,
      XrFacialExpressionBlendShapePropertiesML* blendShapes) const {
    return (reinterpret_cast<PFN_xrGetFacialExpressionBlendShapePropertiesML>(
        pfnGetFacialExpressionBlendShapePropertiesML))(facialExpressionClient, blendShapeGetInfo,
                                                       blendShapeCount, blendShapes);
  }
#endif  // XR_ML_facial_expression
#ifdef XR_META_simultaneous_hands_and_controllers
  //! @brief Call xrResumeSimultaneousHandsAndControllersTrackingMETA, populating function pointer
  //! if required.
  OPENXR_HPP_INLINE XrResult xrResumeSimultaneousHandsAndControllersTrackingMETA(
      XrSession session,
      const XrSimultaneousHandsAndControllersTrackingResumeInfoMETA* resumeInfo) {
    XrResult result = populate_("xrResumeSimultaneousHandsAndControllersTrackingMETA",
                                pfnResumeSimultaneousHandsAndControllersTrackingMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrResumeSimultaneousHandsAndControllersTrackingMETA>(
        pfnResumeSimultaneousHandsAndControllersTrackingMETA))(session, resumeInfo);
  }

  //! @brief Call xrResumeSimultaneousHandsAndControllersTrackingMETA (const overload - does not
  //! populate function pointer)
  OPENXR_HPP_INLINE XrResult xrResumeSimultaneousHandsAndControllersTrackingMETA(
      XrSession session,
      const XrSimultaneousHandsAndControllersTrackingResumeInfoMETA* resumeInfo) const {
    return (reinterpret_cast<PFN_xrResumeSimultaneousHandsAndControllersTrackingMETA>(
        pfnResumeSimultaneousHandsAndControllersTrackingMETA))(session, resumeInfo);
  }
#endif  // XR_META_simultaneous_hands_and_controllers
#ifdef XR_META_simultaneous_hands_and_controllers
  //! @brief Call xrPauseSimultaneousHandsAndControllersTrackingMETA, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrPauseSimultaneousHandsAndControllersTrackingMETA(
      XrSession session, const XrSimultaneousHandsAndControllersTrackingPauseInfoMETA* pauseInfo) {
    XrResult result = populate_("xrPauseSimultaneousHandsAndControllersTrackingMETA",
                                pfnPauseSimultaneousHandsAndControllersTrackingMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPauseSimultaneousHandsAndControllersTrackingMETA>(
        pfnPauseSimultaneousHandsAndControllersTrackingMETA))(session, pauseInfo);
  }

  //! @brief Call xrPauseSimultaneousHandsAndControllersTrackingMETA (const overload - does not
  //! populate function pointer)
  OPENXR_HPP_INLINE XrResult xrPauseSimultaneousHandsAndControllersTrackingMETA(
      XrSession session,
      const XrSimultaneousHandsAndControllersTrackingPauseInfoMETA* pauseInfo) const {
    return (reinterpret_cast<PFN_xrPauseSimultaneousHandsAndControllersTrackingMETA>(
        pfnPauseSimultaneousHandsAndControllersTrackingMETA))(session, pauseInfo);
  }
#endif  // XR_META_simultaneous_hands_and_controllers
#ifdef XR_META_colocation_discovery
  //! @brief Call xrStartColocationDiscoveryMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrStartColocationDiscoveryMETA(XrSession session, const XrColocationDiscoveryStartInfoMETA* info,
                                 XrAsyncRequestIdFB* discoveryRequestId) {
    XrResult result = populate_("xrStartColocationDiscoveryMETA", pfnStartColocationDiscoveryMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStartColocationDiscoveryMETA>(pfnStartColocationDiscoveryMETA))(
        session, info, discoveryRequestId);
  }

  //! @brief Call xrStartColocationDiscoveryMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrStartColocationDiscoveryMETA(XrSession session, const XrColocationDiscoveryStartInfoMETA* info,
                                 XrAsyncRequestIdFB* discoveryRequestId) const {
    return (reinterpret_cast<PFN_xrStartColocationDiscoveryMETA>(pfnStartColocationDiscoveryMETA))(
        session, info, discoveryRequestId);
  }
#endif  // XR_META_colocation_discovery
#ifdef XR_META_colocation_discovery
  //! @brief Call xrStopColocationDiscoveryMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrStopColocationDiscoveryMETA(XrSession session, const XrColocationDiscoveryStopInfoMETA* info,
                                XrAsyncRequestIdFB* requestId) {
    XrResult result = populate_("xrStopColocationDiscoveryMETA", pfnStopColocationDiscoveryMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStopColocationDiscoveryMETA>(pfnStopColocationDiscoveryMETA))(
        session, info, requestId);
  }

  //! @brief Call xrStopColocationDiscoveryMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrStopColocationDiscoveryMETA(XrSession session, const XrColocationDiscoveryStopInfoMETA* info,
                                XrAsyncRequestIdFB* requestId) const {
    return (reinterpret_cast<PFN_xrStopColocationDiscoveryMETA>(pfnStopColocationDiscoveryMETA))(
        session, info, requestId);
  }
#endif  // XR_META_colocation_discovery
#ifdef XR_META_colocation_discovery
  //! @brief Call xrStartColocationAdvertisementMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrStartColocationAdvertisementMETA(
      XrSession session, const XrColocationAdvertisementStartInfoMETA* info,
      XrAsyncRequestIdFB* advertisementRequestId) {
    XrResult result =
        populate_("xrStartColocationAdvertisementMETA", pfnStartColocationAdvertisementMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStartColocationAdvertisementMETA>(
        pfnStartColocationAdvertisementMETA))(session, info, advertisementRequestId);
  }

  //! @brief Call xrStartColocationAdvertisementMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrStartColocationAdvertisementMETA(
      XrSession session, const XrColocationAdvertisementStartInfoMETA* info,
      XrAsyncRequestIdFB* advertisementRequestId) const {
    return (reinterpret_cast<PFN_xrStartColocationAdvertisementMETA>(
        pfnStartColocationAdvertisementMETA))(session, info, advertisementRequestId);
  }
#endif  // XR_META_colocation_discovery
#ifdef XR_META_colocation_discovery
  //! @brief Call xrStopColocationAdvertisementMETA, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrStopColocationAdvertisementMETA(
      XrSession session, const XrColocationAdvertisementStopInfoMETA* info,
      XrAsyncRequestIdFB* requestId) {
    XrResult result =
        populate_("xrStopColocationAdvertisementMETA", pfnStopColocationAdvertisementMETA);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrStopColocationAdvertisementMETA>(
        pfnStopColocationAdvertisementMETA))(session, info, requestId);
  }

  //! @brief Call xrStopColocationAdvertisementMETA (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrStopColocationAdvertisementMETA(
      XrSession session, const XrColocationAdvertisementStopInfoMETA* info,
      XrAsyncRequestIdFB* requestId) const {
    return (reinterpret_cast<PFN_xrStopColocationAdvertisementMETA>(
        pfnStopColocationAdvertisementMETA))(session, info, requestId);
  }
#endif  // XR_META_colocation_discovery
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrEnumerateSpatialCapabilitiesEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateSpatialCapabilitiesEXT(
      XrInstance instance, XrSystemId systemId, uint32_t capabilityCapacityInput,
      uint32_t* capabilityCountOutput, XrSpatialCapabilityEXT* capabilities) {
    XrResult result =
        populate_("xrEnumerateSpatialCapabilitiesEXT", pfnEnumerateSpatialCapabilitiesEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateSpatialCapabilitiesEXT>(
        pfnEnumerateSpatialCapabilitiesEXT))(instance, systemId, capabilityCapacityInput,
                                             capabilityCountOutput, capabilities);
  }

  //! @brief Call xrEnumerateSpatialCapabilitiesEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateSpatialCapabilitiesEXT(
      XrInstance instance, XrSystemId systemId, uint32_t capabilityCapacityInput,
      uint32_t* capabilityCountOutput, XrSpatialCapabilityEXT* capabilities) const {
    return (reinterpret_cast<PFN_xrEnumerateSpatialCapabilitiesEXT>(
        pfnEnumerateSpatialCapabilitiesEXT))(instance, systemId, capabilityCapacityInput,
                                             capabilityCountOutput, capabilities);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrEnumerateSpatialCapabilityComponentTypesEXT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrEnumerateSpatialCapabilityComponentTypesEXT(
      XrInstance instance, XrSystemId systemId, XrSpatialCapabilityEXT capability,
      XrSpatialCapabilityComponentTypesEXT* capabilityComponents) {
    XrResult result = populate_("xrEnumerateSpatialCapabilityComponentTypesEXT",
                                pfnEnumerateSpatialCapabilityComponentTypesEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateSpatialCapabilityComponentTypesEXT>(
        pfnEnumerateSpatialCapabilityComponentTypesEXT))(instance, systemId, capability,
                                                         capabilityComponents);
  }

  //! @brief Call xrEnumerateSpatialCapabilityComponentTypesEXT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateSpatialCapabilityComponentTypesEXT(
      XrInstance instance, XrSystemId systemId, XrSpatialCapabilityEXT capability,
      XrSpatialCapabilityComponentTypesEXT* capabilityComponents) const {
    return (reinterpret_cast<PFN_xrEnumerateSpatialCapabilityComponentTypesEXT>(
        pfnEnumerateSpatialCapabilityComponentTypesEXT))(instance, systemId, capability,
                                                         capabilityComponents);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrEnumerateSpatialCapabilityFeaturesEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateSpatialCapabilityFeaturesEXT(
      XrInstance instance, XrSystemId systemId, XrSpatialCapabilityEXT capability,
      uint32_t capabilityFeatureCapacityInput, uint32_t* capabilityFeatureCountOutput,
      XrSpatialCapabilityFeatureEXT* capabilityFeatures) {
    XrResult result = populate_("xrEnumerateSpatialCapabilityFeaturesEXT",
                                pfnEnumerateSpatialCapabilityFeaturesEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateSpatialCapabilityFeaturesEXT>(
        pfnEnumerateSpatialCapabilityFeaturesEXT))(
        instance, systemId, capability, capabilityFeatureCapacityInput,
        capabilityFeatureCountOutput, capabilityFeatures);
  }

  //! @brief Call xrEnumerateSpatialCapabilityFeaturesEXT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateSpatialCapabilityFeaturesEXT(
      XrInstance instance, XrSystemId systemId, XrSpatialCapabilityEXT capability,
      uint32_t capabilityFeatureCapacityInput, uint32_t* capabilityFeatureCountOutput,
      XrSpatialCapabilityFeatureEXT* capabilityFeatures) const {
    return (reinterpret_cast<PFN_xrEnumerateSpatialCapabilityFeaturesEXT>(
        pfnEnumerateSpatialCapabilityFeaturesEXT))(
        instance, systemId, capability, capabilityFeatureCapacityInput,
        capabilityFeatureCountOutput, capabilityFeatures);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrCreateSpatialContextAsyncEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialContextAsyncEXT(
      XrSession session, const XrSpatialContextCreateInfoEXT* createInfo, XrFutureEXT* future) {
    XrResult result = populate_("xrCreateSpatialContextAsyncEXT", pfnCreateSpatialContextAsyncEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialContextAsyncEXT>(pfnCreateSpatialContextAsyncEXT))(
        session, createInfo, future);
  }

  //! @brief Call xrCreateSpatialContextAsyncEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateSpatialContextAsyncEXT(XrSession session, const XrSpatialContextCreateInfoEXT* createInfo,
                                 XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrCreateSpatialContextAsyncEXT>(pfnCreateSpatialContextAsyncEXT))(
        session, createInfo, future);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrCreateSpatialContextCompleteEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialContextCompleteEXT(
      XrSession session, XrFutureEXT future, XrCreateSpatialContextCompletionEXT* completion) {
    XrResult result =
        populate_("xrCreateSpatialContextCompleteEXT", pfnCreateSpatialContextCompleteEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialContextCompleteEXT>(
        pfnCreateSpatialContextCompleteEXT))(session, future, completion);
  }

  //! @brief Call xrCreateSpatialContextCompleteEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrCreateSpatialContextCompleteEXT(XrSession session, XrFutureEXT future,
                                    XrCreateSpatialContextCompletionEXT* completion) const {
    return (reinterpret_cast<PFN_xrCreateSpatialContextCompleteEXT>(
        pfnCreateSpatialContextCompleteEXT))(session, future, completion);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrDestroySpatialContextEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySpatialContextEXT(XrSpatialContextEXT spatialContext) {
    XrResult result = populate_("xrDestroySpatialContextEXT", pfnDestroySpatialContextEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialContextEXT>(pfnDestroySpatialContextEXT))(
        spatialContext);
  }

  //! @brief Call xrDestroySpatialContextEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySpatialContextEXT(XrSpatialContextEXT spatialContext) const {
    return (reinterpret_cast<PFN_xrDestroySpatialContextEXT>(pfnDestroySpatialContextEXT))(
        spatialContext);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrCreateSpatialDiscoverySnapshotAsyncEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialDiscoverySnapshotAsyncEXT(
      XrSpatialContextEXT spatialContext, const XrSpatialDiscoverySnapshotCreateInfoEXT* createInfo,
      XrFutureEXT* future) {
    XrResult result = populate_("xrCreateSpatialDiscoverySnapshotAsyncEXT",
                                pfnCreateSpatialDiscoverySnapshotAsyncEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialDiscoverySnapshotAsyncEXT>(
        pfnCreateSpatialDiscoverySnapshotAsyncEXT))(spatialContext, createInfo, future);
  }

  //! @brief Call xrCreateSpatialDiscoverySnapshotAsyncEXT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialDiscoverySnapshotAsyncEXT(
      XrSpatialContextEXT spatialContext, const XrSpatialDiscoverySnapshotCreateInfoEXT* createInfo,
      XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrCreateSpatialDiscoverySnapshotAsyncEXT>(
        pfnCreateSpatialDiscoverySnapshotAsyncEXT))(spatialContext, createInfo, future);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrCreateSpatialDiscoverySnapshotCompleteEXT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialDiscoverySnapshotCompleteEXT(
      XrSpatialContextEXT spatialContext,
      const XrCreateSpatialDiscoverySnapshotCompletionInfoEXT* createSnapshotCompletionInfo,
      XrCreateSpatialDiscoverySnapshotCompletionEXT* completion) {
    XrResult result = populate_("xrCreateSpatialDiscoverySnapshotCompleteEXT",
                                pfnCreateSpatialDiscoverySnapshotCompleteEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialDiscoverySnapshotCompleteEXT>(
        pfnCreateSpatialDiscoverySnapshotCompleteEXT))(spatialContext, createSnapshotCompletionInfo,
                                                       completion);
  }

  //! @brief Call xrCreateSpatialDiscoverySnapshotCompleteEXT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialDiscoverySnapshotCompleteEXT(
      XrSpatialContextEXT spatialContext,
      const XrCreateSpatialDiscoverySnapshotCompletionInfoEXT* createSnapshotCompletionInfo,
      XrCreateSpatialDiscoverySnapshotCompletionEXT* completion) const {
    return (reinterpret_cast<PFN_xrCreateSpatialDiscoverySnapshotCompleteEXT>(
        pfnCreateSpatialDiscoverySnapshotCompleteEXT))(spatialContext, createSnapshotCompletionInfo,
                                                       completion);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrQuerySpatialComponentDataEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrQuerySpatialComponentDataEXT(
      XrSpatialSnapshotEXT snapshot, const XrSpatialComponentDataQueryConditionEXT* queryCondition,
      XrSpatialComponentDataQueryResultEXT* queryResult) {
    XrResult result = populate_("xrQuerySpatialComponentDataEXT", pfnQuerySpatialComponentDataEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrQuerySpatialComponentDataEXT>(pfnQuerySpatialComponentDataEXT))(
        snapshot, queryCondition, queryResult);
  }

  //! @brief Call xrQuerySpatialComponentDataEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrQuerySpatialComponentDataEXT(
      XrSpatialSnapshotEXT snapshot, const XrSpatialComponentDataQueryConditionEXT* queryCondition,
      XrSpatialComponentDataQueryResultEXT* queryResult) const {
    return (reinterpret_cast<PFN_xrQuerySpatialComponentDataEXT>(pfnQuerySpatialComponentDataEXT))(
        snapshot, queryCondition, queryResult);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrDestroySpatialSnapshotEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySpatialSnapshotEXT(XrSpatialSnapshotEXT snapshot) {
    XrResult result = populate_("xrDestroySpatialSnapshotEXT", pfnDestroySpatialSnapshotEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialSnapshotEXT>(pfnDestroySpatialSnapshotEXT))(
        snapshot);
  }

  //! @brief Call xrDestroySpatialSnapshotEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySpatialSnapshotEXT(XrSpatialSnapshotEXT snapshot) const {
    return (reinterpret_cast<PFN_xrDestroySpatialSnapshotEXT>(pfnDestroySpatialSnapshotEXT))(
        snapshot);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrCreateSpatialEntityFromIdEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialEntityFromIdEXT(
      XrSpatialContextEXT spatialContext, const XrSpatialEntityFromIdCreateInfoEXT* createInfo,
      XrSpatialEntityEXT* spatialEntity) {
    XrResult result = populate_("xrCreateSpatialEntityFromIdEXT", pfnCreateSpatialEntityFromIdEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialEntityFromIdEXT>(pfnCreateSpatialEntityFromIdEXT))(
        spatialContext, createInfo, spatialEntity);
  }

  //! @brief Call xrCreateSpatialEntityFromIdEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialEntityFromIdEXT(
      XrSpatialContextEXT spatialContext, const XrSpatialEntityFromIdCreateInfoEXT* createInfo,
      XrSpatialEntityEXT* spatialEntity) const {
    return (reinterpret_cast<PFN_xrCreateSpatialEntityFromIdEXT>(pfnCreateSpatialEntityFromIdEXT))(
        spatialContext, createInfo, spatialEntity);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrDestroySpatialEntityEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrDestroySpatialEntityEXT(XrSpatialEntityEXT spatialEntity) {
    XrResult result = populate_("xrDestroySpatialEntityEXT", pfnDestroySpatialEntityEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialEntityEXT>(pfnDestroySpatialEntityEXT))(
        spatialEntity);
  }

  //! @brief Call xrDestroySpatialEntityEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrDestroySpatialEntityEXT(XrSpatialEntityEXT spatialEntity) const {
    return (reinterpret_cast<PFN_xrDestroySpatialEntityEXT>(pfnDestroySpatialEntityEXT))(
        spatialEntity);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrCreateSpatialUpdateSnapshotEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialUpdateSnapshotEXT(
      XrSpatialContextEXT spatialContext, const XrSpatialUpdateSnapshotCreateInfoEXT* createInfo,
      XrSpatialSnapshotEXT* snapshot) {
    XrResult result =
        populate_("xrCreateSpatialUpdateSnapshotEXT", pfnCreateSpatialUpdateSnapshotEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialUpdateSnapshotEXT>(
        pfnCreateSpatialUpdateSnapshotEXT))(spatialContext, createInfo, snapshot);
  }

  //! @brief Call xrCreateSpatialUpdateSnapshotEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialUpdateSnapshotEXT(
      XrSpatialContextEXT spatialContext, const XrSpatialUpdateSnapshotCreateInfoEXT* createInfo,
      XrSpatialSnapshotEXT* snapshot) const {
    return (reinterpret_cast<PFN_xrCreateSpatialUpdateSnapshotEXT>(
        pfnCreateSpatialUpdateSnapshotEXT))(spatialContext, createInfo, snapshot);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrGetSpatialBufferStringEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferStringEXT(XrSpatialSnapshotEXT snapshot,
                                                         const XrSpatialBufferGetInfoEXT* info,
                                                         uint32_t bufferCapacityInput,
                                                         uint32_t* bufferCountOutput,
                                                         char* buffer) {
    XrResult result = populate_("xrGetSpatialBufferStringEXT", pfnGetSpatialBufferStringEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferStringEXT>(pfnGetSpatialBufferStringEXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetSpatialBufferStringEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferStringEXT(XrSpatialSnapshotEXT snapshot,
                                                         const XrSpatialBufferGetInfoEXT* info,
                                                         uint32_t bufferCapacityInput,
                                                         uint32_t* bufferCountOutput,
                                                         char* buffer) const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferStringEXT>(pfnGetSpatialBufferStringEXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrGetSpatialBufferUint8EXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferUint8EXT(XrSpatialSnapshotEXT snapshot,
                                                        const XrSpatialBufferGetInfoEXT* info,
                                                        uint32_t bufferCapacityInput,
                                                        uint32_t* bufferCountOutput,
                                                        uint8_t* buffer) {
    XrResult result = populate_("xrGetSpatialBufferUint8EXT", pfnGetSpatialBufferUint8EXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferUint8EXT>(pfnGetSpatialBufferUint8EXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetSpatialBufferUint8EXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferUint8EXT(XrSpatialSnapshotEXT snapshot,
                                                        const XrSpatialBufferGetInfoEXT* info,
                                                        uint32_t bufferCapacityInput,
                                                        uint32_t* bufferCountOutput,
                                                        uint8_t* buffer) const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferUint8EXT>(pfnGetSpatialBufferUint8EXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrGetSpatialBufferUint16EXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferUint16EXT(XrSpatialSnapshotEXT snapshot,
                                                         const XrSpatialBufferGetInfoEXT* info,
                                                         uint32_t bufferCapacityInput,
                                                         uint32_t* bufferCountOutput,
                                                         uint16_t* buffer) {
    XrResult result = populate_("xrGetSpatialBufferUint16EXT", pfnGetSpatialBufferUint16EXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferUint16EXT>(pfnGetSpatialBufferUint16EXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetSpatialBufferUint16EXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferUint16EXT(XrSpatialSnapshotEXT snapshot,
                                                         const XrSpatialBufferGetInfoEXT* info,
                                                         uint32_t bufferCapacityInput,
                                                         uint32_t* bufferCountOutput,
                                                         uint16_t* buffer) const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferUint16EXT>(pfnGetSpatialBufferUint16EXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrGetSpatialBufferUint32EXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferUint32EXT(XrSpatialSnapshotEXT snapshot,
                                                         const XrSpatialBufferGetInfoEXT* info,
                                                         uint32_t bufferCapacityInput,
                                                         uint32_t* bufferCountOutput,
                                                         uint32_t* buffer) {
    XrResult result = populate_("xrGetSpatialBufferUint32EXT", pfnGetSpatialBufferUint32EXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferUint32EXT>(pfnGetSpatialBufferUint32EXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetSpatialBufferUint32EXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferUint32EXT(XrSpatialSnapshotEXT snapshot,
                                                         const XrSpatialBufferGetInfoEXT* info,
                                                         uint32_t bufferCapacityInput,
                                                         uint32_t* bufferCountOutput,
                                                         uint32_t* buffer) const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferUint32EXT>(pfnGetSpatialBufferUint32EXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrGetSpatialBufferFloatEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferFloatEXT(XrSpatialSnapshotEXT snapshot,
                                                        const XrSpatialBufferGetInfoEXT* info,
                                                        uint32_t bufferCapacityInput,
                                                        uint32_t* bufferCountOutput,
                                                        float* buffer) {
    XrResult result = populate_("xrGetSpatialBufferFloatEXT", pfnGetSpatialBufferFloatEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferFloatEXT>(pfnGetSpatialBufferFloatEXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetSpatialBufferFloatEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferFloatEXT(XrSpatialSnapshotEXT snapshot,
                                                        const XrSpatialBufferGetInfoEXT* info,
                                                        uint32_t bufferCapacityInput,
                                                        uint32_t* bufferCountOutput,
                                                        float* buffer) const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferFloatEXT>(pfnGetSpatialBufferFloatEXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrGetSpatialBufferVector2fEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferVector2fEXT(XrSpatialSnapshotEXT snapshot,
                                                           const XrSpatialBufferGetInfoEXT* info,
                                                           uint32_t bufferCapacityInput,
                                                           uint32_t* bufferCountOutput,
                                                           XrVector2f* buffer) {
    XrResult result = populate_("xrGetSpatialBufferVector2fEXT", pfnGetSpatialBufferVector2fEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferVector2fEXT>(pfnGetSpatialBufferVector2fEXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetSpatialBufferVector2fEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferVector2fEXT(XrSpatialSnapshotEXT snapshot,
                                                           const XrSpatialBufferGetInfoEXT* info,
                                                           uint32_t bufferCapacityInput,
                                                           uint32_t* bufferCountOutput,
                                                           XrVector2f* buffer) const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferVector2fEXT>(pfnGetSpatialBufferVector2fEXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_entity
  //! @brief Call xrGetSpatialBufferVector3fEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferVector3fEXT(XrSpatialSnapshotEXT snapshot,
                                                           const XrSpatialBufferGetInfoEXT* info,
                                                           uint32_t bufferCapacityInput,
                                                           uint32_t* bufferCountOutput,
                                                           XrVector3f* buffer) {
    XrResult result = populate_("xrGetSpatialBufferVector3fEXT", pfnGetSpatialBufferVector3fEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferVector3fEXT>(pfnGetSpatialBufferVector3fEXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }

  //! @brief Call xrGetSpatialBufferVector3fEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrGetSpatialBufferVector3fEXT(XrSpatialSnapshotEXT snapshot,
                                                           const XrSpatialBufferGetInfoEXT* info,
                                                           uint32_t bufferCapacityInput,
                                                           uint32_t* bufferCountOutput,
                                                           XrVector3f* buffer) const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferVector3fEXT>(pfnGetSpatialBufferVector3fEXT))(
        snapshot, info, bufferCapacityInput, bufferCountOutput, buffer);
  }
#endif  // XR_EXT_spatial_entity
#ifdef XR_EXT_spatial_anchor
  //! @brief Call xrCreateSpatialAnchorEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorEXT(
      XrSpatialContextEXT spatialContext, const XrSpatialAnchorCreateInfoEXT* createInfo,
      XrSpatialEntityIdEXT* anchorEntityId, XrSpatialEntityEXT* anchorEntity) {
    XrResult result = populate_("xrCreateSpatialAnchorEXT", pfnCreateSpatialAnchorEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorEXT>(pfnCreateSpatialAnchorEXT))(
        spatialContext, createInfo, anchorEntityId, anchorEntity);
  }

  //! @brief Call xrCreateSpatialAnchorEXT (const overload - does not populate function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialAnchorEXT(
      XrSpatialContextEXT spatialContext, const XrSpatialAnchorCreateInfoEXT* createInfo,
      XrSpatialEntityIdEXT* anchorEntityId, XrSpatialEntityEXT* anchorEntity) const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorEXT>(pfnCreateSpatialAnchorEXT))(
        spatialContext, createInfo, anchorEntityId, anchorEntity);
  }
#endif  // XR_EXT_spatial_anchor
#ifdef XR_EXT_spatial_persistence
  //! @brief Call xrEnumerateSpatialPersistenceScopesEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrEnumerateSpatialPersistenceScopesEXT(
      XrInstance instance, XrSystemId systemId, uint32_t persistenceScopeCapacityInput,
      uint32_t* persistenceScopeCountOutput, XrSpatialPersistenceScopeEXT* persistenceScopes) {
    XrResult result = populate_("xrEnumerateSpatialPersistenceScopesEXT",
                                pfnEnumerateSpatialPersistenceScopesEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrEnumerateSpatialPersistenceScopesEXT>(
        pfnEnumerateSpatialPersistenceScopesEXT))(instance, systemId, persistenceScopeCapacityInput,
                                                  persistenceScopeCountOutput, persistenceScopes);
  }

  //! @brief Call xrEnumerateSpatialPersistenceScopesEXT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrEnumerateSpatialPersistenceScopesEXT(
      XrInstance instance, XrSystemId systemId, uint32_t persistenceScopeCapacityInput,
      uint32_t* persistenceScopeCountOutput,
      XrSpatialPersistenceScopeEXT* persistenceScopes) const {
    return (reinterpret_cast<PFN_xrEnumerateSpatialPersistenceScopesEXT>(
        pfnEnumerateSpatialPersistenceScopesEXT))(instance, systemId, persistenceScopeCapacityInput,
                                                  persistenceScopeCountOutput, persistenceScopes);
  }
#endif  // XR_EXT_spatial_persistence
#ifdef XR_EXT_spatial_persistence
  //! @brief Call xrCreateSpatialPersistenceContextAsyncEXT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialPersistenceContextAsyncEXT(
      XrSession session, const XrSpatialPersistenceContextCreateInfoEXT* createInfo,
      XrFutureEXT* future) {
    XrResult result = populate_("xrCreateSpatialPersistenceContextAsyncEXT",
                                pfnCreateSpatialPersistenceContextAsyncEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialPersistenceContextAsyncEXT>(
        pfnCreateSpatialPersistenceContextAsyncEXT))(session, createInfo, future);
  }

  //! @brief Call xrCreateSpatialPersistenceContextAsyncEXT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialPersistenceContextAsyncEXT(
      XrSession session, const XrSpatialPersistenceContextCreateInfoEXT* createInfo,
      XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrCreateSpatialPersistenceContextAsyncEXT>(
        pfnCreateSpatialPersistenceContextAsyncEXT))(session, createInfo, future);
  }
#endif  // XR_EXT_spatial_persistence
#ifdef XR_EXT_spatial_persistence
  //! @brief Call xrCreateSpatialPersistenceContextCompleteEXT, populating function pointer if
  //! required.
  OPENXR_HPP_INLINE XrResult xrCreateSpatialPersistenceContextCompleteEXT(
      XrSession session, XrFutureEXT future,
      XrCreateSpatialPersistenceContextCompletionEXT* completion) {
    XrResult result = populate_("xrCreateSpatialPersistenceContextCompleteEXT",
                                pfnCreateSpatialPersistenceContextCompleteEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialPersistenceContextCompleteEXT>(
        pfnCreateSpatialPersistenceContextCompleteEXT))(session, future, completion);
  }

  //! @brief Call xrCreateSpatialPersistenceContextCompleteEXT (const overload - does not populate
  //! function pointer)
  OPENXR_HPP_INLINE XrResult xrCreateSpatialPersistenceContextCompleteEXT(
      XrSession session, XrFutureEXT future,
      XrCreateSpatialPersistenceContextCompletionEXT* completion) const {
    return (reinterpret_cast<PFN_xrCreateSpatialPersistenceContextCompleteEXT>(
        pfnCreateSpatialPersistenceContextCompleteEXT))(session, future, completion);
  }
#endif  // XR_EXT_spatial_persistence
#ifdef XR_EXT_spatial_persistence
  //! @brief Call xrDestroySpatialPersistenceContextEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult
  xrDestroySpatialPersistenceContextEXT(XrSpatialPersistenceContextEXT persistenceContext) {
    XrResult result =
        populate_("xrDestroySpatialPersistenceContextEXT", pfnDestroySpatialPersistenceContextEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialPersistenceContextEXT>(
        pfnDestroySpatialPersistenceContextEXT))(persistenceContext);
  }

  //! @brief Call xrDestroySpatialPersistenceContextEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult
  xrDestroySpatialPersistenceContextEXT(XrSpatialPersistenceContextEXT persistenceContext) const {
    return (reinterpret_cast<PFN_xrDestroySpatialPersistenceContextEXT>(
        pfnDestroySpatialPersistenceContextEXT))(persistenceContext);
  }
#endif  // XR_EXT_spatial_persistence
#ifdef XR_EXT_spatial_persistence_operations
  //! @brief Call xrPersistSpatialEntityAsyncEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPersistSpatialEntityAsyncEXT(
      XrSpatialPersistenceContextEXT persistenceContext,
      const XrSpatialEntityPersistInfoEXT* persistInfo, XrFutureEXT* future) {
    XrResult result = populate_("xrPersistSpatialEntityAsyncEXT", pfnPersistSpatialEntityAsyncEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPersistSpatialEntityAsyncEXT>(pfnPersistSpatialEntityAsyncEXT))(
        persistenceContext, persistInfo, future);
  }

  //! @brief Call xrPersistSpatialEntityAsyncEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrPersistSpatialEntityAsyncEXT(
      XrSpatialPersistenceContextEXT persistenceContext,
      const XrSpatialEntityPersistInfoEXT* persistInfo, XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrPersistSpatialEntityAsyncEXT>(pfnPersistSpatialEntityAsyncEXT))(
        persistenceContext, persistInfo, future);
  }
#endif  // XR_EXT_spatial_persistence_operations
#ifdef XR_EXT_spatial_persistence_operations
  //! @brief Call xrPersistSpatialEntityCompleteEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrPersistSpatialEntityCompleteEXT(
      XrSpatialPersistenceContextEXT persistenceContext, XrFutureEXT future,
      XrPersistSpatialEntityCompletionEXT* completion) {
    XrResult result =
        populate_("xrPersistSpatialEntityCompleteEXT", pfnPersistSpatialEntityCompleteEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrPersistSpatialEntityCompleteEXT>(
        pfnPersistSpatialEntityCompleteEXT))(persistenceContext, future, completion);
  }

  //! @brief Call xrPersistSpatialEntityCompleteEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrPersistSpatialEntityCompleteEXT(
      XrSpatialPersistenceContextEXT persistenceContext, XrFutureEXT future,
      XrPersistSpatialEntityCompletionEXT* completion) const {
    return (reinterpret_cast<PFN_xrPersistSpatialEntityCompleteEXT>(
        pfnPersistSpatialEntityCompleteEXT))(persistenceContext, future, completion);
  }
#endif  // XR_EXT_spatial_persistence_operations
#ifdef XR_EXT_spatial_persistence_operations
  //! @brief Call xrUnpersistSpatialEntityAsyncEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrUnpersistSpatialEntityAsyncEXT(
      XrSpatialPersistenceContextEXT persistenceContext,
      const XrSpatialEntityUnpersistInfoEXT* unpersistInfo, XrFutureEXT* future) {
    XrResult result =
        populate_("xrUnpersistSpatialEntityAsyncEXT", pfnUnpersistSpatialEntityAsyncEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUnpersistSpatialEntityAsyncEXT>(
        pfnUnpersistSpatialEntityAsyncEXT))(persistenceContext, unpersistInfo, future);
  }

  //! @brief Call xrUnpersistSpatialEntityAsyncEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrUnpersistSpatialEntityAsyncEXT(
      XrSpatialPersistenceContextEXT persistenceContext,
      const XrSpatialEntityUnpersistInfoEXT* unpersistInfo, XrFutureEXT* future) const {
    return (reinterpret_cast<PFN_xrUnpersistSpatialEntityAsyncEXT>(
        pfnUnpersistSpatialEntityAsyncEXT))(persistenceContext, unpersistInfo, future);
  }
#endif  // XR_EXT_spatial_persistence_operations
#ifdef XR_EXT_spatial_persistence_operations
  //! @brief Call xrUnpersistSpatialEntityCompleteEXT, populating function pointer if required.
  OPENXR_HPP_INLINE XrResult xrUnpersistSpatialEntityCompleteEXT(
      XrSpatialPersistenceContextEXT persistenceContext, XrFutureEXT future,
      XrUnpersistSpatialEntityCompletionEXT* completion) {
    XrResult result =
        populate_("xrUnpersistSpatialEntityCompleteEXT", pfnUnpersistSpatialEntityCompleteEXT);
    if (XR_FAILED(result)) {
      return result;
    }

    return (reinterpret_cast<PFN_xrUnpersistSpatialEntityCompleteEXT>(
        pfnUnpersistSpatialEntityCompleteEXT))(persistenceContext, future, completion);
  }

  //! @brief Call xrUnpersistSpatialEntityCompleteEXT (const overload - does not populate function
  //! pointer)
  OPENXR_HPP_INLINE XrResult xrUnpersistSpatialEntityCompleteEXT(
      XrSpatialPersistenceContextEXT persistenceContext, XrFutureEXT future,
      XrUnpersistSpatialEntityCompletionEXT* completion) const {
    return (reinterpret_cast<PFN_xrUnpersistSpatialEntityCompleteEXT>(
        pfnUnpersistSpatialEntityCompleteEXT))(persistenceContext, future, completion);
  }
#endif  // XR_EXT_spatial_persistence_operations
  //! @}

  /*!
   * @name Function pointer accessors
   * @brief These populate the function pointer (if required and non-const), then cast it and return
   * it.
   *
   * Sometimes you just want the function pointer, instead of wanting to call the function pointer.
   * These methods let you get that.
   *
   * @{
   */

  /*!
   * @brief Return the function pointer for xrGetInstanceProcAddr, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetInstanceProcAddr getInstanceProcAddr_xrGetInstanceProcAddr() {
    XrResult result = populate_("xrGetInstanceProcAddr", pfnGetInstanceProcAddr);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetInstanceProcAddr>(pfnGetInstanceProcAddr));
  }
  /*!
   * @brief Return the function pointer for xrGetInstanceProcAddr (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetInstanceProcAddr getInstanceProcAddr_xrGetInstanceProcAddr() const {
    return (reinterpret_cast<PFN_xrGetInstanceProcAddr>(pfnGetInstanceProcAddr));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateApiLayerProperties, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateApiLayerProperties
  getInstanceProcAddr_xrEnumerateApiLayerProperties() {
    XrResult result = populate_("xrEnumerateApiLayerProperties", pfnEnumerateApiLayerProperties);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateApiLayerProperties>(pfnEnumerateApiLayerProperties));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateApiLayerProperties (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateApiLayerProperties
  getInstanceProcAddr_xrEnumerateApiLayerProperties() const {
    return (reinterpret_cast<PFN_xrEnumerateApiLayerProperties>(pfnEnumerateApiLayerProperties));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateInstanceExtensionProperties, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateInstanceExtensionProperties
  getInstanceProcAddr_xrEnumerateInstanceExtensionProperties() {
    XrResult result = populate_("xrEnumerateInstanceExtensionProperties",
                                pfnEnumerateInstanceExtensionProperties);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateInstanceExtensionProperties>(
        pfnEnumerateInstanceExtensionProperties));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateInstanceExtensionProperties (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateInstanceExtensionProperties
  getInstanceProcAddr_xrEnumerateInstanceExtensionProperties() const {
    return (reinterpret_cast<PFN_xrEnumerateInstanceExtensionProperties>(
        pfnEnumerateInstanceExtensionProperties));
  }

  /*!
   * @brief Return the function pointer for xrCreateInstance, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateInstance getInstanceProcAddr_xrCreateInstance() {
    XrResult result = populate_("xrCreateInstance", pfnCreateInstance);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateInstance>(pfnCreateInstance));
  }
  /*!
   * @brief Return the function pointer for xrCreateInstance (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateInstance getInstanceProcAddr_xrCreateInstance() const {
    return (reinterpret_cast<PFN_xrCreateInstance>(pfnCreateInstance));
  }

  /*!
   * @brief Return the function pointer for xrDestroyInstance, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyInstance getInstanceProcAddr_xrDestroyInstance() {
    XrResult result = populate_("xrDestroyInstance", pfnDestroyInstance);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyInstance>(pfnDestroyInstance));
  }
  /*!
   * @brief Return the function pointer for xrDestroyInstance (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyInstance getInstanceProcAddr_xrDestroyInstance() const {
    return (reinterpret_cast<PFN_xrDestroyInstance>(pfnDestroyInstance));
  }

  /*!
   * @brief Return the function pointer for xrGetInstanceProperties, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetInstanceProperties getInstanceProcAddr_xrGetInstanceProperties() {
    XrResult result = populate_("xrGetInstanceProperties", pfnGetInstanceProperties);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetInstanceProperties>(pfnGetInstanceProperties));
  }
  /*!
   * @brief Return the function pointer for xrGetInstanceProperties (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetInstanceProperties
  getInstanceProcAddr_xrGetInstanceProperties() const {
    return (reinterpret_cast<PFN_xrGetInstanceProperties>(pfnGetInstanceProperties));
  }

  /*!
   * @brief Return the function pointer for xrPollEvent, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPollEvent getInstanceProcAddr_xrPollEvent() {
    XrResult result = populate_("xrPollEvent", pfnPollEvent);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPollEvent>(pfnPollEvent));
  }
  /*!
   * @brief Return the function pointer for xrPollEvent (const overload - does not populate function
   * pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPollEvent getInstanceProcAddr_xrPollEvent() const {
    return (reinterpret_cast<PFN_xrPollEvent>(pfnPollEvent));
  }

  /*!
   * @brief Return the function pointer for xrResultToString, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrResultToString getInstanceProcAddr_xrResultToString() {
    XrResult result = populate_("xrResultToString", pfnResultToString);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrResultToString>(pfnResultToString));
  }
  /*!
   * @brief Return the function pointer for xrResultToString (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrResultToString getInstanceProcAddr_xrResultToString() const {
    return (reinterpret_cast<PFN_xrResultToString>(pfnResultToString));
  }

  /*!
   * @brief Return the function pointer for xrStructureTypeToString, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrStructureTypeToString getInstanceProcAddr_xrStructureTypeToString() {
    XrResult result = populate_("xrStructureTypeToString", pfnStructureTypeToString);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStructureTypeToString>(pfnStructureTypeToString));
  }
  /*!
   * @brief Return the function pointer for xrStructureTypeToString (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStructureTypeToString
  getInstanceProcAddr_xrStructureTypeToString() const {
    return (reinterpret_cast<PFN_xrStructureTypeToString>(pfnStructureTypeToString));
  }

  /*!
   * @brief Return the function pointer for xrGetSystem, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSystem getInstanceProcAddr_xrGetSystem() {
    XrResult result = populate_("xrGetSystem", pfnGetSystem);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSystem>(pfnGetSystem));
  }
  /*!
   * @brief Return the function pointer for xrGetSystem (const overload - does not populate function
   * pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSystem getInstanceProcAddr_xrGetSystem() const {
    return (reinterpret_cast<PFN_xrGetSystem>(pfnGetSystem));
  }

  /*!
   * @brief Return the function pointer for xrGetSystemProperties, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSystemProperties getInstanceProcAddr_xrGetSystemProperties() {
    XrResult result = populate_("xrGetSystemProperties", pfnGetSystemProperties);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSystemProperties>(pfnGetSystemProperties));
  }
  /*!
   * @brief Return the function pointer for xrGetSystemProperties (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSystemProperties getInstanceProcAddr_xrGetSystemProperties() const {
    return (reinterpret_cast<PFN_xrGetSystemProperties>(pfnGetSystemProperties));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateEnvironmentBlendModes, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateEnvironmentBlendModes
  getInstanceProcAddr_xrEnumerateEnvironmentBlendModes() {
    XrResult result =
        populate_("xrEnumerateEnvironmentBlendModes", pfnEnumerateEnvironmentBlendModes);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateEnvironmentBlendModes>(pfnEnumerateEnvironmentBlendModes));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateEnvironmentBlendModes (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateEnvironmentBlendModes
  getInstanceProcAddr_xrEnumerateEnvironmentBlendModes() const {
    return (
        reinterpret_cast<PFN_xrEnumerateEnvironmentBlendModes>(pfnEnumerateEnvironmentBlendModes));
  }

  /*!
   * @brief Return the function pointer for xrCreateSession, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSession getInstanceProcAddr_xrCreateSession() {
    XrResult result = populate_("xrCreateSession", pfnCreateSession);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSession>(pfnCreateSession));
  }
  /*!
   * @brief Return the function pointer for xrCreateSession (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSession getInstanceProcAddr_xrCreateSession() const {
    return (reinterpret_cast<PFN_xrCreateSession>(pfnCreateSession));
  }

  /*!
   * @brief Return the function pointer for xrDestroySession, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySession getInstanceProcAddr_xrDestroySession() {
    XrResult result = populate_("xrDestroySession", pfnDestroySession);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySession>(pfnDestroySession));
  }
  /*!
   * @brief Return the function pointer for xrDestroySession (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySession getInstanceProcAddr_xrDestroySession() const {
    return (reinterpret_cast<PFN_xrDestroySession>(pfnDestroySession));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateReferenceSpaces, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateReferenceSpaces
  getInstanceProcAddr_xrEnumerateReferenceSpaces() {
    XrResult result = populate_("xrEnumerateReferenceSpaces", pfnEnumerateReferenceSpaces);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateReferenceSpaces>(pfnEnumerateReferenceSpaces));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateReferenceSpaces (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateReferenceSpaces
  getInstanceProcAddr_xrEnumerateReferenceSpaces() const {
    return (reinterpret_cast<PFN_xrEnumerateReferenceSpaces>(pfnEnumerateReferenceSpaces));
  }

  /*!
   * @brief Return the function pointer for xrCreateReferenceSpace, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateReferenceSpace getInstanceProcAddr_xrCreateReferenceSpace() {
    XrResult result = populate_("xrCreateReferenceSpace", pfnCreateReferenceSpace);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateReferenceSpace>(pfnCreateReferenceSpace));
  }
  /*!
   * @brief Return the function pointer for xrCreateReferenceSpace (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateReferenceSpace getInstanceProcAddr_xrCreateReferenceSpace() const {
    return (reinterpret_cast<PFN_xrCreateReferenceSpace>(pfnCreateReferenceSpace));
  }

  /*!
   * @brief Return the function pointer for xrGetReferenceSpaceBoundsRect, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetReferenceSpaceBoundsRect
  getInstanceProcAddr_xrGetReferenceSpaceBoundsRect() {
    XrResult result = populate_("xrGetReferenceSpaceBoundsRect", pfnGetReferenceSpaceBoundsRect);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetReferenceSpaceBoundsRect>(pfnGetReferenceSpaceBoundsRect));
  }
  /*!
   * @brief Return the function pointer for xrGetReferenceSpaceBoundsRect (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetReferenceSpaceBoundsRect
  getInstanceProcAddr_xrGetReferenceSpaceBoundsRect() const {
    return (reinterpret_cast<PFN_xrGetReferenceSpaceBoundsRect>(pfnGetReferenceSpaceBoundsRect));
  }

  /*!
   * @brief Return the function pointer for xrCreateActionSpace, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateActionSpace getInstanceProcAddr_xrCreateActionSpace() {
    XrResult result = populate_("xrCreateActionSpace", pfnCreateActionSpace);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateActionSpace>(pfnCreateActionSpace));
  }
  /*!
   * @brief Return the function pointer for xrCreateActionSpace (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateActionSpace getInstanceProcAddr_xrCreateActionSpace() const {
    return (reinterpret_cast<PFN_xrCreateActionSpace>(pfnCreateActionSpace));
  }

  /*!
   * @brief Return the function pointer for xrLocateSpace, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateSpace getInstanceProcAddr_xrLocateSpace() {
    XrResult result = populate_("xrLocateSpace", pfnLocateSpace);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateSpace>(pfnLocateSpace));
  }
  /*!
   * @brief Return the function pointer for xrLocateSpace (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateSpace getInstanceProcAddr_xrLocateSpace() const {
    return (reinterpret_cast<PFN_xrLocateSpace>(pfnLocateSpace));
  }

  /*!
   * @brief Return the function pointer for xrDestroySpace, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpace getInstanceProcAddr_xrDestroySpace() {
    XrResult result = populate_("xrDestroySpace", pfnDestroySpace);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySpace>(pfnDestroySpace));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpace (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpace getInstanceProcAddr_xrDestroySpace() const {
    return (reinterpret_cast<PFN_xrDestroySpace>(pfnDestroySpace));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateViewConfigurations, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateViewConfigurations
  getInstanceProcAddr_xrEnumerateViewConfigurations() {
    XrResult result = populate_("xrEnumerateViewConfigurations", pfnEnumerateViewConfigurations);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateViewConfigurations>(pfnEnumerateViewConfigurations));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateViewConfigurations (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateViewConfigurations
  getInstanceProcAddr_xrEnumerateViewConfigurations() const {
    return (reinterpret_cast<PFN_xrEnumerateViewConfigurations>(pfnEnumerateViewConfigurations));
  }

  /*!
   * @brief Return the function pointer for xrGetViewConfigurationProperties, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetViewConfigurationProperties
  getInstanceProcAddr_xrGetViewConfigurationProperties() {
    XrResult result =
        populate_("xrGetViewConfigurationProperties", pfnGetViewConfigurationProperties);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrGetViewConfigurationProperties>(pfnGetViewConfigurationProperties));
  }
  /*!
   * @brief Return the function pointer for xrGetViewConfigurationProperties (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetViewConfigurationProperties
  getInstanceProcAddr_xrGetViewConfigurationProperties() const {
    return (
        reinterpret_cast<PFN_xrGetViewConfigurationProperties>(pfnGetViewConfigurationProperties));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateViewConfigurationViews, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateViewConfigurationViews
  getInstanceProcAddr_xrEnumerateViewConfigurationViews() {
    XrResult result =
        populate_("xrEnumerateViewConfigurationViews", pfnEnumerateViewConfigurationViews);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateViewConfigurationViews>(
        pfnEnumerateViewConfigurationViews));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateViewConfigurationViews (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateViewConfigurationViews
  getInstanceProcAddr_xrEnumerateViewConfigurationViews() const {
    return (reinterpret_cast<PFN_xrEnumerateViewConfigurationViews>(
        pfnEnumerateViewConfigurationViews));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateSwapchainFormats, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSwapchainFormats
  getInstanceProcAddr_xrEnumerateSwapchainFormats() {
    XrResult result = populate_("xrEnumerateSwapchainFormats", pfnEnumerateSwapchainFormats);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateSwapchainFormats>(pfnEnumerateSwapchainFormats));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateSwapchainFormats (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSwapchainFormats
  getInstanceProcAddr_xrEnumerateSwapchainFormats() const {
    return (reinterpret_cast<PFN_xrEnumerateSwapchainFormats>(pfnEnumerateSwapchainFormats));
  }

  /*!
   * @brief Return the function pointer for xrCreateSwapchain, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSwapchain getInstanceProcAddr_xrCreateSwapchain() {
    XrResult result = populate_("xrCreateSwapchain", pfnCreateSwapchain);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSwapchain>(pfnCreateSwapchain));
  }
  /*!
   * @brief Return the function pointer for xrCreateSwapchain (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSwapchain getInstanceProcAddr_xrCreateSwapchain() const {
    return (reinterpret_cast<PFN_xrCreateSwapchain>(pfnCreateSwapchain));
  }

  /*!
   * @brief Return the function pointer for xrDestroySwapchain, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySwapchain getInstanceProcAddr_xrDestroySwapchain() {
    XrResult result = populate_("xrDestroySwapchain", pfnDestroySwapchain);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySwapchain>(pfnDestroySwapchain));
  }
  /*!
   * @brief Return the function pointer for xrDestroySwapchain (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySwapchain getInstanceProcAddr_xrDestroySwapchain() const {
    return (reinterpret_cast<PFN_xrDestroySwapchain>(pfnDestroySwapchain));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateSwapchainImages, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSwapchainImages
  getInstanceProcAddr_xrEnumerateSwapchainImages() {
    XrResult result = populate_("xrEnumerateSwapchainImages", pfnEnumerateSwapchainImages);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateSwapchainImages>(pfnEnumerateSwapchainImages));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateSwapchainImages (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSwapchainImages
  getInstanceProcAddr_xrEnumerateSwapchainImages() const {
    return (reinterpret_cast<PFN_xrEnumerateSwapchainImages>(pfnEnumerateSwapchainImages));
  }

  /*!
   * @brief Return the function pointer for xrAcquireSwapchainImage, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrAcquireSwapchainImage getInstanceProcAddr_xrAcquireSwapchainImage() {
    XrResult result = populate_("xrAcquireSwapchainImage", pfnAcquireSwapchainImage);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrAcquireSwapchainImage>(pfnAcquireSwapchainImage));
  }
  /*!
   * @brief Return the function pointer for xrAcquireSwapchainImage (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrAcquireSwapchainImage
  getInstanceProcAddr_xrAcquireSwapchainImage() const {
    return (reinterpret_cast<PFN_xrAcquireSwapchainImage>(pfnAcquireSwapchainImage));
  }

  /*!
   * @brief Return the function pointer for xrWaitSwapchainImage, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrWaitSwapchainImage getInstanceProcAddr_xrWaitSwapchainImage() {
    XrResult result = populate_("xrWaitSwapchainImage", pfnWaitSwapchainImage);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrWaitSwapchainImage>(pfnWaitSwapchainImage));
  }
  /*!
   * @brief Return the function pointer for xrWaitSwapchainImage (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrWaitSwapchainImage getInstanceProcAddr_xrWaitSwapchainImage() const {
    return (reinterpret_cast<PFN_xrWaitSwapchainImage>(pfnWaitSwapchainImage));
  }

  /*!
   * @brief Return the function pointer for xrReleaseSwapchainImage, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrReleaseSwapchainImage getInstanceProcAddr_xrReleaseSwapchainImage() {
    XrResult result = populate_("xrReleaseSwapchainImage", pfnReleaseSwapchainImage);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrReleaseSwapchainImage>(pfnReleaseSwapchainImage));
  }
  /*!
   * @brief Return the function pointer for xrReleaseSwapchainImage (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrReleaseSwapchainImage
  getInstanceProcAddr_xrReleaseSwapchainImage() const {
    return (reinterpret_cast<PFN_xrReleaseSwapchainImage>(pfnReleaseSwapchainImage));
  }

  /*!
   * @brief Return the function pointer for xrBeginSession, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrBeginSession getInstanceProcAddr_xrBeginSession() {
    XrResult result = populate_("xrBeginSession", pfnBeginSession);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrBeginSession>(pfnBeginSession));
  }
  /*!
   * @brief Return the function pointer for xrBeginSession (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrBeginSession getInstanceProcAddr_xrBeginSession() const {
    return (reinterpret_cast<PFN_xrBeginSession>(pfnBeginSession));
  }

  /*!
   * @brief Return the function pointer for xrEndSession, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEndSession getInstanceProcAddr_xrEndSession() {
    XrResult result = populate_("xrEndSession", pfnEndSession);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEndSession>(pfnEndSession));
  }
  /*!
   * @brief Return the function pointer for xrEndSession (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEndSession getInstanceProcAddr_xrEndSession() const {
    return (reinterpret_cast<PFN_xrEndSession>(pfnEndSession));
  }

  /*!
   * @brief Return the function pointer for xrRequestExitSession, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrRequestExitSession getInstanceProcAddr_xrRequestExitSession() {
    XrResult result = populate_("xrRequestExitSession", pfnRequestExitSession);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrRequestExitSession>(pfnRequestExitSession));
  }
  /*!
   * @brief Return the function pointer for xrRequestExitSession (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrRequestExitSession getInstanceProcAddr_xrRequestExitSession() const {
    return (reinterpret_cast<PFN_xrRequestExitSession>(pfnRequestExitSession));
  }

  /*!
   * @brief Return the function pointer for xrWaitFrame, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrWaitFrame getInstanceProcAddr_xrWaitFrame() {
    XrResult result = populate_("xrWaitFrame", pfnWaitFrame);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrWaitFrame>(pfnWaitFrame));
  }
  /*!
   * @brief Return the function pointer for xrWaitFrame (const overload - does not populate function
   * pointer)
   */
  OPENXR_HPP_INLINE PFN_xrWaitFrame getInstanceProcAddr_xrWaitFrame() const {
    return (reinterpret_cast<PFN_xrWaitFrame>(pfnWaitFrame));
  }

  /*!
   * @brief Return the function pointer for xrBeginFrame, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrBeginFrame getInstanceProcAddr_xrBeginFrame() {
    XrResult result = populate_("xrBeginFrame", pfnBeginFrame);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrBeginFrame>(pfnBeginFrame));
  }
  /*!
   * @brief Return the function pointer for xrBeginFrame (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrBeginFrame getInstanceProcAddr_xrBeginFrame() const {
    return (reinterpret_cast<PFN_xrBeginFrame>(pfnBeginFrame));
  }

  /*!
   * @brief Return the function pointer for xrEndFrame, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEndFrame getInstanceProcAddr_xrEndFrame() {
    XrResult result = populate_("xrEndFrame", pfnEndFrame);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEndFrame>(pfnEndFrame));
  }
  /*!
   * @brief Return the function pointer for xrEndFrame (const overload - does not populate function
   * pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEndFrame getInstanceProcAddr_xrEndFrame() const {
    return (reinterpret_cast<PFN_xrEndFrame>(pfnEndFrame));
  }

  /*!
   * @brief Return the function pointer for xrLocateViews, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateViews getInstanceProcAddr_xrLocateViews() {
    XrResult result = populate_("xrLocateViews", pfnLocateViews);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateViews>(pfnLocateViews));
  }
  /*!
   * @brief Return the function pointer for xrLocateViews (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateViews getInstanceProcAddr_xrLocateViews() const {
    return (reinterpret_cast<PFN_xrLocateViews>(pfnLocateViews));
  }

  /*!
   * @brief Return the function pointer for xrStringToPath, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrStringToPath getInstanceProcAddr_xrStringToPath() {
    XrResult result = populate_("xrStringToPath", pfnStringToPath);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStringToPath>(pfnStringToPath));
  }
  /*!
   * @brief Return the function pointer for xrStringToPath (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStringToPath getInstanceProcAddr_xrStringToPath() const {
    return (reinterpret_cast<PFN_xrStringToPath>(pfnStringToPath));
  }

  /*!
   * @brief Return the function pointer for xrPathToString, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPathToString getInstanceProcAddr_xrPathToString() {
    XrResult result = populate_("xrPathToString", pfnPathToString);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPathToString>(pfnPathToString));
  }
  /*!
   * @brief Return the function pointer for xrPathToString (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPathToString getInstanceProcAddr_xrPathToString() const {
    return (reinterpret_cast<PFN_xrPathToString>(pfnPathToString));
  }

  /*!
   * @brief Return the function pointer for xrCreateActionSet, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateActionSet getInstanceProcAddr_xrCreateActionSet() {
    XrResult result = populate_("xrCreateActionSet", pfnCreateActionSet);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateActionSet>(pfnCreateActionSet));
  }
  /*!
   * @brief Return the function pointer for xrCreateActionSet (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateActionSet getInstanceProcAddr_xrCreateActionSet() const {
    return (reinterpret_cast<PFN_xrCreateActionSet>(pfnCreateActionSet));
  }

  /*!
   * @brief Return the function pointer for xrDestroyActionSet, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyActionSet getInstanceProcAddr_xrDestroyActionSet() {
    XrResult result = populate_("xrDestroyActionSet", pfnDestroyActionSet);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyActionSet>(pfnDestroyActionSet));
  }
  /*!
   * @brief Return the function pointer for xrDestroyActionSet (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyActionSet getInstanceProcAddr_xrDestroyActionSet() const {
    return (reinterpret_cast<PFN_xrDestroyActionSet>(pfnDestroyActionSet));
  }

  /*!
   * @brief Return the function pointer for xrCreateAction, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateAction getInstanceProcAddr_xrCreateAction() {
    XrResult result = populate_("xrCreateAction", pfnCreateAction);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateAction>(pfnCreateAction));
  }
  /*!
   * @brief Return the function pointer for xrCreateAction (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateAction getInstanceProcAddr_xrCreateAction() const {
    return (reinterpret_cast<PFN_xrCreateAction>(pfnCreateAction));
  }

  /*!
   * @brief Return the function pointer for xrDestroyAction, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyAction getInstanceProcAddr_xrDestroyAction() {
    XrResult result = populate_("xrDestroyAction", pfnDestroyAction);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyAction>(pfnDestroyAction));
  }
  /*!
   * @brief Return the function pointer for xrDestroyAction (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyAction getInstanceProcAddr_xrDestroyAction() const {
    return (reinterpret_cast<PFN_xrDestroyAction>(pfnDestroyAction));
  }

  /*!
   * @brief Return the function pointer for xrSuggestInteractionProfileBindings, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSuggestInteractionProfileBindings
  getInstanceProcAddr_xrSuggestInteractionProfileBindings() {
    XrResult result =
        populate_("xrSuggestInteractionProfileBindings", pfnSuggestInteractionProfileBindings);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSuggestInteractionProfileBindings>(
        pfnSuggestInteractionProfileBindings));
  }
  /*!
   * @brief Return the function pointer for xrSuggestInteractionProfileBindings (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSuggestInteractionProfileBindings
  getInstanceProcAddr_xrSuggestInteractionProfileBindings() const {
    return (reinterpret_cast<PFN_xrSuggestInteractionProfileBindings>(
        pfnSuggestInteractionProfileBindings));
  }

  /*!
   * @brief Return the function pointer for xrAttachSessionActionSets, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrAttachSessionActionSets getInstanceProcAddr_xrAttachSessionActionSets() {
    XrResult result = populate_("xrAttachSessionActionSets", pfnAttachSessionActionSets);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrAttachSessionActionSets>(pfnAttachSessionActionSets));
  }
  /*!
   * @brief Return the function pointer for xrAttachSessionActionSets (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrAttachSessionActionSets
  getInstanceProcAddr_xrAttachSessionActionSets() const {
    return (reinterpret_cast<PFN_xrAttachSessionActionSets>(pfnAttachSessionActionSets));
  }

  /*!
   * @brief Return the function pointer for xrGetCurrentInteractionProfile, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetCurrentInteractionProfile
  getInstanceProcAddr_xrGetCurrentInteractionProfile() {
    XrResult result = populate_("xrGetCurrentInteractionProfile", pfnGetCurrentInteractionProfile);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetCurrentInteractionProfile>(pfnGetCurrentInteractionProfile));
  }
  /*!
   * @brief Return the function pointer for xrGetCurrentInteractionProfile (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetCurrentInteractionProfile
  getInstanceProcAddr_xrGetCurrentInteractionProfile() const {
    return (reinterpret_cast<PFN_xrGetCurrentInteractionProfile>(pfnGetCurrentInteractionProfile));
  }

  /*!
   * @brief Return the function pointer for xrGetActionStateBoolean, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStateBoolean getInstanceProcAddr_xrGetActionStateBoolean() {
    XrResult result = populate_("xrGetActionStateBoolean", pfnGetActionStateBoolean);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetActionStateBoolean>(pfnGetActionStateBoolean));
  }
  /*!
   * @brief Return the function pointer for xrGetActionStateBoolean (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStateBoolean
  getInstanceProcAddr_xrGetActionStateBoolean() const {
    return (reinterpret_cast<PFN_xrGetActionStateBoolean>(pfnGetActionStateBoolean));
  }

  /*!
   * @brief Return the function pointer for xrGetActionStateFloat, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStateFloat getInstanceProcAddr_xrGetActionStateFloat() {
    XrResult result = populate_("xrGetActionStateFloat", pfnGetActionStateFloat);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetActionStateFloat>(pfnGetActionStateFloat));
  }
  /*!
   * @brief Return the function pointer for xrGetActionStateFloat (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStateFloat getInstanceProcAddr_xrGetActionStateFloat() const {
    return (reinterpret_cast<PFN_xrGetActionStateFloat>(pfnGetActionStateFloat));
  }

  /*!
   * @brief Return the function pointer for xrGetActionStateVector2f, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStateVector2f getInstanceProcAddr_xrGetActionStateVector2f() {
    XrResult result = populate_("xrGetActionStateVector2f", pfnGetActionStateVector2f);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetActionStateVector2f>(pfnGetActionStateVector2f));
  }
  /*!
   * @brief Return the function pointer for xrGetActionStateVector2f (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStateVector2f
  getInstanceProcAddr_xrGetActionStateVector2f() const {
    return (reinterpret_cast<PFN_xrGetActionStateVector2f>(pfnGetActionStateVector2f));
  }

  /*!
   * @brief Return the function pointer for xrGetActionStatePose, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStatePose getInstanceProcAddr_xrGetActionStatePose() {
    XrResult result = populate_("xrGetActionStatePose", pfnGetActionStatePose);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetActionStatePose>(pfnGetActionStatePose));
  }
  /*!
   * @brief Return the function pointer for xrGetActionStatePose (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetActionStatePose getInstanceProcAddr_xrGetActionStatePose() const {
    return (reinterpret_cast<PFN_xrGetActionStatePose>(pfnGetActionStatePose));
  }

  /*!
   * @brief Return the function pointer for xrSyncActions, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSyncActions getInstanceProcAddr_xrSyncActions() {
    XrResult result = populate_("xrSyncActions", pfnSyncActions);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSyncActions>(pfnSyncActions));
  }
  /*!
   * @brief Return the function pointer for xrSyncActions (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSyncActions getInstanceProcAddr_xrSyncActions() const {
    return (reinterpret_cast<PFN_xrSyncActions>(pfnSyncActions));
  }

  /*!
   * @brief Return the function pointer for xrEnumerateBoundSourcesForAction, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateBoundSourcesForAction
  getInstanceProcAddr_xrEnumerateBoundSourcesForAction() {
    XrResult result =
        populate_("xrEnumerateBoundSourcesForAction", pfnEnumerateBoundSourcesForAction);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateBoundSourcesForAction>(pfnEnumerateBoundSourcesForAction));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateBoundSourcesForAction (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateBoundSourcesForAction
  getInstanceProcAddr_xrEnumerateBoundSourcesForAction() const {
    return (
        reinterpret_cast<PFN_xrEnumerateBoundSourcesForAction>(pfnEnumerateBoundSourcesForAction));
  }

  /*!
   * @brief Return the function pointer for xrGetInputSourceLocalizedName, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetInputSourceLocalizedName
  getInstanceProcAddr_xrGetInputSourceLocalizedName() {
    XrResult result = populate_("xrGetInputSourceLocalizedName", pfnGetInputSourceLocalizedName);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetInputSourceLocalizedName>(pfnGetInputSourceLocalizedName));
  }
  /*!
   * @brief Return the function pointer for xrGetInputSourceLocalizedName (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetInputSourceLocalizedName
  getInstanceProcAddr_xrGetInputSourceLocalizedName() const {
    return (reinterpret_cast<PFN_xrGetInputSourceLocalizedName>(pfnGetInputSourceLocalizedName));
  }

  /*!
   * @brief Return the function pointer for xrApplyHapticFeedback, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrApplyHapticFeedback getInstanceProcAddr_xrApplyHapticFeedback() {
    XrResult result = populate_("xrApplyHapticFeedback", pfnApplyHapticFeedback);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrApplyHapticFeedback>(pfnApplyHapticFeedback));
  }
  /*!
   * @brief Return the function pointer for xrApplyHapticFeedback (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrApplyHapticFeedback getInstanceProcAddr_xrApplyHapticFeedback() const {
    return (reinterpret_cast<PFN_xrApplyHapticFeedback>(pfnApplyHapticFeedback));
  }

  /*!
   * @brief Return the function pointer for xrStopHapticFeedback, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrStopHapticFeedback getInstanceProcAddr_xrStopHapticFeedback() {
    XrResult result = populate_("xrStopHapticFeedback", pfnStopHapticFeedback);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStopHapticFeedback>(pfnStopHapticFeedback));
  }
  /*!
   * @brief Return the function pointer for xrStopHapticFeedback (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStopHapticFeedback getInstanceProcAddr_xrStopHapticFeedback() const {
    return (reinterpret_cast<PFN_xrStopHapticFeedback>(pfnStopHapticFeedback));
  }

#ifdef XR_LOADER_VERSION_1_0
  /*!
   * @brief Return the function pointer for xrCreateApiLayerInstance, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateApiLayerInstance getInstanceProcAddr_xrCreateApiLayerInstance() {
    XrResult result = populate_("xrCreateApiLayerInstance", pfnCreateApiLayerInstance);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateApiLayerInstance>(pfnCreateApiLayerInstance));
  }
  /*!
   * @brief Return the function pointer for xrCreateApiLayerInstance (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateApiLayerInstance
  getInstanceProcAddr_xrCreateApiLayerInstance() const {
    return (reinterpret_cast<PFN_xrCreateApiLayerInstance>(pfnCreateApiLayerInstance));
  }
#endif  // XR_LOADER_VERSION_1_0

#ifdef XR_LOADER_VERSION_1_0
  /*!
   * @brief Return the function pointer for xrNegotiateLoaderRuntimeInterface, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrNegotiateLoaderRuntimeInterface
  getInstanceProcAddr_xrNegotiateLoaderRuntimeInterface() {
    XrResult result =
        populate_("xrNegotiateLoaderRuntimeInterface", pfnNegotiateLoaderRuntimeInterface);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrNegotiateLoaderRuntimeInterface>(
        pfnNegotiateLoaderRuntimeInterface));
  }
  /*!
   * @brief Return the function pointer for xrNegotiateLoaderRuntimeInterface (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrNegotiateLoaderRuntimeInterface
  getInstanceProcAddr_xrNegotiateLoaderRuntimeInterface() const {
    return (reinterpret_cast<PFN_xrNegotiateLoaderRuntimeInterface>(
        pfnNegotiateLoaderRuntimeInterface));
  }
#endif  // XR_LOADER_VERSION_1_0

#ifdef XR_LOADER_VERSION_1_0
  /*!
   * @brief Return the function pointer for xrNegotiateLoaderApiLayerInterface, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrNegotiateLoaderApiLayerInterface
  getInstanceProcAddr_xrNegotiateLoaderApiLayerInterface() {
    XrResult result =
        populate_("xrNegotiateLoaderApiLayerInterface", pfnNegotiateLoaderApiLayerInterface);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrNegotiateLoaderApiLayerInterface>(
        pfnNegotiateLoaderApiLayerInterface));
  }
  /*!
   * @brief Return the function pointer for xrNegotiateLoaderApiLayerInterface (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrNegotiateLoaderApiLayerInterface
  getInstanceProcAddr_xrNegotiateLoaderApiLayerInterface() const {
    return (reinterpret_cast<PFN_xrNegotiateLoaderApiLayerInterface>(
        pfnNegotiateLoaderApiLayerInterface));
  }
#endif  // XR_LOADER_VERSION_1_0

  /*!
   * @brief Return the function pointer for xrLocateSpaces, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateSpaces getInstanceProcAddr_xrLocateSpaces() {
    XrResult result = populate_("xrLocateSpaces", pfnLocateSpaces);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateSpaces>(pfnLocateSpaces));
  }
  /*!
   * @brief Return the function pointer for xrLocateSpaces (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateSpaces getInstanceProcAddr_xrLocateSpaces() const {
    return (reinterpret_cast<PFN_xrLocateSpaces>(pfnLocateSpaces));
  }

#ifdef XR_KHR_android_thread_settings
#if defined(XR_USE_PLATFORM_ANDROID)
  /*!
   * @brief Return the function pointer for xrSetAndroidApplicationThreadKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetAndroidApplicationThreadKHR
  getInstanceProcAddr_xrSetAndroidApplicationThreadKHR() {
    XrResult result =
        populate_("xrSetAndroidApplicationThreadKHR", pfnSetAndroidApplicationThreadKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrSetAndroidApplicationThreadKHR>(pfnSetAndroidApplicationThreadKHR));
  }
  /*!
   * @brief Return the function pointer for xrSetAndroidApplicationThreadKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetAndroidApplicationThreadKHR
  getInstanceProcAddr_xrSetAndroidApplicationThreadKHR() const {
    return (
        reinterpret_cast<PFN_xrSetAndroidApplicationThreadKHR>(pfnSetAndroidApplicationThreadKHR));
  }
#endif  // defined(XR_USE_PLATFORM_ANDROID)
#endif  // XR_KHR_android_thread_settings

#ifdef XR_KHR_android_surface_swapchain
#if defined(XR_USE_PLATFORM_ANDROID)
  /*!
   * @brief Return the function pointer for xrCreateSwapchainAndroidSurfaceKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSwapchainAndroidSurfaceKHR
  getInstanceProcAddr_xrCreateSwapchainAndroidSurfaceKHR() {
    XrResult result =
        populate_("xrCreateSwapchainAndroidSurfaceKHR", pfnCreateSwapchainAndroidSurfaceKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSwapchainAndroidSurfaceKHR>(
        pfnCreateSwapchainAndroidSurfaceKHR));
  }
  /*!
   * @brief Return the function pointer for xrCreateSwapchainAndroidSurfaceKHR (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSwapchainAndroidSurfaceKHR
  getInstanceProcAddr_xrCreateSwapchainAndroidSurfaceKHR() const {
    return (reinterpret_cast<PFN_xrCreateSwapchainAndroidSurfaceKHR>(
        pfnCreateSwapchainAndroidSurfaceKHR));
  }
#endif  // defined(XR_USE_PLATFORM_ANDROID)
#endif  // XR_KHR_android_surface_swapchain

#ifdef XR_KHR_opengl_enable
#if defined(XR_USE_GRAPHICS_API_OPENGL)
  /*!
   * @brief Return the function pointer for xrGetOpenGLGraphicsRequirementsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetOpenGLGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetOpenGLGraphicsRequirementsKHR() {
    XrResult result =
        populate_("xrGetOpenGLGraphicsRequirementsKHR", pfnGetOpenGLGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetOpenGLGraphicsRequirementsKHR>(
        pfnGetOpenGLGraphicsRequirementsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetOpenGLGraphicsRequirementsKHR (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetOpenGLGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetOpenGLGraphicsRequirementsKHR() const {
    return (reinterpret_cast<PFN_xrGetOpenGLGraphicsRequirementsKHR>(
        pfnGetOpenGLGraphicsRequirementsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_OPENGL)
#endif  // XR_KHR_opengl_enable

#ifdef XR_KHR_opengl_es_enable
#if defined(XR_USE_GRAPHICS_API_OPENGL_ES)
  /*!
   * @brief Return the function pointer for xrGetOpenGLESGraphicsRequirementsKHR, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetOpenGLESGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetOpenGLESGraphicsRequirementsKHR() {
    XrResult result =
        populate_("xrGetOpenGLESGraphicsRequirementsKHR", pfnGetOpenGLESGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetOpenGLESGraphicsRequirementsKHR>(
        pfnGetOpenGLESGraphicsRequirementsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetOpenGLESGraphicsRequirementsKHR (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetOpenGLESGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetOpenGLESGraphicsRequirementsKHR() const {
    return (reinterpret_cast<PFN_xrGetOpenGLESGraphicsRequirementsKHR>(
        pfnGetOpenGLESGraphicsRequirementsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_OPENGL_ES)
#endif  // XR_KHR_opengl_es_enable

#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrGetVulkanInstanceExtensionsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanInstanceExtensionsKHR
  getInstanceProcAddr_xrGetVulkanInstanceExtensionsKHR() {
    XrResult result =
        populate_("xrGetVulkanInstanceExtensionsKHR", pfnGetVulkanInstanceExtensionsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrGetVulkanInstanceExtensionsKHR>(pfnGetVulkanInstanceExtensionsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVulkanInstanceExtensionsKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanInstanceExtensionsKHR
  getInstanceProcAddr_xrGetVulkanInstanceExtensionsKHR() const {
    return (
        reinterpret_cast<PFN_xrGetVulkanInstanceExtensionsKHR>(pfnGetVulkanInstanceExtensionsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable

#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrGetVulkanDeviceExtensionsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanDeviceExtensionsKHR
  getInstanceProcAddr_xrGetVulkanDeviceExtensionsKHR() {
    XrResult result = populate_("xrGetVulkanDeviceExtensionsKHR", pfnGetVulkanDeviceExtensionsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVulkanDeviceExtensionsKHR>(pfnGetVulkanDeviceExtensionsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVulkanDeviceExtensionsKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanDeviceExtensionsKHR
  getInstanceProcAddr_xrGetVulkanDeviceExtensionsKHR() const {
    return (reinterpret_cast<PFN_xrGetVulkanDeviceExtensionsKHR>(pfnGetVulkanDeviceExtensionsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable

#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsDeviceKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsDeviceKHR
  getInstanceProcAddr_xrGetVulkanGraphicsDeviceKHR() {
    XrResult result = populate_("xrGetVulkanGraphicsDeviceKHR", pfnGetVulkanGraphicsDeviceKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDeviceKHR>(pfnGetVulkanGraphicsDeviceKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsDeviceKHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsDeviceKHR
  getInstanceProcAddr_xrGetVulkanGraphicsDeviceKHR() const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDeviceKHR>(pfnGetVulkanGraphicsDeviceKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable

#ifdef XR_KHR_vulkan_enable
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsRequirementsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetVulkanGraphicsRequirementsKHR() {
    XrResult result =
        populate_("xrGetVulkanGraphicsRequirementsKHR", pfnGetVulkanGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirementsKHR>(
        pfnGetVulkanGraphicsRequirementsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsRequirementsKHR (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetVulkanGraphicsRequirementsKHR() const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirementsKHR>(
        pfnGetVulkanGraphicsRequirementsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable

#ifdef XR_KHR_D3D11_enable
#if defined(XR_USE_GRAPHICS_API_D3D11)
  /*!
   * @brief Return the function pointer for xrGetD3D11GraphicsRequirementsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetD3D11GraphicsRequirementsKHR
  getInstanceProcAddr_xrGetD3D11GraphicsRequirementsKHR() {
    XrResult result =
        populate_("xrGetD3D11GraphicsRequirementsKHR", pfnGetD3D11GraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetD3D11GraphicsRequirementsKHR>(
        pfnGetD3D11GraphicsRequirementsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetD3D11GraphicsRequirementsKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetD3D11GraphicsRequirementsKHR
  getInstanceProcAddr_xrGetD3D11GraphicsRequirementsKHR() const {
    return (reinterpret_cast<PFN_xrGetD3D11GraphicsRequirementsKHR>(
        pfnGetD3D11GraphicsRequirementsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_D3D11)
#endif  // XR_KHR_D3D11_enable

#ifdef XR_KHR_D3D12_enable
#if defined(XR_USE_GRAPHICS_API_D3D12)
  /*!
   * @brief Return the function pointer for xrGetD3D12GraphicsRequirementsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetD3D12GraphicsRequirementsKHR
  getInstanceProcAddr_xrGetD3D12GraphicsRequirementsKHR() {
    XrResult result =
        populate_("xrGetD3D12GraphicsRequirementsKHR", pfnGetD3D12GraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetD3D12GraphicsRequirementsKHR>(
        pfnGetD3D12GraphicsRequirementsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetD3D12GraphicsRequirementsKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetD3D12GraphicsRequirementsKHR
  getInstanceProcAddr_xrGetD3D12GraphicsRequirementsKHR() const {
    return (reinterpret_cast<PFN_xrGetD3D12GraphicsRequirementsKHR>(
        pfnGetD3D12GraphicsRequirementsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_D3D12)
#endif  // XR_KHR_D3D12_enable

#ifdef XR_KHR_metal_enable
#if defined(XR_USE_GRAPHICS_API_METAL)
  /*!
   * @brief Return the function pointer for xrGetMetalGraphicsRequirementsKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetMetalGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetMetalGraphicsRequirementsKHR() {
    XrResult result =
        populate_("xrGetMetalGraphicsRequirementsKHR", pfnGetMetalGraphicsRequirementsKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetMetalGraphicsRequirementsKHR>(
        pfnGetMetalGraphicsRequirementsKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetMetalGraphicsRequirementsKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetMetalGraphicsRequirementsKHR
  getInstanceProcAddr_xrGetMetalGraphicsRequirementsKHR() const {
    return (reinterpret_cast<PFN_xrGetMetalGraphicsRequirementsKHR>(
        pfnGetMetalGraphicsRequirementsKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_METAL)
#endif  // XR_KHR_metal_enable

#ifdef XR_KHR_visibility_mask
  /*!
   * @brief Return the function pointer for xrGetVisibilityMaskKHR, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVisibilityMaskKHR getInstanceProcAddr_xrGetVisibilityMaskKHR() {
    XrResult result = populate_("xrGetVisibilityMaskKHR", pfnGetVisibilityMaskKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVisibilityMaskKHR>(pfnGetVisibilityMaskKHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVisibilityMaskKHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVisibilityMaskKHR getInstanceProcAddr_xrGetVisibilityMaskKHR() const {
    return (reinterpret_cast<PFN_xrGetVisibilityMaskKHR>(pfnGetVisibilityMaskKHR));
  }
#endif  // XR_KHR_visibility_mask

#ifdef XR_KHR_win32_convert_performance_counter_time
#if defined(XR_USE_PLATFORM_WIN32)
  /*!
   * @brief Return the function pointer for xrConvertWin32PerformanceCounterToTimeKHR, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrConvertWin32PerformanceCounterToTimeKHR
  getInstanceProcAddr_xrConvertWin32PerformanceCounterToTimeKHR() {
    XrResult result = populate_("xrConvertWin32PerformanceCounterToTimeKHR",
                                pfnConvertWin32PerformanceCounterToTimeKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrConvertWin32PerformanceCounterToTimeKHR>(
        pfnConvertWin32PerformanceCounterToTimeKHR));
  }
  /*!
   * @brief Return the function pointer for xrConvertWin32PerformanceCounterToTimeKHR (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrConvertWin32PerformanceCounterToTimeKHR
  getInstanceProcAddr_xrConvertWin32PerformanceCounterToTimeKHR() const {
    return (reinterpret_cast<PFN_xrConvertWin32PerformanceCounterToTimeKHR>(
        pfnConvertWin32PerformanceCounterToTimeKHR));
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_KHR_win32_convert_performance_counter_time

#ifdef XR_KHR_win32_convert_performance_counter_time
#if defined(XR_USE_PLATFORM_WIN32)
  /*!
   * @brief Return the function pointer for xrConvertTimeToWin32PerformanceCounterKHR, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrConvertTimeToWin32PerformanceCounterKHR
  getInstanceProcAddr_xrConvertTimeToWin32PerformanceCounterKHR() {
    XrResult result = populate_("xrConvertTimeToWin32PerformanceCounterKHR",
                                pfnConvertTimeToWin32PerformanceCounterKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrConvertTimeToWin32PerformanceCounterKHR>(
        pfnConvertTimeToWin32PerformanceCounterKHR));
  }
  /*!
   * @brief Return the function pointer for xrConvertTimeToWin32PerformanceCounterKHR (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrConvertTimeToWin32PerformanceCounterKHR
  getInstanceProcAddr_xrConvertTimeToWin32PerformanceCounterKHR() const {
    return (reinterpret_cast<PFN_xrConvertTimeToWin32PerformanceCounterKHR>(
        pfnConvertTimeToWin32PerformanceCounterKHR));
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_KHR_win32_convert_performance_counter_time

#ifdef XR_KHR_convert_timespec_time
#if defined(XR_USE_TIMESPEC)
  /*!
   * @brief Return the function pointer for xrConvertTimespecTimeToTimeKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrConvertTimespecTimeToTimeKHR
  getInstanceProcAddr_xrConvertTimespecTimeToTimeKHR() {
    XrResult result = populate_("xrConvertTimespecTimeToTimeKHR", pfnConvertTimespecTimeToTimeKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrConvertTimespecTimeToTimeKHR>(pfnConvertTimespecTimeToTimeKHR));
  }
  /*!
   * @brief Return the function pointer for xrConvertTimespecTimeToTimeKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrConvertTimespecTimeToTimeKHR
  getInstanceProcAddr_xrConvertTimespecTimeToTimeKHR() const {
    return (reinterpret_cast<PFN_xrConvertTimespecTimeToTimeKHR>(pfnConvertTimespecTimeToTimeKHR));
  }
#endif  // defined(XR_USE_TIMESPEC)
#endif  // XR_KHR_convert_timespec_time

#ifdef XR_KHR_convert_timespec_time
#if defined(XR_USE_TIMESPEC)
  /*!
   * @brief Return the function pointer for xrConvertTimeToTimespecTimeKHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrConvertTimeToTimespecTimeKHR
  getInstanceProcAddr_xrConvertTimeToTimespecTimeKHR() {
    XrResult result = populate_("xrConvertTimeToTimespecTimeKHR", pfnConvertTimeToTimespecTimeKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrConvertTimeToTimespecTimeKHR>(pfnConvertTimeToTimespecTimeKHR));
  }
  /*!
   * @brief Return the function pointer for xrConvertTimeToTimespecTimeKHR (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrConvertTimeToTimespecTimeKHR
  getInstanceProcAddr_xrConvertTimeToTimespecTimeKHR() const {
    return (reinterpret_cast<PFN_xrConvertTimeToTimespecTimeKHR>(pfnConvertTimeToTimespecTimeKHR));
  }
#endif  // defined(XR_USE_TIMESPEC)
#endif  // XR_KHR_convert_timespec_time

#ifdef XR_KHR_loader_init
  /*!
   * @brief Return the function pointer for xrInitializeLoaderKHR, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrInitializeLoaderKHR getInstanceProcAddr_xrInitializeLoaderKHR() {
    XrResult result = populate_("xrInitializeLoaderKHR", pfnInitializeLoaderKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrInitializeLoaderKHR>(pfnInitializeLoaderKHR));
  }
  /*!
   * @brief Return the function pointer for xrInitializeLoaderKHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrInitializeLoaderKHR getInstanceProcAddr_xrInitializeLoaderKHR() const {
    return (reinterpret_cast<PFN_xrInitializeLoaderKHR>(pfnInitializeLoaderKHR));
  }
#endif  // XR_KHR_loader_init

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrCreateVulkanInstanceKHR, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateVulkanInstanceKHR getInstanceProcAddr_xrCreateVulkanInstanceKHR() {
    XrResult result = populate_("xrCreateVulkanInstanceKHR", pfnCreateVulkanInstanceKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateVulkanInstanceKHR>(pfnCreateVulkanInstanceKHR));
  }
  /*!
   * @brief Return the function pointer for xrCreateVulkanInstanceKHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateVulkanInstanceKHR
  getInstanceProcAddr_xrCreateVulkanInstanceKHR() const {
    return (reinterpret_cast<PFN_xrCreateVulkanInstanceKHR>(pfnCreateVulkanInstanceKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrCreateVulkanDeviceKHR, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateVulkanDeviceKHR getInstanceProcAddr_xrCreateVulkanDeviceKHR() {
    XrResult result = populate_("xrCreateVulkanDeviceKHR", pfnCreateVulkanDeviceKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateVulkanDeviceKHR>(pfnCreateVulkanDeviceKHR));
  }
  /*!
   * @brief Return the function pointer for xrCreateVulkanDeviceKHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateVulkanDeviceKHR
  getInstanceProcAddr_xrCreateVulkanDeviceKHR() const {
    return (reinterpret_cast<PFN_xrCreateVulkanDeviceKHR>(pfnCreateVulkanDeviceKHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsDevice2KHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsDevice2KHR
  getInstanceProcAddr_xrGetVulkanGraphicsDevice2KHR() {
    XrResult result = populate_("xrGetVulkanGraphicsDevice2KHR", pfnGetVulkanGraphicsDevice2KHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDevice2KHR>(pfnGetVulkanGraphicsDevice2KHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsDevice2KHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsDevice2KHR
  getInstanceProcAddr_xrGetVulkanGraphicsDevice2KHR() const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsDevice2KHR>(pfnGetVulkanGraphicsDevice2KHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_KHR_vulkan_enable2
#if defined(XR_USE_GRAPHICS_API_VULKAN)
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsRequirements2KHR, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsRequirements2KHR
  getInstanceProcAddr_xrGetVulkanGraphicsRequirements2KHR() {
    XrResult result =
        populate_("xrGetVulkanGraphicsRequirements2KHR", pfnGetVulkanGraphicsRequirements2KHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirements2KHR>(
        pfnGetVulkanGraphicsRequirements2KHR));
  }
  /*!
   * @brief Return the function pointer for xrGetVulkanGraphicsRequirements2KHR (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVulkanGraphicsRequirements2KHR
  getInstanceProcAddr_xrGetVulkanGraphicsRequirements2KHR() const {
    return (reinterpret_cast<PFN_xrGetVulkanGraphicsRequirements2KHR>(
        pfnGetVulkanGraphicsRequirements2KHR));
  }
#endif  // defined(XR_USE_GRAPHICS_API_VULKAN)
#endif  // XR_KHR_vulkan_enable2

#ifdef XR_KHR_extended_struct_name_lengths
  /*!
   * @brief Return the function pointer for xrStructureTypeToString2KHR, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrStructureTypeToString2KHR
  getInstanceProcAddr_xrStructureTypeToString2KHR() {
    XrResult result = populate_("xrStructureTypeToString2KHR", pfnStructureTypeToString2KHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStructureTypeToString2KHR>(pfnStructureTypeToString2KHR));
  }
  /*!
   * @brief Return the function pointer for xrStructureTypeToString2KHR (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStructureTypeToString2KHR
  getInstanceProcAddr_xrStructureTypeToString2KHR() const {
    return (reinterpret_cast<PFN_xrStructureTypeToString2KHR>(pfnStructureTypeToString2KHR));
  }
#endif  // XR_KHR_extended_struct_name_lengths

#ifdef XR_KHR_locate_spaces
  /*!
   * @brief Return the function pointer for xrLocateSpacesKHR, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateSpacesKHR getInstanceProcAddr_xrLocateSpacesKHR() {
    XrResult result = populate_("xrLocateSpacesKHR", pfnLocateSpacesKHR);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateSpacesKHR>(pfnLocateSpacesKHR));
  }
  /*!
   * @brief Return the function pointer for xrLocateSpacesKHR (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateSpacesKHR getInstanceProcAddr_xrLocateSpacesKHR() const {
    return (reinterpret_cast<PFN_xrLocateSpacesKHR>(pfnLocateSpacesKHR));
  }
#endif  // XR_KHR_locate_spaces

#ifdef XR_EXT_performance_settings
  /*!
   * @brief Return the function pointer for xrPerfSettingsSetPerformanceLevelEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPerfSettingsSetPerformanceLevelEXT
  getInstanceProcAddr_xrPerfSettingsSetPerformanceLevelEXT() {
    XrResult result =
        populate_("xrPerfSettingsSetPerformanceLevelEXT", pfnPerfSettingsSetPerformanceLevelEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPerfSettingsSetPerformanceLevelEXT>(
        pfnPerfSettingsSetPerformanceLevelEXT));
  }
  /*!
   * @brief Return the function pointer for xrPerfSettingsSetPerformanceLevelEXT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPerfSettingsSetPerformanceLevelEXT
  getInstanceProcAddr_xrPerfSettingsSetPerformanceLevelEXT() const {
    return (reinterpret_cast<PFN_xrPerfSettingsSetPerformanceLevelEXT>(
        pfnPerfSettingsSetPerformanceLevelEXT));
  }
#endif  // XR_EXT_performance_settings

#ifdef XR_EXT_thermal_query
  /*!
   * @brief Return the function pointer for xrThermalGetTemperatureTrendEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrThermalGetTemperatureTrendEXT
  getInstanceProcAddr_xrThermalGetTemperatureTrendEXT() {
    XrResult result =
        populate_("xrThermalGetTemperatureTrendEXT", pfnThermalGetTemperatureTrendEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrThermalGetTemperatureTrendEXT>(pfnThermalGetTemperatureTrendEXT));
  }
  /*!
   * @brief Return the function pointer for xrThermalGetTemperatureTrendEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrThermalGetTemperatureTrendEXT
  getInstanceProcAddr_xrThermalGetTemperatureTrendEXT() const {
    return (
        reinterpret_cast<PFN_xrThermalGetTemperatureTrendEXT>(pfnThermalGetTemperatureTrendEXT));
  }
#endif  // XR_EXT_thermal_query

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrSetDebugUtilsObjectNameEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetDebugUtilsObjectNameEXT
  getInstanceProcAddr_xrSetDebugUtilsObjectNameEXT() {
    XrResult result = populate_("xrSetDebugUtilsObjectNameEXT", pfnSetDebugUtilsObjectNameEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetDebugUtilsObjectNameEXT>(pfnSetDebugUtilsObjectNameEXT));
  }
  /*!
   * @brief Return the function pointer for xrSetDebugUtilsObjectNameEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetDebugUtilsObjectNameEXT
  getInstanceProcAddr_xrSetDebugUtilsObjectNameEXT() const {
    return (reinterpret_cast<PFN_xrSetDebugUtilsObjectNameEXT>(pfnSetDebugUtilsObjectNameEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrCreateDebugUtilsMessengerEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateDebugUtilsMessengerEXT
  getInstanceProcAddr_xrCreateDebugUtilsMessengerEXT() {
    XrResult result = populate_("xrCreateDebugUtilsMessengerEXT", pfnCreateDebugUtilsMessengerEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateDebugUtilsMessengerEXT>(pfnCreateDebugUtilsMessengerEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateDebugUtilsMessengerEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateDebugUtilsMessengerEXT
  getInstanceProcAddr_xrCreateDebugUtilsMessengerEXT() const {
    return (reinterpret_cast<PFN_xrCreateDebugUtilsMessengerEXT>(pfnCreateDebugUtilsMessengerEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrDestroyDebugUtilsMessengerEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyDebugUtilsMessengerEXT
  getInstanceProcAddr_xrDestroyDebugUtilsMessengerEXT() {
    XrResult result =
        populate_("xrDestroyDebugUtilsMessengerEXT", pfnDestroyDebugUtilsMessengerEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrDestroyDebugUtilsMessengerEXT>(pfnDestroyDebugUtilsMessengerEXT));
  }
  /*!
   * @brief Return the function pointer for xrDestroyDebugUtilsMessengerEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyDebugUtilsMessengerEXT
  getInstanceProcAddr_xrDestroyDebugUtilsMessengerEXT() const {
    return (
        reinterpret_cast<PFN_xrDestroyDebugUtilsMessengerEXT>(pfnDestroyDebugUtilsMessengerEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrSubmitDebugUtilsMessageEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSubmitDebugUtilsMessageEXT
  getInstanceProcAddr_xrSubmitDebugUtilsMessageEXT() {
    XrResult result = populate_("xrSubmitDebugUtilsMessageEXT", pfnSubmitDebugUtilsMessageEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSubmitDebugUtilsMessageEXT>(pfnSubmitDebugUtilsMessageEXT));
  }
  /*!
   * @brief Return the function pointer for xrSubmitDebugUtilsMessageEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSubmitDebugUtilsMessageEXT
  getInstanceProcAddr_xrSubmitDebugUtilsMessageEXT() const {
    return (reinterpret_cast<PFN_xrSubmitDebugUtilsMessageEXT>(pfnSubmitDebugUtilsMessageEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrSessionBeginDebugUtilsLabelRegionEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSessionBeginDebugUtilsLabelRegionEXT
  getInstanceProcAddr_xrSessionBeginDebugUtilsLabelRegionEXT() {
    XrResult result = populate_("xrSessionBeginDebugUtilsLabelRegionEXT",
                                pfnSessionBeginDebugUtilsLabelRegionEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSessionBeginDebugUtilsLabelRegionEXT>(
        pfnSessionBeginDebugUtilsLabelRegionEXT));
  }
  /*!
   * @brief Return the function pointer for xrSessionBeginDebugUtilsLabelRegionEXT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSessionBeginDebugUtilsLabelRegionEXT
  getInstanceProcAddr_xrSessionBeginDebugUtilsLabelRegionEXT() const {
    return (reinterpret_cast<PFN_xrSessionBeginDebugUtilsLabelRegionEXT>(
        pfnSessionBeginDebugUtilsLabelRegionEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrSessionEndDebugUtilsLabelRegionEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSessionEndDebugUtilsLabelRegionEXT
  getInstanceProcAddr_xrSessionEndDebugUtilsLabelRegionEXT() {
    XrResult result =
        populate_("xrSessionEndDebugUtilsLabelRegionEXT", pfnSessionEndDebugUtilsLabelRegionEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSessionEndDebugUtilsLabelRegionEXT>(
        pfnSessionEndDebugUtilsLabelRegionEXT));
  }
  /*!
   * @brief Return the function pointer for xrSessionEndDebugUtilsLabelRegionEXT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSessionEndDebugUtilsLabelRegionEXT
  getInstanceProcAddr_xrSessionEndDebugUtilsLabelRegionEXT() const {
    return (reinterpret_cast<PFN_xrSessionEndDebugUtilsLabelRegionEXT>(
        pfnSessionEndDebugUtilsLabelRegionEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_EXT_debug_utils
  /*!
   * @brief Return the function pointer for xrSessionInsertDebugUtilsLabelEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSessionInsertDebugUtilsLabelEXT
  getInstanceProcAddr_xrSessionInsertDebugUtilsLabelEXT() {
    XrResult result =
        populate_("xrSessionInsertDebugUtilsLabelEXT", pfnSessionInsertDebugUtilsLabelEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSessionInsertDebugUtilsLabelEXT>(
        pfnSessionInsertDebugUtilsLabelEXT));
  }
  /*!
   * @brief Return the function pointer for xrSessionInsertDebugUtilsLabelEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSessionInsertDebugUtilsLabelEXT
  getInstanceProcAddr_xrSessionInsertDebugUtilsLabelEXT() const {
    return (reinterpret_cast<PFN_xrSessionInsertDebugUtilsLabelEXT>(
        pfnSessionInsertDebugUtilsLabelEXT));
  }
#endif  // XR_EXT_debug_utils

#ifdef XR_MSFT_spatial_anchor
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorMSFT getInstanceProcAddr_xrCreateSpatialAnchorMSFT() {
    XrResult result = populate_("xrCreateSpatialAnchorMSFT", pfnCreateSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorMSFT>(pfnCreateSpatialAnchorMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorMSFT>(pfnCreateSpatialAnchorMSFT));
  }
#endif  // XR_MSFT_spatial_anchor

#ifdef XR_MSFT_spatial_anchor
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorSpaceMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorSpaceMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorSpaceMSFT() {
    XrResult result = populate_("xrCreateSpatialAnchorSpaceMSFT", pfnCreateSpatialAnchorSpaceMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorSpaceMSFT>(pfnCreateSpatialAnchorSpaceMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorSpaceMSFT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorSpaceMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorSpaceMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorSpaceMSFT>(pfnCreateSpatialAnchorSpaceMSFT));
  }
#endif  // XR_MSFT_spatial_anchor

#ifdef XR_MSFT_spatial_anchor
  /*!
   * @brief Return the function pointer for xrDestroySpatialAnchorMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialAnchorMSFT
  getInstanceProcAddr_xrDestroySpatialAnchorMSFT() {
    XrResult result = populate_("xrDestroySpatialAnchorMSFT", pfnDestroySpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialAnchorMSFT>(pfnDestroySpatialAnchorMSFT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpatialAnchorMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialAnchorMSFT
  getInstanceProcAddr_xrDestroySpatialAnchorMSFT() const {
    return (reinterpret_cast<PFN_xrDestroySpatialAnchorMSFT>(pfnDestroySpatialAnchorMSFT));
  }
#endif  // XR_MSFT_spatial_anchor

#ifdef XR_EXT_conformance_automation
  /*!
   * @brief Return the function pointer for xrSetInputDeviceActiveEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceActiveEXT getInstanceProcAddr_xrSetInputDeviceActiveEXT() {
    XrResult result = populate_("xrSetInputDeviceActiveEXT", pfnSetInputDeviceActiveEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceActiveEXT>(pfnSetInputDeviceActiveEXT));
  }
  /*!
   * @brief Return the function pointer for xrSetInputDeviceActiveEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceActiveEXT
  getInstanceProcAddr_xrSetInputDeviceActiveEXT() const {
    return (reinterpret_cast<PFN_xrSetInputDeviceActiveEXT>(pfnSetInputDeviceActiveEXT));
  }
#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_conformance_automation
  /*!
   * @brief Return the function pointer for xrSetInputDeviceStateBoolEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceStateBoolEXT
  getInstanceProcAddr_xrSetInputDeviceStateBoolEXT() {
    XrResult result = populate_("xrSetInputDeviceStateBoolEXT", pfnSetInputDeviceStateBoolEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceStateBoolEXT>(pfnSetInputDeviceStateBoolEXT));
  }
  /*!
   * @brief Return the function pointer for xrSetInputDeviceStateBoolEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceStateBoolEXT
  getInstanceProcAddr_xrSetInputDeviceStateBoolEXT() const {
    return (reinterpret_cast<PFN_xrSetInputDeviceStateBoolEXT>(pfnSetInputDeviceStateBoolEXT));
  }
#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_conformance_automation
  /*!
   * @brief Return the function pointer for xrSetInputDeviceStateFloatEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceStateFloatEXT
  getInstanceProcAddr_xrSetInputDeviceStateFloatEXT() {
    XrResult result = populate_("xrSetInputDeviceStateFloatEXT", pfnSetInputDeviceStateFloatEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceStateFloatEXT>(pfnSetInputDeviceStateFloatEXT));
  }
  /*!
   * @brief Return the function pointer for xrSetInputDeviceStateFloatEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceStateFloatEXT
  getInstanceProcAddr_xrSetInputDeviceStateFloatEXT() const {
    return (reinterpret_cast<PFN_xrSetInputDeviceStateFloatEXT>(pfnSetInputDeviceStateFloatEXT));
  }
#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_conformance_automation
  /*!
   * @brief Return the function pointer for xrSetInputDeviceStateVector2fEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceStateVector2fEXT
  getInstanceProcAddr_xrSetInputDeviceStateVector2fEXT() {
    XrResult result =
        populate_("xrSetInputDeviceStateVector2fEXT", pfnSetInputDeviceStateVector2fEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrSetInputDeviceStateVector2fEXT>(pfnSetInputDeviceStateVector2fEXT));
  }
  /*!
   * @brief Return the function pointer for xrSetInputDeviceStateVector2fEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceStateVector2fEXT
  getInstanceProcAddr_xrSetInputDeviceStateVector2fEXT() const {
    return (
        reinterpret_cast<PFN_xrSetInputDeviceStateVector2fEXT>(pfnSetInputDeviceStateVector2fEXT));
  }
#endif  // XR_EXT_conformance_automation

#ifdef XR_EXT_conformance_automation
  /*!
   * @brief Return the function pointer for xrSetInputDeviceLocationEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceLocationEXT
  getInstanceProcAddr_xrSetInputDeviceLocationEXT() {
    XrResult result = populate_("xrSetInputDeviceLocationEXT", pfnSetInputDeviceLocationEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetInputDeviceLocationEXT>(pfnSetInputDeviceLocationEXT));
  }
  /*!
   * @brief Return the function pointer for xrSetInputDeviceLocationEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetInputDeviceLocationEXT
  getInstanceProcAddr_xrSetInputDeviceLocationEXT() const {
    return (reinterpret_cast<PFN_xrSetInputDeviceLocationEXT>(pfnSetInputDeviceLocationEXT));
  }
#endif  // XR_EXT_conformance_automation

#ifdef XR_MSFT_spatial_graph_bridge
  /*!
   * @brief Return the function pointer for xrCreateSpatialGraphNodeSpaceMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialGraphNodeSpaceMSFT
  getInstanceProcAddr_xrCreateSpatialGraphNodeSpaceMSFT() {
    XrResult result =
        populate_("xrCreateSpatialGraphNodeSpaceMSFT", pfnCreateSpatialGraphNodeSpaceMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialGraphNodeSpaceMSFT>(
        pfnCreateSpatialGraphNodeSpaceMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialGraphNodeSpaceMSFT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialGraphNodeSpaceMSFT
  getInstanceProcAddr_xrCreateSpatialGraphNodeSpaceMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialGraphNodeSpaceMSFT>(
        pfnCreateSpatialGraphNodeSpaceMSFT));
  }
#endif  // XR_MSFT_spatial_graph_bridge

#ifdef XR_MSFT_spatial_graph_bridge
  /*!
   * @brief Return the function pointer for xrTryCreateSpatialGraphStaticNodeBindingMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrTryCreateSpatialGraphStaticNodeBindingMSFT
  getInstanceProcAddr_xrTryCreateSpatialGraphStaticNodeBindingMSFT() {
    XrResult result = populate_("xrTryCreateSpatialGraphStaticNodeBindingMSFT",
                                pfnTryCreateSpatialGraphStaticNodeBindingMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTryCreateSpatialGraphStaticNodeBindingMSFT>(
        pfnTryCreateSpatialGraphStaticNodeBindingMSFT));
  }
  /*!
   * @brief Return the function pointer for xrTryCreateSpatialGraphStaticNodeBindingMSFT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTryCreateSpatialGraphStaticNodeBindingMSFT
  getInstanceProcAddr_xrTryCreateSpatialGraphStaticNodeBindingMSFT() const {
    return (reinterpret_cast<PFN_xrTryCreateSpatialGraphStaticNodeBindingMSFT>(
        pfnTryCreateSpatialGraphStaticNodeBindingMSFT));
  }
#endif  // XR_MSFT_spatial_graph_bridge

#ifdef XR_MSFT_spatial_graph_bridge
  /*!
   * @brief Return the function pointer for xrDestroySpatialGraphNodeBindingMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialGraphNodeBindingMSFT
  getInstanceProcAddr_xrDestroySpatialGraphNodeBindingMSFT() {
    XrResult result =
        populate_("xrDestroySpatialGraphNodeBindingMSFT", pfnDestroySpatialGraphNodeBindingMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialGraphNodeBindingMSFT>(
        pfnDestroySpatialGraphNodeBindingMSFT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpatialGraphNodeBindingMSFT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialGraphNodeBindingMSFT
  getInstanceProcAddr_xrDestroySpatialGraphNodeBindingMSFT() const {
    return (reinterpret_cast<PFN_xrDestroySpatialGraphNodeBindingMSFT>(
        pfnDestroySpatialGraphNodeBindingMSFT));
  }
#endif  // XR_MSFT_spatial_graph_bridge

#ifdef XR_MSFT_spatial_graph_bridge
  /*!
   * @brief Return the function pointer for xrGetSpatialGraphNodeBindingPropertiesMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialGraphNodeBindingPropertiesMSFT
  getInstanceProcAddr_xrGetSpatialGraphNodeBindingPropertiesMSFT() {
    XrResult result = populate_("xrGetSpatialGraphNodeBindingPropertiesMSFT",
                                pfnGetSpatialGraphNodeBindingPropertiesMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpatialGraphNodeBindingPropertiesMSFT>(
        pfnGetSpatialGraphNodeBindingPropertiesMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetSpatialGraphNodeBindingPropertiesMSFT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialGraphNodeBindingPropertiesMSFT
  getInstanceProcAddr_xrGetSpatialGraphNodeBindingPropertiesMSFT() const {
    return (reinterpret_cast<PFN_xrGetSpatialGraphNodeBindingPropertiesMSFT>(
        pfnGetSpatialGraphNodeBindingPropertiesMSFT));
  }
#endif  // XR_MSFT_spatial_graph_bridge

#ifdef XR_EXT_hand_tracking
  /*!
   * @brief Return the function pointer for xrCreateHandTrackerEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateHandTrackerEXT getInstanceProcAddr_xrCreateHandTrackerEXT() {
    XrResult result = populate_("xrCreateHandTrackerEXT", pfnCreateHandTrackerEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateHandTrackerEXT>(pfnCreateHandTrackerEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateHandTrackerEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateHandTrackerEXT getInstanceProcAddr_xrCreateHandTrackerEXT() const {
    return (reinterpret_cast<PFN_xrCreateHandTrackerEXT>(pfnCreateHandTrackerEXT));
  }
#endif  // XR_EXT_hand_tracking

#ifdef XR_EXT_hand_tracking
  /*!
   * @brief Return the function pointer for xrDestroyHandTrackerEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyHandTrackerEXT getInstanceProcAddr_xrDestroyHandTrackerEXT() {
    XrResult result = populate_("xrDestroyHandTrackerEXT", pfnDestroyHandTrackerEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyHandTrackerEXT>(pfnDestroyHandTrackerEXT));
  }
  /*!
   * @brief Return the function pointer for xrDestroyHandTrackerEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyHandTrackerEXT
  getInstanceProcAddr_xrDestroyHandTrackerEXT() const {
    return (reinterpret_cast<PFN_xrDestroyHandTrackerEXT>(pfnDestroyHandTrackerEXT));
  }
#endif  // XR_EXT_hand_tracking

#ifdef XR_EXT_hand_tracking
  /*!
   * @brief Return the function pointer for xrLocateHandJointsEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateHandJointsEXT getInstanceProcAddr_xrLocateHandJointsEXT() {
    XrResult result = populate_("xrLocateHandJointsEXT", pfnLocateHandJointsEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateHandJointsEXT>(pfnLocateHandJointsEXT));
  }
  /*!
   * @brief Return the function pointer for xrLocateHandJointsEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateHandJointsEXT getInstanceProcAddr_xrLocateHandJointsEXT() const {
    return (reinterpret_cast<PFN_xrLocateHandJointsEXT>(pfnLocateHandJointsEXT));
  }
#endif  // XR_EXT_hand_tracking

#ifdef XR_MSFT_hand_tracking_mesh
  /*!
   * @brief Return the function pointer for xrCreateHandMeshSpaceMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateHandMeshSpaceMSFT getInstanceProcAddr_xrCreateHandMeshSpaceMSFT() {
    XrResult result = populate_("xrCreateHandMeshSpaceMSFT", pfnCreateHandMeshSpaceMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateHandMeshSpaceMSFT>(pfnCreateHandMeshSpaceMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateHandMeshSpaceMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateHandMeshSpaceMSFT
  getInstanceProcAddr_xrCreateHandMeshSpaceMSFT() const {
    return (reinterpret_cast<PFN_xrCreateHandMeshSpaceMSFT>(pfnCreateHandMeshSpaceMSFT));
  }
#endif  // XR_MSFT_hand_tracking_mesh

#ifdef XR_MSFT_hand_tracking_mesh
  /*!
   * @brief Return the function pointer for xrUpdateHandMeshMSFT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrUpdateHandMeshMSFT getInstanceProcAddr_xrUpdateHandMeshMSFT() {
    XrResult result = populate_("xrUpdateHandMeshMSFT", pfnUpdateHandMeshMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrUpdateHandMeshMSFT>(pfnUpdateHandMeshMSFT));
  }
  /*!
   * @brief Return the function pointer for xrUpdateHandMeshMSFT (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUpdateHandMeshMSFT getInstanceProcAddr_xrUpdateHandMeshMSFT() const {
    return (reinterpret_cast<PFN_xrUpdateHandMeshMSFT>(pfnUpdateHandMeshMSFT));
  }
#endif  // XR_MSFT_hand_tracking_mesh

#ifdef XR_MSFT_controller_model
  /*!
   * @brief Return the function pointer for xrGetControllerModelKeyMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetControllerModelKeyMSFT
  getInstanceProcAddr_xrGetControllerModelKeyMSFT() {
    XrResult result = populate_("xrGetControllerModelKeyMSFT", pfnGetControllerModelKeyMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetControllerModelKeyMSFT>(pfnGetControllerModelKeyMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetControllerModelKeyMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetControllerModelKeyMSFT
  getInstanceProcAddr_xrGetControllerModelKeyMSFT() const {
    return (reinterpret_cast<PFN_xrGetControllerModelKeyMSFT>(pfnGetControllerModelKeyMSFT));
  }
#endif  // XR_MSFT_controller_model

#ifdef XR_MSFT_controller_model
  /*!
   * @brief Return the function pointer for xrLoadControllerModelMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrLoadControllerModelMSFT getInstanceProcAddr_xrLoadControllerModelMSFT() {
    XrResult result = populate_("xrLoadControllerModelMSFT", pfnLoadControllerModelMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLoadControllerModelMSFT>(pfnLoadControllerModelMSFT));
  }
  /*!
   * @brief Return the function pointer for xrLoadControllerModelMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLoadControllerModelMSFT
  getInstanceProcAddr_xrLoadControllerModelMSFT() const {
    return (reinterpret_cast<PFN_xrLoadControllerModelMSFT>(pfnLoadControllerModelMSFT));
  }
#endif  // XR_MSFT_controller_model

#ifdef XR_MSFT_controller_model
  /*!
   * @brief Return the function pointer for xrGetControllerModelPropertiesMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetControllerModelPropertiesMSFT
  getInstanceProcAddr_xrGetControllerModelPropertiesMSFT() {
    XrResult result =
        populate_("xrGetControllerModelPropertiesMSFT", pfnGetControllerModelPropertiesMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetControllerModelPropertiesMSFT>(
        pfnGetControllerModelPropertiesMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetControllerModelPropertiesMSFT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetControllerModelPropertiesMSFT
  getInstanceProcAddr_xrGetControllerModelPropertiesMSFT() const {
    return (reinterpret_cast<PFN_xrGetControllerModelPropertiesMSFT>(
        pfnGetControllerModelPropertiesMSFT));
  }
#endif  // XR_MSFT_controller_model

#ifdef XR_MSFT_controller_model
  /*!
   * @brief Return the function pointer for xrGetControllerModelStateMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetControllerModelStateMSFT
  getInstanceProcAddr_xrGetControllerModelStateMSFT() {
    XrResult result = populate_("xrGetControllerModelStateMSFT", pfnGetControllerModelStateMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetControllerModelStateMSFT>(pfnGetControllerModelStateMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetControllerModelStateMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetControllerModelStateMSFT
  getInstanceProcAddr_xrGetControllerModelStateMSFT() const {
    return (reinterpret_cast<PFN_xrGetControllerModelStateMSFT>(pfnGetControllerModelStateMSFT));
  }
#endif  // XR_MSFT_controller_model

#ifdef XR_MSFT_perception_anchor_interop
#if defined(XR_USE_PLATFORM_WIN32)
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorFromPerceptionAnchorMSFT,
   * populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorFromPerceptionAnchorMSFT() {
    XrResult result = populate_("xrCreateSpatialAnchorFromPerceptionAnchorMSFT",
                                pfnCreateSpatialAnchorFromPerceptionAnchorMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT>(
        pfnCreateSpatialAnchorFromPerceptionAnchorMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorFromPerceptionAnchorMSFT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorFromPerceptionAnchorMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT>(
        pfnCreateSpatialAnchorFromPerceptionAnchorMSFT));
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_MSFT_perception_anchor_interop

#ifdef XR_MSFT_perception_anchor_interop
#if defined(XR_USE_PLATFORM_WIN32)
  /*!
   * @brief Return the function pointer for xrTryGetPerceptionAnchorFromSpatialAnchorMSFT,
   * populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT
  getInstanceProcAddr_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT() {
    XrResult result = populate_("xrTryGetPerceptionAnchorFromSpatialAnchorMSFT",
                                pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT>(
        pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT));
  }
  /*!
   * @brief Return the function pointer for xrTryGetPerceptionAnchorFromSpatialAnchorMSFT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT
  getInstanceProcAddr_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT() const {
    return (reinterpret_cast<PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT>(
        pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT));
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_MSFT_perception_anchor_interop

#ifdef XR_MSFT_composition_layer_reprojection
  /*!
   * @brief Return the function pointer for xrEnumerateReprojectionModesMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateReprojectionModesMSFT
  getInstanceProcAddr_xrEnumerateReprojectionModesMSFT() {
    XrResult result =
        populate_("xrEnumerateReprojectionModesMSFT", pfnEnumerateReprojectionModesMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateReprojectionModesMSFT>(pfnEnumerateReprojectionModesMSFT));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateReprojectionModesMSFT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateReprojectionModesMSFT
  getInstanceProcAddr_xrEnumerateReprojectionModesMSFT() const {
    return (
        reinterpret_cast<PFN_xrEnumerateReprojectionModesMSFT>(pfnEnumerateReprojectionModesMSFT));
  }
#endif  // XR_MSFT_composition_layer_reprojection

#ifdef XR_FB_swapchain_update_state
  /*!
   * @brief Return the function pointer for xrUpdateSwapchainFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrUpdateSwapchainFB getInstanceProcAddr_xrUpdateSwapchainFB() {
    XrResult result = populate_("xrUpdateSwapchainFB", pfnUpdateSwapchainFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrUpdateSwapchainFB>(pfnUpdateSwapchainFB));
  }
  /*!
   * @brief Return the function pointer for xrUpdateSwapchainFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUpdateSwapchainFB getInstanceProcAddr_xrUpdateSwapchainFB() const {
    return (reinterpret_cast<PFN_xrUpdateSwapchainFB>(pfnUpdateSwapchainFB));
  }
#endif  // XR_FB_swapchain_update_state

#ifdef XR_FB_swapchain_update_state
  /*!
   * @brief Return the function pointer for xrGetSwapchainStateFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSwapchainStateFB getInstanceProcAddr_xrGetSwapchainStateFB() {
    XrResult result = populate_("xrGetSwapchainStateFB", pfnGetSwapchainStateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSwapchainStateFB>(pfnGetSwapchainStateFB));
  }
  /*!
   * @brief Return the function pointer for xrGetSwapchainStateFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSwapchainStateFB getInstanceProcAddr_xrGetSwapchainStateFB() const {
    return (reinterpret_cast<PFN_xrGetSwapchainStateFB>(pfnGetSwapchainStateFB));
  }
#endif  // XR_FB_swapchain_update_state

#ifdef XR_FB_body_tracking
  /*!
   * @brief Return the function pointer for xrCreateBodyTrackerFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateBodyTrackerFB getInstanceProcAddr_xrCreateBodyTrackerFB() {
    XrResult result = populate_("xrCreateBodyTrackerFB", pfnCreateBodyTrackerFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateBodyTrackerFB>(pfnCreateBodyTrackerFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateBodyTrackerFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateBodyTrackerFB getInstanceProcAddr_xrCreateBodyTrackerFB() const {
    return (reinterpret_cast<PFN_xrCreateBodyTrackerFB>(pfnCreateBodyTrackerFB));
  }
#endif  // XR_FB_body_tracking

#ifdef XR_FB_body_tracking
  /*!
   * @brief Return the function pointer for xrDestroyBodyTrackerFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyBodyTrackerFB getInstanceProcAddr_xrDestroyBodyTrackerFB() {
    XrResult result = populate_("xrDestroyBodyTrackerFB", pfnDestroyBodyTrackerFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyBodyTrackerFB>(pfnDestroyBodyTrackerFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyBodyTrackerFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyBodyTrackerFB getInstanceProcAddr_xrDestroyBodyTrackerFB() const {
    return (reinterpret_cast<PFN_xrDestroyBodyTrackerFB>(pfnDestroyBodyTrackerFB));
  }
#endif  // XR_FB_body_tracking

#ifdef XR_FB_body_tracking
  /*!
   * @brief Return the function pointer for xrLocateBodyJointsFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateBodyJointsFB getInstanceProcAddr_xrLocateBodyJointsFB() {
    XrResult result = populate_("xrLocateBodyJointsFB", pfnLocateBodyJointsFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateBodyJointsFB>(pfnLocateBodyJointsFB));
  }
  /*!
   * @brief Return the function pointer for xrLocateBodyJointsFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateBodyJointsFB getInstanceProcAddr_xrLocateBodyJointsFB() const {
    return (reinterpret_cast<PFN_xrLocateBodyJointsFB>(pfnLocateBodyJointsFB));
  }
#endif  // XR_FB_body_tracking

#ifdef XR_FB_body_tracking
  /*!
   * @brief Return the function pointer for xrGetBodySkeletonFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetBodySkeletonFB getInstanceProcAddr_xrGetBodySkeletonFB() {
    XrResult result = populate_("xrGetBodySkeletonFB", pfnGetBodySkeletonFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetBodySkeletonFB>(pfnGetBodySkeletonFB));
  }
  /*!
   * @brief Return the function pointer for xrGetBodySkeletonFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetBodySkeletonFB getInstanceProcAddr_xrGetBodySkeletonFB() const {
    return (reinterpret_cast<PFN_xrGetBodySkeletonFB>(pfnGetBodySkeletonFB));
  }
#endif  // XR_FB_body_tracking

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrEnumerateSceneComputeFeaturesMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSceneComputeFeaturesMSFT
  getInstanceProcAddr_xrEnumerateSceneComputeFeaturesMSFT() {
    XrResult result =
        populate_("xrEnumerateSceneComputeFeaturesMSFT", pfnEnumerateSceneComputeFeaturesMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateSceneComputeFeaturesMSFT>(
        pfnEnumerateSceneComputeFeaturesMSFT));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateSceneComputeFeaturesMSFT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSceneComputeFeaturesMSFT
  getInstanceProcAddr_xrEnumerateSceneComputeFeaturesMSFT() const {
    return (reinterpret_cast<PFN_xrEnumerateSceneComputeFeaturesMSFT>(
        pfnEnumerateSceneComputeFeaturesMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrCreateSceneObserverMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSceneObserverMSFT getInstanceProcAddr_xrCreateSceneObserverMSFT() {
    XrResult result = populate_("xrCreateSceneObserverMSFT", pfnCreateSceneObserverMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSceneObserverMSFT>(pfnCreateSceneObserverMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSceneObserverMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSceneObserverMSFT
  getInstanceProcAddr_xrCreateSceneObserverMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSceneObserverMSFT>(pfnCreateSceneObserverMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrDestroySceneObserverMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySceneObserverMSFT
  getInstanceProcAddr_xrDestroySceneObserverMSFT() {
    XrResult result = populate_("xrDestroySceneObserverMSFT", pfnDestroySceneObserverMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySceneObserverMSFT>(pfnDestroySceneObserverMSFT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySceneObserverMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySceneObserverMSFT
  getInstanceProcAddr_xrDestroySceneObserverMSFT() const {
    return (reinterpret_cast<PFN_xrDestroySceneObserverMSFT>(pfnDestroySceneObserverMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrCreateSceneMSFT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSceneMSFT getInstanceProcAddr_xrCreateSceneMSFT() {
    XrResult result = populate_("xrCreateSceneMSFT", pfnCreateSceneMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSceneMSFT>(pfnCreateSceneMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSceneMSFT (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSceneMSFT getInstanceProcAddr_xrCreateSceneMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSceneMSFT>(pfnCreateSceneMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrDestroySceneMSFT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySceneMSFT getInstanceProcAddr_xrDestroySceneMSFT() {
    XrResult result = populate_("xrDestroySceneMSFT", pfnDestroySceneMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySceneMSFT>(pfnDestroySceneMSFT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySceneMSFT (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySceneMSFT getInstanceProcAddr_xrDestroySceneMSFT() const {
    return (reinterpret_cast<PFN_xrDestroySceneMSFT>(pfnDestroySceneMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrComputeNewSceneMSFT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrComputeNewSceneMSFT getInstanceProcAddr_xrComputeNewSceneMSFT() {
    XrResult result = populate_("xrComputeNewSceneMSFT", pfnComputeNewSceneMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrComputeNewSceneMSFT>(pfnComputeNewSceneMSFT));
  }
  /*!
   * @brief Return the function pointer for xrComputeNewSceneMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrComputeNewSceneMSFT getInstanceProcAddr_xrComputeNewSceneMSFT() const {
    return (reinterpret_cast<PFN_xrComputeNewSceneMSFT>(pfnComputeNewSceneMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrGetSceneComputeStateMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneComputeStateMSFT
  getInstanceProcAddr_xrGetSceneComputeStateMSFT() {
    XrResult result = populate_("xrGetSceneComputeStateMSFT", pfnGetSceneComputeStateMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSceneComputeStateMSFT>(pfnGetSceneComputeStateMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetSceneComputeStateMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneComputeStateMSFT
  getInstanceProcAddr_xrGetSceneComputeStateMSFT() const {
    return (reinterpret_cast<PFN_xrGetSceneComputeStateMSFT>(pfnGetSceneComputeStateMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrGetSceneComponentsMSFT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneComponentsMSFT getInstanceProcAddr_xrGetSceneComponentsMSFT() {
    XrResult result = populate_("xrGetSceneComponentsMSFT", pfnGetSceneComponentsMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSceneComponentsMSFT>(pfnGetSceneComponentsMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetSceneComponentsMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneComponentsMSFT
  getInstanceProcAddr_xrGetSceneComponentsMSFT() const {
    return (reinterpret_cast<PFN_xrGetSceneComponentsMSFT>(pfnGetSceneComponentsMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrLocateSceneComponentsMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateSceneComponentsMSFT
  getInstanceProcAddr_xrLocateSceneComponentsMSFT() {
    XrResult result = populate_("xrLocateSceneComponentsMSFT", pfnLocateSceneComponentsMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateSceneComponentsMSFT>(pfnLocateSceneComponentsMSFT));
  }
  /*!
   * @brief Return the function pointer for xrLocateSceneComponentsMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateSceneComponentsMSFT
  getInstanceProcAddr_xrLocateSceneComponentsMSFT() const {
    return (reinterpret_cast<PFN_xrLocateSceneComponentsMSFT>(pfnLocateSceneComponentsMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding
  /*!
   * @brief Return the function pointer for xrGetSceneMeshBuffersMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneMeshBuffersMSFT getInstanceProcAddr_xrGetSceneMeshBuffersMSFT() {
    XrResult result = populate_("xrGetSceneMeshBuffersMSFT", pfnGetSceneMeshBuffersMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSceneMeshBuffersMSFT>(pfnGetSceneMeshBuffersMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetSceneMeshBuffersMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneMeshBuffersMSFT
  getInstanceProcAddr_xrGetSceneMeshBuffersMSFT() const {
    return (reinterpret_cast<PFN_xrGetSceneMeshBuffersMSFT>(pfnGetSceneMeshBuffersMSFT));
  }
#endif  // XR_MSFT_scene_understanding

#ifdef XR_MSFT_scene_understanding_serialization
  /*!
   * @brief Return the function pointer for xrDeserializeSceneMSFT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDeserializeSceneMSFT getInstanceProcAddr_xrDeserializeSceneMSFT() {
    XrResult result = populate_("xrDeserializeSceneMSFT", pfnDeserializeSceneMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDeserializeSceneMSFT>(pfnDeserializeSceneMSFT));
  }
  /*!
   * @brief Return the function pointer for xrDeserializeSceneMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDeserializeSceneMSFT getInstanceProcAddr_xrDeserializeSceneMSFT() const {
    return (reinterpret_cast<PFN_xrDeserializeSceneMSFT>(pfnDeserializeSceneMSFT));
  }
#endif  // XR_MSFT_scene_understanding_serialization

#ifdef XR_MSFT_scene_understanding_serialization
  /*!
   * @brief Return the function pointer for xrGetSerializedSceneFragmentDataMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSerializedSceneFragmentDataMSFT
  getInstanceProcAddr_xrGetSerializedSceneFragmentDataMSFT() {
    XrResult result =
        populate_("xrGetSerializedSceneFragmentDataMSFT", pfnGetSerializedSceneFragmentDataMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSerializedSceneFragmentDataMSFT>(
        pfnGetSerializedSceneFragmentDataMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetSerializedSceneFragmentDataMSFT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSerializedSceneFragmentDataMSFT
  getInstanceProcAddr_xrGetSerializedSceneFragmentDataMSFT() const {
    return (reinterpret_cast<PFN_xrGetSerializedSceneFragmentDataMSFT>(
        pfnGetSerializedSceneFragmentDataMSFT));
  }
#endif  // XR_MSFT_scene_understanding_serialization

#ifdef XR_FB_display_refresh_rate
  /*!
   * @brief Return the function pointer for xrEnumerateDisplayRefreshRatesFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateDisplayRefreshRatesFB
  getInstanceProcAddr_xrEnumerateDisplayRefreshRatesFB() {
    XrResult result =
        populate_("xrEnumerateDisplayRefreshRatesFB", pfnEnumerateDisplayRefreshRatesFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateDisplayRefreshRatesFB>(pfnEnumerateDisplayRefreshRatesFB));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateDisplayRefreshRatesFB (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateDisplayRefreshRatesFB
  getInstanceProcAddr_xrEnumerateDisplayRefreshRatesFB() const {
    return (
        reinterpret_cast<PFN_xrEnumerateDisplayRefreshRatesFB>(pfnEnumerateDisplayRefreshRatesFB));
  }
#endif  // XR_FB_display_refresh_rate

#ifdef XR_FB_display_refresh_rate
  /*!
   * @brief Return the function pointer for xrGetDisplayRefreshRateFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetDisplayRefreshRateFB getInstanceProcAddr_xrGetDisplayRefreshRateFB() {
    XrResult result = populate_("xrGetDisplayRefreshRateFB", pfnGetDisplayRefreshRateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetDisplayRefreshRateFB>(pfnGetDisplayRefreshRateFB));
  }
  /*!
   * @brief Return the function pointer for xrGetDisplayRefreshRateFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetDisplayRefreshRateFB
  getInstanceProcAddr_xrGetDisplayRefreshRateFB() const {
    return (reinterpret_cast<PFN_xrGetDisplayRefreshRateFB>(pfnGetDisplayRefreshRateFB));
  }
#endif  // XR_FB_display_refresh_rate

#ifdef XR_FB_display_refresh_rate
  /*!
   * @brief Return the function pointer for xrRequestDisplayRefreshRateFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrRequestDisplayRefreshRateFB
  getInstanceProcAddr_xrRequestDisplayRefreshRateFB() {
    XrResult result = populate_("xrRequestDisplayRefreshRateFB", pfnRequestDisplayRefreshRateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrRequestDisplayRefreshRateFB>(pfnRequestDisplayRefreshRateFB));
  }
  /*!
   * @brief Return the function pointer for xrRequestDisplayRefreshRateFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrRequestDisplayRefreshRateFB
  getInstanceProcAddr_xrRequestDisplayRefreshRateFB() const {
    return (reinterpret_cast<PFN_xrRequestDisplayRefreshRateFB>(pfnRequestDisplayRefreshRateFB));
  }
#endif  // XR_FB_display_refresh_rate

#ifdef XR_HTCX_vive_tracker_interaction
  /*!
   * @brief Return the function pointer for xrEnumerateViveTrackerPathsHTCX, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateViveTrackerPathsHTCX
  getInstanceProcAddr_xrEnumerateViveTrackerPathsHTCX() {
    XrResult result =
        populate_("xrEnumerateViveTrackerPathsHTCX", pfnEnumerateViveTrackerPathsHTCX);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateViveTrackerPathsHTCX>(pfnEnumerateViveTrackerPathsHTCX));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateViveTrackerPathsHTCX (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateViveTrackerPathsHTCX
  getInstanceProcAddr_xrEnumerateViveTrackerPathsHTCX() const {
    return (
        reinterpret_cast<PFN_xrEnumerateViveTrackerPathsHTCX>(pfnEnumerateViveTrackerPathsHTCX));
  }
#endif  // XR_HTCX_vive_tracker_interaction

#ifdef XR_HTC_facial_tracking
  /*!
   * @brief Return the function pointer for xrCreateFacialTrackerHTC, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateFacialTrackerHTC getInstanceProcAddr_xrCreateFacialTrackerHTC() {
    XrResult result = populate_("xrCreateFacialTrackerHTC", pfnCreateFacialTrackerHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateFacialTrackerHTC>(pfnCreateFacialTrackerHTC));
  }
  /*!
   * @brief Return the function pointer for xrCreateFacialTrackerHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateFacialTrackerHTC
  getInstanceProcAddr_xrCreateFacialTrackerHTC() const {
    return (reinterpret_cast<PFN_xrCreateFacialTrackerHTC>(pfnCreateFacialTrackerHTC));
  }
#endif  // XR_HTC_facial_tracking

#ifdef XR_HTC_facial_tracking
  /*!
   * @brief Return the function pointer for xrDestroyFacialTrackerHTC, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFacialTrackerHTC getInstanceProcAddr_xrDestroyFacialTrackerHTC() {
    XrResult result = populate_("xrDestroyFacialTrackerHTC", pfnDestroyFacialTrackerHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyFacialTrackerHTC>(pfnDestroyFacialTrackerHTC));
  }
  /*!
   * @brief Return the function pointer for xrDestroyFacialTrackerHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFacialTrackerHTC
  getInstanceProcAddr_xrDestroyFacialTrackerHTC() const {
    return (reinterpret_cast<PFN_xrDestroyFacialTrackerHTC>(pfnDestroyFacialTrackerHTC));
  }
#endif  // XR_HTC_facial_tracking

#ifdef XR_HTC_facial_tracking
  /*!
   * @brief Return the function pointer for xrGetFacialExpressionsHTC, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetFacialExpressionsHTC getInstanceProcAddr_xrGetFacialExpressionsHTC() {
    XrResult result = populate_("xrGetFacialExpressionsHTC", pfnGetFacialExpressionsHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetFacialExpressionsHTC>(pfnGetFacialExpressionsHTC));
  }
  /*!
   * @brief Return the function pointer for xrGetFacialExpressionsHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetFacialExpressionsHTC
  getInstanceProcAddr_xrGetFacialExpressionsHTC() const {
    return (reinterpret_cast<PFN_xrGetFacialExpressionsHTC>(pfnGetFacialExpressionsHTC));
  }
#endif  // XR_HTC_facial_tracking

#ifdef XR_FB_color_space
  /*!
   * @brief Return the function pointer for xrEnumerateColorSpacesFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateColorSpacesFB getInstanceProcAddr_xrEnumerateColorSpacesFB() {
    XrResult result = populate_("xrEnumerateColorSpacesFB", pfnEnumerateColorSpacesFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateColorSpacesFB>(pfnEnumerateColorSpacesFB));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateColorSpacesFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateColorSpacesFB
  getInstanceProcAddr_xrEnumerateColorSpacesFB() const {
    return (reinterpret_cast<PFN_xrEnumerateColorSpacesFB>(pfnEnumerateColorSpacesFB));
  }
#endif  // XR_FB_color_space

#ifdef XR_FB_color_space
  /*!
   * @brief Return the function pointer for xrSetColorSpaceFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrSetColorSpaceFB getInstanceProcAddr_xrSetColorSpaceFB() {
    XrResult result = populate_("xrSetColorSpaceFB", pfnSetColorSpaceFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetColorSpaceFB>(pfnSetColorSpaceFB));
  }
  /*!
   * @brief Return the function pointer for xrSetColorSpaceFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetColorSpaceFB getInstanceProcAddr_xrSetColorSpaceFB() const {
    return (reinterpret_cast<PFN_xrSetColorSpaceFB>(pfnSetColorSpaceFB));
  }
#endif  // XR_FB_color_space

#ifdef XR_FB_hand_tracking_mesh
  /*!
   * @brief Return the function pointer for xrGetHandMeshFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetHandMeshFB getInstanceProcAddr_xrGetHandMeshFB() {
    XrResult result = populate_("xrGetHandMeshFB", pfnGetHandMeshFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetHandMeshFB>(pfnGetHandMeshFB));
  }
  /*!
   * @brief Return the function pointer for xrGetHandMeshFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetHandMeshFB getInstanceProcAddr_xrGetHandMeshFB() const {
    return (reinterpret_cast<PFN_xrGetHandMeshFB>(pfnGetHandMeshFB));
  }
#endif  // XR_FB_hand_tracking_mesh

#ifdef XR_FB_spatial_entity
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorFB getInstanceProcAddr_xrCreateSpatialAnchorFB() {
    XrResult result = populate_("xrCreateSpatialAnchorFB", pfnCreateSpatialAnchorFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFB>(pfnCreateSpatialAnchorFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorFB
  getInstanceProcAddr_xrCreateSpatialAnchorFB() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFB>(pfnCreateSpatialAnchorFB));
  }
#endif  // XR_FB_spatial_entity

#ifdef XR_FB_spatial_entity
  /*!
   * @brief Return the function pointer for xrGetSpaceUuidFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceUuidFB getInstanceProcAddr_xrGetSpaceUuidFB() {
    XrResult result = populate_("xrGetSpaceUuidFB", pfnGetSpaceUuidFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpaceUuidFB>(pfnGetSpaceUuidFB));
  }
  /*!
   * @brief Return the function pointer for xrGetSpaceUuidFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceUuidFB getInstanceProcAddr_xrGetSpaceUuidFB() const {
    return (reinterpret_cast<PFN_xrGetSpaceUuidFB>(pfnGetSpaceUuidFB));
  }
#endif  // XR_FB_spatial_entity

#ifdef XR_FB_spatial_entity
  /*!
   * @brief Return the function pointer for xrEnumerateSpaceSupportedComponentsFB, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSpaceSupportedComponentsFB
  getInstanceProcAddr_xrEnumerateSpaceSupportedComponentsFB() {
    XrResult result =
        populate_("xrEnumerateSpaceSupportedComponentsFB", pfnEnumerateSpaceSupportedComponentsFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateSpaceSupportedComponentsFB>(
        pfnEnumerateSpaceSupportedComponentsFB));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateSpaceSupportedComponentsFB (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSpaceSupportedComponentsFB
  getInstanceProcAddr_xrEnumerateSpaceSupportedComponentsFB() const {
    return (reinterpret_cast<PFN_xrEnumerateSpaceSupportedComponentsFB>(
        pfnEnumerateSpaceSupportedComponentsFB));
  }
#endif  // XR_FB_spatial_entity

#ifdef XR_FB_spatial_entity
  /*!
   * @brief Return the function pointer for xrSetSpaceComponentStatusFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetSpaceComponentStatusFB
  getInstanceProcAddr_xrSetSpaceComponentStatusFB() {
    XrResult result = populate_("xrSetSpaceComponentStatusFB", pfnSetSpaceComponentStatusFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetSpaceComponentStatusFB>(pfnSetSpaceComponentStatusFB));
  }
  /*!
   * @brief Return the function pointer for xrSetSpaceComponentStatusFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetSpaceComponentStatusFB
  getInstanceProcAddr_xrSetSpaceComponentStatusFB() const {
    return (reinterpret_cast<PFN_xrSetSpaceComponentStatusFB>(pfnSetSpaceComponentStatusFB));
  }
#endif  // XR_FB_spatial_entity

#ifdef XR_FB_spatial_entity
  /*!
   * @brief Return the function pointer for xrGetSpaceComponentStatusFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceComponentStatusFB
  getInstanceProcAddr_xrGetSpaceComponentStatusFB() {
    XrResult result = populate_("xrGetSpaceComponentStatusFB", pfnGetSpaceComponentStatusFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpaceComponentStatusFB>(pfnGetSpaceComponentStatusFB));
  }
  /*!
   * @brief Return the function pointer for xrGetSpaceComponentStatusFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceComponentStatusFB
  getInstanceProcAddr_xrGetSpaceComponentStatusFB() const {
    return (reinterpret_cast<PFN_xrGetSpaceComponentStatusFB>(pfnGetSpaceComponentStatusFB));
  }
#endif  // XR_FB_spatial_entity

#ifdef XR_FB_foveation
  /*!
   * @brief Return the function pointer for xrCreateFoveationProfileFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateFoveationProfileFB
  getInstanceProcAddr_xrCreateFoveationProfileFB() {
    XrResult result = populate_("xrCreateFoveationProfileFB", pfnCreateFoveationProfileFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateFoveationProfileFB>(pfnCreateFoveationProfileFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateFoveationProfileFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateFoveationProfileFB
  getInstanceProcAddr_xrCreateFoveationProfileFB() const {
    return (reinterpret_cast<PFN_xrCreateFoveationProfileFB>(pfnCreateFoveationProfileFB));
  }
#endif  // XR_FB_foveation

#ifdef XR_FB_foveation
  /*!
   * @brief Return the function pointer for xrDestroyFoveationProfileFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFoveationProfileFB
  getInstanceProcAddr_xrDestroyFoveationProfileFB() {
    XrResult result = populate_("xrDestroyFoveationProfileFB", pfnDestroyFoveationProfileFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyFoveationProfileFB>(pfnDestroyFoveationProfileFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyFoveationProfileFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFoveationProfileFB
  getInstanceProcAddr_xrDestroyFoveationProfileFB() const {
    return (reinterpret_cast<PFN_xrDestroyFoveationProfileFB>(pfnDestroyFoveationProfileFB));
  }
#endif  // XR_FB_foveation

#ifdef XR_FB_keyboard_tracking
  /*!
   * @brief Return the function pointer for xrQuerySystemTrackedKeyboardFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrQuerySystemTrackedKeyboardFB
  getInstanceProcAddr_xrQuerySystemTrackedKeyboardFB() {
    XrResult result = populate_("xrQuerySystemTrackedKeyboardFB", pfnQuerySystemTrackedKeyboardFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrQuerySystemTrackedKeyboardFB>(pfnQuerySystemTrackedKeyboardFB));
  }
  /*!
   * @brief Return the function pointer for xrQuerySystemTrackedKeyboardFB (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrQuerySystemTrackedKeyboardFB
  getInstanceProcAddr_xrQuerySystemTrackedKeyboardFB() const {
    return (reinterpret_cast<PFN_xrQuerySystemTrackedKeyboardFB>(pfnQuerySystemTrackedKeyboardFB));
  }
#endif  // XR_FB_keyboard_tracking

#ifdef XR_FB_keyboard_tracking
  /*!
   * @brief Return the function pointer for xrCreateKeyboardSpaceFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateKeyboardSpaceFB getInstanceProcAddr_xrCreateKeyboardSpaceFB() {
    XrResult result = populate_("xrCreateKeyboardSpaceFB", pfnCreateKeyboardSpaceFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateKeyboardSpaceFB>(pfnCreateKeyboardSpaceFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateKeyboardSpaceFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateKeyboardSpaceFB
  getInstanceProcAddr_xrCreateKeyboardSpaceFB() const {
    return (reinterpret_cast<PFN_xrCreateKeyboardSpaceFB>(pfnCreateKeyboardSpaceFB));
  }
#endif  // XR_FB_keyboard_tracking

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrCreateTriangleMeshFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateTriangleMeshFB getInstanceProcAddr_xrCreateTriangleMeshFB() {
    XrResult result = populate_("xrCreateTriangleMeshFB", pfnCreateTriangleMeshFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateTriangleMeshFB>(pfnCreateTriangleMeshFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateTriangleMeshFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateTriangleMeshFB getInstanceProcAddr_xrCreateTriangleMeshFB() const {
    return (reinterpret_cast<PFN_xrCreateTriangleMeshFB>(pfnCreateTriangleMeshFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrDestroyTriangleMeshFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyTriangleMeshFB getInstanceProcAddr_xrDestroyTriangleMeshFB() {
    XrResult result = populate_("xrDestroyTriangleMeshFB", pfnDestroyTriangleMeshFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyTriangleMeshFB>(pfnDestroyTriangleMeshFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyTriangleMeshFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyTriangleMeshFB
  getInstanceProcAddr_xrDestroyTriangleMeshFB() const {
    return (reinterpret_cast<PFN_xrDestroyTriangleMeshFB>(pfnDestroyTriangleMeshFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrTriangleMeshGetVertexBufferFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshGetVertexBufferFB
  getInstanceProcAddr_xrTriangleMeshGetVertexBufferFB() {
    XrResult result =
        populate_("xrTriangleMeshGetVertexBufferFB", pfnTriangleMeshGetVertexBufferFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrTriangleMeshGetVertexBufferFB>(pfnTriangleMeshGetVertexBufferFB));
  }
  /*!
   * @brief Return the function pointer for xrTriangleMeshGetVertexBufferFB (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshGetVertexBufferFB
  getInstanceProcAddr_xrTriangleMeshGetVertexBufferFB() const {
    return (
        reinterpret_cast<PFN_xrTriangleMeshGetVertexBufferFB>(pfnTriangleMeshGetVertexBufferFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrTriangleMeshGetIndexBufferFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshGetIndexBufferFB
  getInstanceProcAddr_xrTriangleMeshGetIndexBufferFB() {
    XrResult result = populate_("xrTriangleMeshGetIndexBufferFB", pfnTriangleMeshGetIndexBufferFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshGetIndexBufferFB>(pfnTriangleMeshGetIndexBufferFB));
  }
  /*!
   * @brief Return the function pointer for xrTriangleMeshGetIndexBufferFB (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshGetIndexBufferFB
  getInstanceProcAddr_xrTriangleMeshGetIndexBufferFB() const {
    return (reinterpret_cast<PFN_xrTriangleMeshGetIndexBufferFB>(pfnTriangleMeshGetIndexBufferFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrTriangleMeshBeginUpdateFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshBeginUpdateFB
  getInstanceProcAddr_xrTriangleMeshBeginUpdateFB() {
    XrResult result = populate_("xrTriangleMeshBeginUpdateFB", pfnTriangleMeshBeginUpdateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshBeginUpdateFB>(pfnTriangleMeshBeginUpdateFB));
  }
  /*!
   * @brief Return the function pointer for xrTriangleMeshBeginUpdateFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshBeginUpdateFB
  getInstanceProcAddr_xrTriangleMeshBeginUpdateFB() const {
    return (reinterpret_cast<PFN_xrTriangleMeshBeginUpdateFB>(pfnTriangleMeshBeginUpdateFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrTriangleMeshEndUpdateFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshEndUpdateFB getInstanceProcAddr_xrTriangleMeshEndUpdateFB() {
    XrResult result = populate_("xrTriangleMeshEndUpdateFB", pfnTriangleMeshEndUpdateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshEndUpdateFB>(pfnTriangleMeshEndUpdateFB));
  }
  /*!
   * @brief Return the function pointer for xrTriangleMeshEndUpdateFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshEndUpdateFB
  getInstanceProcAddr_xrTriangleMeshEndUpdateFB() const {
    return (reinterpret_cast<PFN_xrTriangleMeshEndUpdateFB>(pfnTriangleMeshEndUpdateFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrTriangleMeshBeginVertexBufferUpdateFB, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshBeginVertexBufferUpdateFB
  getInstanceProcAddr_xrTriangleMeshBeginVertexBufferUpdateFB() {
    XrResult result = populate_("xrTriangleMeshBeginVertexBufferUpdateFB",
                                pfnTriangleMeshBeginVertexBufferUpdateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshBeginVertexBufferUpdateFB>(
        pfnTriangleMeshBeginVertexBufferUpdateFB));
  }
  /*!
   * @brief Return the function pointer for xrTriangleMeshBeginVertexBufferUpdateFB (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshBeginVertexBufferUpdateFB
  getInstanceProcAddr_xrTriangleMeshBeginVertexBufferUpdateFB() const {
    return (reinterpret_cast<PFN_xrTriangleMeshBeginVertexBufferUpdateFB>(
        pfnTriangleMeshBeginVertexBufferUpdateFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_triangle_mesh
  /*!
   * @brief Return the function pointer for xrTriangleMeshEndVertexBufferUpdateFB, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshEndVertexBufferUpdateFB
  getInstanceProcAddr_xrTriangleMeshEndVertexBufferUpdateFB() {
    XrResult result =
        populate_("xrTriangleMeshEndVertexBufferUpdateFB", pfnTriangleMeshEndVertexBufferUpdateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrTriangleMeshEndVertexBufferUpdateFB>(
        pfnTriangleMeshEndVertexBufferUpdateFB));
  }
  /*!
   * @brief Return the function pointer for xrTriangleMeshEndVertexBufferUpdateFB (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrTriangleMeshEndVertexBufferUpdateFB
  getInstanceProcAddr_xrTriangleMeshEndVertexBufferUpdateFB() const {
    return (reinterpret_cast<PFN_xrTriangleMeshEndVertexBufferUpdateFB>(
        pfnTriangleMeshEndVertexBufferUpdateFB));
  }
#endif  // XR_FB_triangle_mesh

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrCreatePassthroughFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreatePassthroughFB getInstanceProcAddr_xrCreatePassthroughFB() {
    XrResult result = populate_("xrCreatePassthroughFB", pfnCreatePassthroughFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreatePassthroughFB>(pfnCreatePassthroughFB));
  }
  /*!
   * @brief Return the function pointer for xrCreatePassthroughFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreatePassthroughFB getInstanceProcAddr_xrCreatePassthroughFB() const {
    return (reinterpret_cast<PFN_xrCreatePassthroughFB>(pfnCreatePassthroughFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrDestroyPassthroughFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPassthroughFB getInstanceProcAddr_xrDestroyPassthroughFB() {
    XrResult result = populate_("xrDestroyPassthroughFB", pfnDestroyPassthroughFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyPassthroughFB>(pfnDestroyPassthroughFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyPassthroughFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPassthroughFB getInstanceProcAddr_xrDestroyPassthroughFB() const {
    return (reinterpret_cast<PFN_xrDestroyPassthroughFB>(pfnDestroyPassthroughFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrPassthroughStartFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughStartFB getInstanceProcAddr_xrPassthroughStartFB() {
    XrResult result = populate_("xrPassthroughStartFB", pfnPassthroughStartFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPassthroughStartFB>(pfnPassthroughStartFB));
  }
  /*!
   * @brief Return the function pointer for xrPassthroughStartFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughStartFB getInstanceProcAddr_xrPassthroughStartFB() const {
    return (reinterpret_cast<PFN_xrPassthroughStartFB>(pfnPassthroughStartFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrPassthroughPauseFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughPauseFB getInstanceProcAddr_xrPassthroughPauseFB() {
    XrResult result = populate_("xrPassthroughPauseFB", pfnPassthroughPauseFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPassthroughPauseFB>(pfnPassthroughPauseFB));
  }
  /*!
   * @brief Return the function pointer for xrPassthroughPauseFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughPauseFB getInstanceProcAddr_xrPassthroughPauseFB() const {
    return (reinterpret_cast<PFN_xrPassthroughPauseFB>(pfnPassthroughPauseFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrCreatePassthroughLayerFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreatePassthroughLayerFB
  getInstanceProcAddr_xrCreatePassthroughLayerFB() {
    XrResult result = populate_("xrCreatePassthroughLayerFB", pfnCreatePassthroughLayerFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreatePassthroughLayerFB>(pfnCreatePassthroughLayerFB));
  }
  /*!
   * @brief Return the function pointer for xrCreatePassthroughLayerFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreatePassthroughLayerFB
  getInstanceProcAddr_xrCreatePassthroughLayerFB() const {
    return (reinterpret_cast<PFN_xrCreatePassthroughLayerFB>(pfnCreatePassthroughLayerFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrDestroyPassthroughLayerFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPassthroughLayerFB
  getInstanceProcAddr_xrDestroyPassthroughLayerFB() {
    XrResult result = populate_("xrDestroyPassthroughLayerFB", pfnDestroyPassthroughLayerFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyPassthroughLayerFB>(pfnDestroyPassthroughLayerFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyPassthroughLayerFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPassthroughLayerFB
  getInstanceProcAddr_xrDestroyPassthroughLayerFB() const {
    return (reinterpret_cast<PFN_xrDestroyPassthroughLayerFB>(pfnDestroyPassthroughLayerFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrPassthroughLayerPauseFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerPauseFB getInstanceProcAddr_xrPassthroughLayerPauseFB() {
    XrResult result = populate_("xrPassthroughLayerPauseFB", pfnPassthroughLayerPauseFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerPauseFB>(pfnPassthroughLayerPauseFB));
  }
  /*!
   * @brief Return the function pointer for xrPassthroughLayerPauseFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerPauseFB
  getInstanceProcAddr_xrPassthroughLayerPauseFB() const {
    return (reinterpret_cast<PFN_xrPassthroughLayerPauseFB>(pfnPassthroughLayerPauseFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrPassthroughLayerResumeFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerResumeFB
  getInstanceProcAddr_xrPassthroughLayerResumeFB() {
    XrResult result = populate_("xrPassthroughLayerResumeFB", pfnPassthroughLayerResumeFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerResumeFB>(pfnPassthroughLayerResumeFB));
  }
  /*!
   * @brief Return the function pointer for xrPassthroughLayerResumeFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerResumeFB
  getInstanceProcAddr_xrPassthroughLayerResumeFB() const {
    return (reinterpret_cast<PFN_xrPassthroughLayerResumeFB>(pfnPassthroughLayerResumeFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrPassthroughLayerSetStyleFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerSetStyleFB
  getInstanceProcAddr_xrPassthroughLayerSetStyleFB() {
    XrResult result = populate_("xrPassthroughLayerSetStyleFB", pfnPassthroughLayerSetStyleFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerSetStyleFB>(pfnPassthroughLayerSetStyleFB));
  }
  /*!
   * @brief Return the function pointer for xrPassthroughLayerSetStyleFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerSetStyleFB
  getInstanceProcAddr_xrPassthroughLayerSetStyleFB() const {
    return (reinterpret_cast<PFN_xrPassthroughLayerSetStyleFB>(pfnPassthroughLayerSetStyleFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrCreateGeometryInstanceFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateGeometryInstanceFB
  getInstanceProcAddr_xrCreateGeometryInstanceFB() {
    XrResult result = populate_("xrCreateGeometryInstanceFB", pfnCreateGeometryInstanceFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateGeometryInstanceFB>(pfnCreateGeometryInstanceFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateGeometryInstanceFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateGeometryInstanceFB
  getInstanceProcAddr_xrCreateGeometryInstanceFB() const {
    return (reinterpret_cast<PFN_xrCreateGeometryInstanceFB>(pfnCreateGeometryInstanceFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrDestroyGeometryInstanceFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyGeometryInstanceFB
  getInstanceProcAddr_xrDestroyGeometryInstanceFB() {
    XrResult result = populate_("xrDestroyGeometryInstanceFB", pfnDestroyGeometryInstanceFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyGeometryInstanceFB>(pfnDestroyGeometryInstanceFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyGeometryInstanceFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyGeometryInstanceFB
  getInstanceProcAddr_xrDestroyGeometryInstanceFB() const {
    return (reinterpret_cast<PFN_xrDestroyGeometryInstanceFB>(pfnDestroyGeometryInstanceFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_passthrough
  /*!
   * @brief Return the function pointer for xrGeometryInstanceSetTransformFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGeometryInstanceSetTransformFB
  getInstanceProcAddr_xrGeometryInstanceSetTransformFB() {
    XrResult result =
        populate_("xrGeometryInstanceSetTransformFB", pfnGeometryInstanceSetTransformFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrGeometryInstanceSetTransformFB>(pfnGeometryInstanceSetTransformFB));
  }
  /*!
   * @brief Return the function pointer for xrGeometryInstanceSetTransformFB (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGeometryInstanceSetTransformFB
  getInstanceProcAddr_xrGeometryInstanceSetTransformFB() const {
    return (
        reinterpret_cast<PFN_xrGeometryInstanceSetTransformFB>(pfnGeometryInstanceSetTransformFB));
  }
#endif  // XR_FB_passthrough

#ifdef XR_FB_render_model
  /*!
   * @brief Return the function pointer for xrEnumerateRenderModelPathsFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateRenderModelPathsFB
  getInstanceProcAddr_xrEnumerateRenderModelPathsFB() {
    XrResult result = populate_("xrEnumerateRenderModelPathsFB", pfnEnumerateRenderModelPathsFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateRenderModelPathsFB>(pfnEnumerateRenderModelPathsFB));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateRenderModelPathsFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateRenderModelPathsFB
  getInstanceProcAddr_xrEnumerateRenderModelPathsFB() const {
    return (reinterpret_cast<PFN_xrEnumerateRenderModelPathsFB>(pfnEnumerateRenderModelPathsFB));
  }
#endif  // XR_FB_render_model

#ifdef XR_FB_render_model
  /*!
   * @brief Return the function pointer for xrGetRenderModelPropertiesFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelPropertiesFB
  getInstanceProcAddr_xrGetRenderModelPropertiesFB() {
    XrResult result = populate_("xrGetRenderModelPropertiesFB", pfnGetRenderModelPropertiesFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelPropertiesFB>(pfnGetRenderModelPropertiesFB));
  }
  /*!
   * @brief Return the function pointer for xrGetRenderModelPropertiesFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelPropertiesFB
  getInstanceProcAddr_xrGetRenderModelPropertiesFB() const {
    return (reinterpret_cast<PFN_xrGetRenderModelPropertiesFB>(pfnGetRenderModelPropertiesFB));
  }
#endif  // XR_FB_render_model

#ifdef XR_FB_render_model
  /*!
   * @brief Return the function pointer for xrLoadRenderModelFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrLoadRenderModelFB getInstanceProcAddr_xrLoadRenderModelFB() {
    XrResult result = populate_("xrLoadRenderModelFB", pfnLoadRenderModelFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLoadRenderModelFB>(pfnLoadRenderModelFB));
  }
  /*!
   * @brief Return the function pointer for xrLoadRenderModelFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLoadRenderModelFB getInstanceProcAddr_xrLoadRenderModelFB() const {
    return (reinterpret_cast<PFN_xrLoadRenderModelFB>(pfnLoadRenderModelFB));
  }
#endif  // XR_FB_render_model

#ifdef XR_VARJO_environment_depth_estimation
  /*!
   * @brief Return the function pointer for xrSetEnvironmentDepthEstimationVARJO, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetEnvironmentDepthEstimationVARJO
  getInstanceProcAddr_xrSetEnvironmentDepthEstimationVARJO() {
    XrResult result =
        populate_("xrSetEnvironmentDepthEstimationVARJO", pfnSetEnvironmentDepthEstimationVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetEnvironmentDepthEstimationVARJO>(
        pfnSetEnvironmentDepthEstimationVARJO));
  }
  /*!
   * @brief Return the function pointer for xrSetEnvironmentDepthEstimationVARJO (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetEnvironmentDepthEstimationVARJO
  getInstanceProcAddr_xrSetEnvironmentDepthEstimationVARJO() const {
    return (reinterpret_cast<PFN_xrSetEnvironmentDepthEstimationVARJO>(
        pfnSetEnvironmentDepthEstimationVARJO));
  }
#endif  // XR_VARJO_environment_depth_estimation

#ifdef XR_VARJO_marker_tracking
  /*!
   * @brief Return the function pointer for xrSetMarkerTrackingVARJO, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrSetMarkerTrackingVARJO getInstanceProcAddr_xrSetMarkerTrackingVARJO() {
    XrResult result = populate_("xrSetMarkerTrackingVARJO", pfnSetMarkerTrackingVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetMarkerTrackingVARJO>(pfnSetMarkerTrackingVARJO));
  }
  /*!
   * @brief Return the function pointer for xrSetMarkerTrackingVARJO (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetMarkerTrackingVARJO
  getInstanceProcAddr_xrSetMarkerTrackingVARJO() const {
    return (reinterpret_cast<PFN_xrSetMarkerTrackingVARJO>(pfnSetMarkerTrackingVARJO));
  }
#endif  // XR_VARJO_marker_tracking

#ifdef XR_VARJO_marker_tracking
  /*!
   * @brief Return the function pointer for xrSetMarkerTrackingTimeoutVARJO, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetMarkerTrackingTimeoutVARJO
  getInstanceProcAddr_xrSetMarkerTrackingTimeoutVARJO() {
    XrResult result =
        populate_("xrSetMarkerTrackingTimeoutVARJO", pfnSetMarkerTrackingTimeoutVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrSetMarkerTrackingTimeoutVARJO>(pfnSetMarkerTrackingTimeoutVARJO));
  }
  /*!
   * @brief Return the function pointer for xrSetMarkerTrackingTimeoutVARJO (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetMarkerTrackingTimeoutVARJO
  getInstanceProcAddr_xrSetMarkerTrackingTimeoutVARJO() const {
    return (
        reinterpret_cast<PFN_xrSetMarkerTrackingTimeoutVARJO>(pfnSetMarkerTrackingTimeoutVARJO));
  }
#endif  // XR_VARJO_marker_tracking

#ifdef XR_VARJO_marker_tracking
  /*!
   * @brief Return the function pointer for xrSetMarkerTrackingPredictionVARJO, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetMarkerTrackingPredictionVARJO
  getInstanceProcAddr_xrSetMarkerTrackingPredictionVARJO() {
    XrResult result =
        populate_("xrSetMarkerTrackingPredictionVARJO", pfnSetMarkerTrackingPredictionVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetMarkerTrackingPredictionVARJO>(
        pfnSetMarkerTrackingPredictionVARJO));
  }
  /*!
   * @brief Return the function pointer for xrSetMarkerTrackingPredictionVARJO (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetMarkerTrackingPredictionVARJO
  getInstanceProcAddr_xrSetMarkerTrackingPredictionVARJO() const {
    return (reinterpret_cast<PFN_xrSetMarkerTrackingPredictionVARJO>(
        pfnSetMarkerTrackingPredictionVARJO));
  }
#endif  // XR_VARJO_marker_tracking

#ifdef XR_VARJO_marker_tracking
  /*!
   * @brief Return the function pointer for xrGetMarkerSizeVARJO, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerSizeVARJO getInstanceProcAddr_xrGetMarkerSizeVARJO() {
    XrResult result = populate_("xrGetMarkerSizeVARJO", pfnGetMarkerSizeVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetMarkerSizeVARJO>(pfnGetMarkerSizeVARJO));
  }
  /*!
   * @brief Return the function pointer for xrGetMarkerSizeVARJO (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerSizeVARJO getInstanceProcAddr_xrGetMarkerSizeVARJO() const {
    return (reinterpret_cast<PFN_xrGetMarkerSizeVARJO>(pfnGetMarkerSizeVARJO));
  }
#endif  // XR_VARJO_marker_tracking

#ifdef XR_VARJO_marker_tracking
  /*!
   * @brief Return the function pointer for xrCreateMarkerSpaceVARJO, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateMarkerSpaceVARJO getInstanceProcAddr_xrCreateMarkerSpaceVARJO() {
    XrResult result = populate_("xrCreateMarkerSpaceVARJO", pfnCreateMarkerSpaceVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateMarkerSpaceVARJO>(pfnCreateMarkerSpaceVARJO));
  }
  /*!
   * @brief Return the function pointer for xrCreateMarkerSpaceVARJO (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateMarkerSpaceVARJO
  getInstanceProcAddr_xrCreateMarkerSpaceVARJO() const {
    return (reinterpret_cast<PFN_xrCreateMarkerSpaceVARJO>(pfnCreateMarkerSpaceVARJO));
  }
#endif  // XR_VARJO_marker_tracking

#ifdef XR_VARJO_view_offset
  /*!
   * @brief Return the function pointer for xrSetViewOffsetVARJO, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrSetViewOffsetVARJO getInstanceProcAddr_xrSetViewOffsetVARJO() {
    XrResult result = populate_("xrSetViewOffsetVARJO", pfnSetViewOffsetVARJO);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetViewOffsetVARJO>(pfnSetViewOffsetVARJO));
  }
  /*!
   * @brief Return the function pointer for xrSetViewOffsetVARJO (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetViewOffsetVARJO getInstanceProcAddr_xrSetViewOffsetVARJO() const {
    return (reinterpret_cast<PFN_xrSetViewOffsetVARJO>(pfnSetViewOffsetVARJO));
  }
#endif  // XR_VARJO_view_offset

#ifdef XR_ML_compat
#if defined(XR_USE_PLATFORM_ML)
  /*!
   * @brief Return the function pointer for xrCreateSpaceFromCoordinateFrameUIDML, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpaceFromCoordinateFrameUIDML
  getInstanceProcAddr_xrCreateSpaceFromCoordinateFrameUIDML() {
    XrResult result =
        populate_("xrCreateSpaceFromCoordinateFrameUIDML", pfnCreateSpaceFromCoordinateFrameUIDML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpaceFromCoordinateFrameUIDML>(
        pfnCreateSpaceFromCoordinateFrameUIDML));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpaceFromCoordinateFrameUIDML (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpaceFromCoordinateFrameUIDML
  getInstanceProcAddr_xrCreateSpaceFromCoordinateFrameUIDML() const {
    return (reinterpret_cast<PFN_xrCreateSpaceFromCoordinateFrameUIDML>(
        pfnCreateSpaceFromCoordinateFrameUIDML));
  }
#endif  // defined(XR_USE_PLATFORM_ML)
#endif  // XR_ML_compat

#ifdef XR_ML_marker_understanding
  /*!
   * @brief Return the function pointer for xrCreateMarkerDetectorML, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateMarkerDetectorML getInstanceProcAddr_xrCreateMarkerDetectorML() {
    XrResult result = populate_("xrCreateMarkerDetectorML", pfnCreateMarkerDetectorML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateMarkerDetectorML>(pfnCreateMarkerDetectorML));
  }
  /*!
   * @brief Return the function pointer for xrCreateMarkerDetectorML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateMarkerDetectorML
  getInstanceProcAddr_xrCreateMarkerDetectorML() const {
    return (reinterpret_cast<PFN_xrCreateMarkerDetectorML>(pfnCreateMarkerDetectorML));
  }
#endif  // XR_ML_marker_understanding

#ifdef XR_ML_marker_understanding
  /*!
   * @brief Return the function pointer for xrDestroyMarkerDetectorML, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyMarkerDetectorML getInstanceProcAddr_xrDestroyMarkerDetectorML() {
    XrResult result = populate_("xrDestroyMarkerDetectorML", pfnDestroyMarkerDetectorML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyMarkerDetectorML>(pfnDestroyMarkerDetectorML));
  }
  /*!
   * @brief Return the function pointer for xrDestroyMarkerDetectorML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyMarkerDetectorML
  getInstanceProcAddr_xrDestroyMarkerDetectorML() const {
    return (reinterpret_cast<PFN_xrDestroyMarkerDetectorML>(pfnDestroyMarkerDetectorML));
  }
#endif  // XR_ML_marker_understanding

#ifdef XR_ML_marker_understanding
  /*!
   * @brief Return the function pointer for xrSnapshotMarkerDetectorML, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrSnapshotMarkerDetectorML
  getInstanceProcAddr_xrSnapshotMarkerDetectorML() {
    XrResult result = populate_("xrSnapshotMarkerDetectorML", pfnSnapshotMarkerDetectorML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSnapshotMarkerDetectorML>(pfnSnapshotMarkerDetectorML));
  }
  /*!
   * @brief Return the function pointer for xrSnapshotMarkerDetectorML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSnapshotMarkerDetectorML
  getInstanceProcAddr_xrSnapshotMarkerDetectorML() const {
    return (reinterpret_cast<PFN_xrSnapshotMarkerDetectorML>(pfnSnapshotMarkerDetectorML));
  }
#endif  // XR_ML_marker_understanding

#ifdef XR_ML_marker_understanding
  /*!
   * @brief Return the function pointer for xrGetMarkerDetectorStateML, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerDetectorStateML
  getInstanceProcAddr_xrGetMarkerDetectorStateML() {
    XrResult result = populate_("xrGetMarkerDetectorStateML", pfnGetMarkerDetectorStateML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetMarkerDetectorStateML>(pfnGetMarkerDetectorStateML));
  }
  /*!
   * @brief Return the function pointer for xrGetMarkerDetectorStateML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerDetectorStateML
  getInstanceProcAddr_xrGetMarkerDetectorStateML() const {
    return (reinterpret_cast<PFN_xrGetMarkerDetectorStateML>(pfnGetMarkerDetectorStateML));
  }
#endif  // XR_ML_marker_understanding

#ifdef XR_ML_marker_understanding
  /*!
   * @brief Return the function pointer for xrGetMarkersML, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkersML getInstanceProcAddr_xrGetMarkersML() {
    XrResult result = populate_("xrGetMarkersML", pfnGetMarkersML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetMarkersML>(pfnGetMarkersML));
  }
  /*!
   * @brief Return the function pointer for xrGetMarkersML (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkersML getInstanceProcAddr_xrGetMarkersML() const {
    return (reinterpret_cast<PFN_xrGetMarkersML>(pfnGetMarkersML));
  }
#endif  // XR_ML_marker_understanding

#ifdef XR_ML_marker_understanding
  /*!
   * @brief Return the function pointer for xrGetMarkerReprojectionErrorML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerReprojectionErrorML
  getInstanceProcAddr_xrGetMarkerReprojectionErrorML() {
    XrResult result = populate_("xrGetMarkerReprojectionErrorML", pfnGetMarkerReprojectionErrorML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetMarkerReprojectionErrorML>(pfnGetMarkerReprojectionErrorML));
  }
  /*!
   * @brief Return the function pointer for xrGetMarkerReprojectionErrorML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerReprojectionErrorML
  getInstanceProcAddr_xrGetMarkerReprojectionErrorML() const {
    return (reinterpret_cast<PFN_xrGetMarkerReprojectionErrorML>(pfnGetMarkerReprojectionErrorML));
  }
#endif  // XR_ML_marker_understanding

#ifdef XR_ML_marker_understanding
  /*!
   * @brief Return the function pointer for xrGetMarkerLengthML, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerLengthML getInstanceProcAddr_xrGetMarkerLengthML() {
    XrResult result = populate_("xrGetMarkerLengthML", pfnGetMarkerLengthML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetMarkerLengthML>(pfnGetMarkerLengthML));
  }
  /*!
   * @brief Return the function pointer for xrGetMarkerLengthML (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerLengthML getInstanceProcAddr_xrGetMarkerLengthML() const {
    return (reinterpret_cast<PFN_xrGetMarkerLengthML>(pfnGetMarkerLengthML));
  }
#endif  // XR_ML_marker_understanding

#ifdef XR_ML_marker_understanding
  /*!
   * @brief Return the function pointer for xrGetMarkerNumberML, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerNumberML getInstanceProcAddr_xrGetMarkerNumberML() {
    XrResult result = populate_("xrGetMarkerNumberML", pfnGetMarkerNumberML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetMarkerNumberML>(pfnGetMarkerNumberML));
  }
  /*!
   * @brief Return the function pointer for xrGetMarkerNumberML (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerNumberML getInstanceProcAddr_xrGetMarkerNumberML() const {
    return (reinterpret_cast<PFN_xrGetMarkerNumberML>(pfnGetMarkerNumberML));
  }
#endif  // XR_ML_marker_understanding

#ifdef XR_ML_marker_understanding
  /*!
   * @brief Return the function pointer for xrGetMarkerStringML, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerStringML getInstanceProcAddr_xrGetMarkerStringML() {
    XrResult result = populate_("xrGetMarkerStringML", pfnGetMarkerStringML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetMarkerStringML>(pfnGetMarkerStringML));
  }
  /*!
   * @brief Return the function pointer for xrGetMarkerStringML (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetMarkerStringML getInstanceProcAddr_xrGetMarkerStringML() const {
    return (reinterpret_cast<PFN_xrGetMarkerStringML>(pfnGetMarkerStringML));
  }
#endif  // XR_ML_marker_understanding

#ifdef XR_ML_marker_understanding
  /*!
   * @brief Return the function pointer for xrCreateMarkerSpaceML, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateMarkerSpaceML getInstanceProcAddr_xrCreateMarkerSpaceML() {
    XrResult result = populate_("xrCreateMarkerSpaceML", pfnCreateMarkerSpaceML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateMarkerSpaceML>(pfnCreateMarkerSpaceML));
  }
  /*!
   * @brief Return the function pointer for xrCreateMarkerSpaceML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateMarkerSpaceML getInstanceProcAddr_xrCreateMarkerSpaceML() const {
    return (reinterpret_cast<PFN_xrCreateMarkerSpaceML>(pfnCreateMarkerSpaceML));
  }
#endif  // XR_ML_marker_understanding

#ifdef XR_ML_localization_map
  /*!
   * @brief Return the function pointer for xrEnableLocalizationEventsML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnableLocalizationEventsML
  getInstanceProcAddr_xrEnableLocalizationEventsML() {
    XrResult result = populate_("xrEnableLocalizationEventsML", pfnEnableLocalizationEventsML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnableLocalizationEventsML>(pfnEnableLocalizationEventsML));
  }
  /*!
   * @brief Return the function pointer for xrEnableLocalizationEventsML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnableLocalizationEventsML
  getInstanceProcAddr_xrEnableLocalizationEventsML() const {
    return (reinterpret_cast<PFN_xrEnableLocalizationEventsML>(pfnEnableLocalizationEventsML));
  }
#endif  // XR_ML_localization_map

#ifdef XR_ML_localization_map
  /*!
   * @brief Return the function pointer for xrQueryLocalizationMapsML, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrQueryLocalizationMapsML getInstanceProcAddr_xrQueryLocalizationMapsML() {
    XrResult result = populate_("xrQueryLocalizationMapsML", pfnQueryLocalizationMapsML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrQueryLocalizationMapsML>(pfnQueryLocalizationMapsML));
  }
  /*!
   * @brief Return the function pointer for xrQueryLocalizationMapsML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrQueryLocalizationMapsML
  getInstanceProcAddr_xrQueryLocalizationMapsML() const {
    return (reinterpret_cast<PFN_xrQueryLocalizationMapsML>(pfnQueryLocalizationMapsML));
  }
#endif  // XR_ML_localization_map

#ifdef XR_ML_localization_map
  /*!
   * @brief Return the function pointer for xrRequestMapLocalizationML, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrRequestMapLocalizationML
  getInstanceProcAddr_xrRequestMapLocalizationML() {
    XrResult result = populate_("xrRequestMapLocalizationML", pfnRequestMapLocalizationML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrRequestMapLocalizationML>(pfnRequestMapLocalizationML));
  }
  /*!
   * @brief Return the function pointer for xrRequestMapLocalizationML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrRequestMapLocalizationML
  getInstanceProcAddr_xrRequestMapLocalizationML() const {
    return (reinterpret_cast<PFN_xrRequestMapLocalizationML>(pfnRequestMapLocalizationML));
  }
#endif  // XR_ML_localization_map

#ifdef XR_ML_localization_map
  /*!
   * @brief Return the function pointer for xrImportLocalizationMapML, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrImportLocalizationMapML getInstanceProcAddr_xrImportLocalizationMapML() {
    XrResult result = populate_("xrImportLocalizationMapML", pfnImportLocalizationMapML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrImportLocalizationMapML>(pfnImportLocalizationMapML));
  }
  /*!
   * @brief Return the function pointer for xrImportLocalizationMapML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrImportLocalizationMapML
  getInstanceProcAddr_xrImportLocalizationMapML() const {
    return (reinterpret_cast<PFN_xrImportLocalizationMapML>(pfnImportLocalizationMapML));
  }
#endif  // XR_ML_localization_map

#ifdef XR_ML_localization_map
  /*!
   * @brief Return the function pointer for xrCreateExportedLocalizationMapML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateExportedLocalizationMapML
  getInstanceProcAddr_xrCreateExportedLocalizationMapML() {
    XrResult result =
        populate_("xrCreateExportedLocalizationMapML", pfnCreateExportedLocalizationMapML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateExportedLocalizationMapML>(
        pfnCreateExportedLocalizationMapML));
  }
  /*!
   * @brief Return the function pointer for xrCreateExportedLocalizationMapML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateExportedLocalizationMapML
  getInstanceProcAddr_xrCreateExportedLocalizationMapML() const {
    return (reinterpret_cast<PFN_xrCreateExportedLocalizationMapML>(
        pfnCreateExportedLocalizationMapML));
  }
#endif  // XR_ML_localization_map

#ifdef XR_ML_localization_map
  /*!
   * @brief Return the function pointer for xrDestroyExportedLocalizationMapML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyExportedLocalizationMapML
  getInstanceProcAddr_xrDestroyExportedLocalizationMapML() {
    XrResult result =
        populate_("xrDestroyExportedLocalizationMapML", pfnDestroyExportedLocalizationMapML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyExportedLocalizationMapML>(
        pfnDestroyExportedLocalizationMapML));
  }
  /*!
   * @brief Return the function pointer for xrDestroyExportedLocalizationMapML (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyExportedLocalizationMapML
  getInstanceProcAddr_xrDestroyExportedLocalizationMapML() const {
    return (reinterpret_cast<PFN_xrDestroyExportedLocalizationMapML>(
        pfnDestroyExportedLocalizationMapML));
  }
#endif  // XR_ML_localization_map

#ifdef XR_ML_localization_map
  /*!
   * @brief Return the function pointer for xrGetExportedLocalizationMapDataML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetExportedLocalizationMapDataML
  getInstanceProcAddr_xrGetExportedLocalizationMapDataML() {
    XrResult result =
        populate_("xrGetExportedLocalizationMapDataML", pfnGetExportedLocalizationMapDataML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetExportedLocalizationMapDataML>(
        pfnGetExportedLocalizationMapDataML));
  }
  /*!
   * @brief Return the function pointer for xrGetExportedLocalizationMapDataML (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetExportedLocalizationMapDataML
  getInstanceProcAddr_xrGetExportedLocalizationMapDataML() const {
    return (reinterpret_cast<PFN_xrGetExportedLocalizationMapDataML>(
        pfnGetExportedLocalizationMapDataML));
  }
#endif  // XR_ML_localization_map

#ifdef XR_ML_spatial_anchors
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorsAsyncML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorsAsyncML
  getInstanceProcAddr_xrCreateSpatialAnchorsAsyncML() {
    XrResult result = populate_("xrCreateSpatialAnchorsAsyncML", pfnCreateSpatialAnchorsAsyncML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorsAsyncML>(pfnCreateSpatialAnchorsAsyncML));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorsAsyncML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorsAsyncML
  getInstanceProcAddr_xrCreateSpatialAnchorsAsyncML() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorsAsyncML>(pfnCreateSpatialAnchorsAsyncML));
  }
#endif  // XR_ML_spatial_anchors

#ifdef XR_ML_spatial_anchors
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorsCompleteML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorsCompleteML
  getInstanceProcAddr_xrCreateSpatialAnchorsCompleteML() {
    XrResult result =
        populate_("xrCreateSpatialAnchorsCompleteML", pfnCreateSpatialAnchorsCompleteML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrCreateSpatialAnchorsCompleteML>(pfnCreateSpatialAnchorsCompleteML));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorsCompleteML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorsCompleteML
  getInstanceProcAddr_xrCreateSpatialAnchorsCompleteML() const {
    return (
        reinterpret_cast<PFN_xrCreateSpatialAnchorsCompleteML>(pfnCreateSpatialAnchorsCompleteML));
  }
#endif  // XR_ML_spatial_anchors

#ifdef XR_ML_spatial_anchors
  /*!
   * @brief Return the function pointer for xrGetSpatialAnchorStateML, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialAnchorStateML getInstanceProcAddr_xrGetSpatialAnchorStateML() {
    XrResult result = populate_("xrGetSpatialAnchorStateML", pfnGetSpatialAnchorStateML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpatialAnchorStateML>(pfnGetSpatialAnchorStateML));
  }
  /*!
   * @brief Return the function pointer for xrGetSpatialAnchorStateML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialAnchorStateML
  getInstanceProcAddr_xrGetSpatialAnchorStateML() const {
    return (reinterpret_cast<PFN_xrGetSpatialAnchorStateML>(pfnGetSpatialAnchorStateML));
  }
#endif  // XR_ML_spatial_anchors

#ifdef XR_ML_spatial_anchors_storage
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorsStorageML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorsStorageML
  getInstanceProcAddr_xrCreateSpatialAnchorsStorageML() {
    XrResult result =
        populate_("xrCreateSpatialAnchorsStorageML", pfnCreateSpatialAnchorsStorageML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrCreateSpatialAnchorsStorageML>(pfnCreateSpatialAnchorsStorageML));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorsStorageML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorsStorageML
  getInstanceProcAddr_xrCreateSpatialAnchorsStorageML() const {
    return (
        reinterpret_cast<PFN_xrCreateSpatialAnchorsStorageML>(pfnCreateSpatialAnchorsStorageML));
  }
#endif  // XR_ML_spatial_anchors_storage

#ifdef XR_ML_spatial_anchors_storage
  /*!
   * @brief Return the function pointer for xrDestroySpatialAnchorsStorageML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialAnchorsStorageML
  getInstanceProcAddr_xrDestroySpatialAnchorsStorageML() {
    XrResult result =
        populate_("xrDestroySpatialAnchorsStorageML", pfnDestroySpatialAnchorsStorageML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrDestroySpatialAnchorsStorageML>(pfnDestroySpatialAnchorsStorageML));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpatialAnchorsStorageML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialAnchorsStorageML
  getInstanceProcAddr_xrDestroySpatialAnchorsStorageML() const {
    return (
        reinterpret_cast<PFN_xrDestroySpatialAnchorsStorageML>(pfnDestroySpatialAnchorsStorageML));
  }
#endif  // XR_ML_spatial_anchors_storage

#ifdef XR_ML_spatial_anchors_storage
  /*!
   * @brief Return the function pointer for xrQuerySpatialAnchorsAsyncML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrQuerySpatialAnchorsAsyncML
  getInstanceProcAddr_xrQuerySpatialAnchorsAsyncML() {
    XrResult result = populate_("xrQuerySpatialAnchorsAsyncML", pfnQuerySpatialAnchorsAsyncML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrQuerySpatialAnchorsAsyncML>(pfnQuerySpatialAnchorsAsyncML));
  }
  /*!
   * @brief Return the function pointer for xrQuerySpatialAnchorsAsyncML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrQuerySpatialAnchorsAsyncML
  getInstanceProcAddr_xrQuerySpatialAnchorsAsyncML() const {
    return (reinterpret_cast<PFN_xrQuerySpatialAnchorsAsyncML>(pfnQuerySpatialAnchorsAsyncML));
  }
#endif  // XR_ML_spatial_anchors_storage

#ifdef XR_ML_spatial_anchors_storage
  /*!
   * @brief Return the function pointer for xrQuerySpatialAnchorsCompleteML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrQuerySpatialAnchorsCompleteML
  getInstanceProcAddr_xrQuerySpatialAnchorsCompleteML() {
    XrResult result =
        populate_("xrQuerySpatialAnchorsCompleteML", pfnQuerySpatialAnchorsCompleteML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrQuerySpatialAnchorsCompleteML>(pfnQuerySpatialAnchorsCompleteML));
  }
  /*!
   * @brief Return the function pointer for xrQuerySpatialAnchorsCompleteML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrQuerySpatialAnchorsCompleteML
  getInstanceProcAddr_xrQuerySpatialAnchorsCompleteML() const {
    return (
        reinterpret_cast<PFN_xrQuerySpatialAnchorsCompleteML>(pfnQuerySpatialAnchorsCompleteML));
  }
#endif  // XR_ML_spatial_anchors_storage

#ifdef XR_ML_spatial_anchors_storage
  /*!
   * @brief Return the function pointer for xrPublishSpatialAnchorsAsyncML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPublishSpatialAnchorsAsyncML
  getInstanceProcAddr_xrPublishSpatialAnchorsAsyncML() {
    XrResult result = populate_("xrPublishSpatialAnchorsAsyncML", pfnPublishSpatialAnchorsAsyncML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPublishSpatialAnchorsAsyncML>(pfnPublishSpatialAnchorsAsyncML));
  }
  /*!
   * @brief Return the function pointer for xrPublishSpatialAnchorsAsyncML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPublishSpatialAnchorsAsyncML
  getInstanceProcAddr_xrPublishSpatialAnchorsAsyncML() const {
    return (reinterpret_cast<PFN_xrPublishSpatialAnchorsAsyncML>(pfnPublishSpatialAnchorsAsyncML));
  }
#endif  // XR_ML_spatial_anchors_storage

#ifdef XR_ML_spatial_anchors_storage
  /*!
   * @brief Return the function pointer for xrPublishSpatialAnchorsCompleteML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPublishSpatialAnchorsCompleteML
  getInstanceProcAddr_xrPublishSpatialAnchorsCompleteML() {
    XrResult result =
        populate_("xrPublishSpatialAnchorsCompleteML", pfnPublishSpatialAnchorsCompleteML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPublishSpatialAnchorsCompleteML>(
        pfnPublishSpatialAnchorsCompleteML));
  }
  /*!
   * @brief Return the function pointer for xrPublishSpatialAnchorsCompleteML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPublishSpatialAnchorsCompleteML
  getInstanceProcAddr_xrPublishSpatialAnchorsCompleteML() const {
    return (reinterpret_cast<PFN_xrPublishSpatialAnchorsCompleteML>(
        pfnPublishSpatialAnchorsCompleteML));
  }
#endif  // XR_ML_spatial_anchors_storage

#ifdef XR_ML_spatial_anchors_storage
  /*!
   * @brief Return the function pointer for xrDeleteSpatialAnchorsAsyncML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDeleteSpatialAnchorsAsyncML
  getInstanceProcAddr_xrDeleteSpatialAnchorsAsyncML() {
    XrResult result = populate_("xrDeleteSpatialAnchorsAsyncML", pfnDeleteSpatialAnchorsAsyncML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDeleteSpatialAnchorsAsyncML>(pfnDeleteSpatialAnchorsAsyncML));
  }
  /*!
   * @brief Return the function pointer for xrDeleteSpatialAnchorsAsyncML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDeleteSpatialAnchorsAsyncML
  getInstanceProcAddr_xrDeleteSpatialAnchorsAsyncML() const {
    return (reinterpret_cast<PFN_xrDeleteSpatialAnchorsAsyncML>(pfnDeleteSpatialAnchorsAsyncML));
  }
#endif  // XR_ML_spatial_anchors_storage

#ifdef XR_ML_spatial_anchors_storage
  /*!
   * @brief Return the function pointer for xrDeleteSpatialAnchorsCompleteML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDeleteSpatialAnchorsCompleteML
  getInstanceProcAddr_xrDeleteSpatialAnchorsCompleteML() {
    XrResult result =
        populate_("xrDeleteSpatialAnchorsCompleteML", pfnDeleteSpatialAnchorsCompleteML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrDeleteSpatialAnchorsCompleteML>(pfnDeleteSpatialAnchorsCompleteML));
  }
  /*!
   * @brief Return the function pointer for xrDeleteSpatialAnchorsCompleteML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDeleteSpatialAnchorsCompleteML
  getInstanceProcAddr_xrDeleteSpatialAnchorsCompleteML() const {
    return (
        reinterpret_cast<PFN_xrDeleteSpatialAnchorsCompleteML>(pfnDeleteSpatialAnchorsCompleteML));
  }
#endif  // XR_ML_spatial_anchors_storage

#ifdef XR_ML_spatial_anchors_storage
  /*!
   * @brief Return the function pointer for xrUpdateSpatialAnchorsExpirationAsyncML, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrUpdateSpatialAnchorsExpirationAsyncML
  getInstanceProcAddr_xrUpdateSpatialAnchorsExpirationAsyncML() {
    XrResult result = populate_("xrUpdateSpatialAnchorsExpirationAsyncML",
                                pfnUpdateSpatialAnchorsExpirationAsyncML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrUpdateSpatialAnchorsExpirationAsyncML>(
        pfnUpdateSpatialAnchorsExpirationAsyncML));
  }
  /*!
   * @brief Return the function pointer for xrUpdateSpatialAnchorsExpirationAsyncML (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUpdateSpatialAnchorsExpirationAsyncML
  getInstanceProcAddr_xrUpdateSpatialAnchorsExpirationAsyncML() const {
    return (reinterpret_cast<PFN_xrUpdateSpatialAnchorsExpirationAsyncML>(
        pfnUpdateSpatialAnchorsExpirationAsyncML));
  }
#endif  // XR_ML_spatial_anchors_storage

#ifdef XR_ML_spatial_anchors_storage
  /*!
   * @brief Return the function pointer for xrUpdateSpatialAnchorsExpirationCompleteML, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrUpdateSpatialAnchorsExpirationCompleteML
  getInstanceProcAddr_xrUpdateSpatialAnchorsExpirationCompleteML() {
    XrResult result = populate_("xrUpdateSpatialAnchorsExpirationCompleteML",
                                pfnUpdateSpatialAnchorsExpirationCompleteML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrUpdateSpatialAnchorsExpirationCompleteML>(
        pfnUpdateSpatialAnchorsExpirationCompleteML));
  }
  /*!
   * @brief Return the function pointer for xrUpdateSpatialAnchorsExpirationCompleteML (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUpdateSpatialAnchorsExpirationCompleteML
  getInstanceProcAddr_xrUpdateSpatialAnchorsExpirationCompleteML() const {
    return (reinterpret_cast<PFN_xrUpdateSpatialAnchorsExpirationCompleteML>(
        pfnUpdateSpatialAnchorsExpirationCompleteML));
  }
#endif  // XR_ML_spatial_anchors_storage

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorStoreConnectionMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorStoreConnectionMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorStoreConnectionMSFT() {
    XrResult result = populate_("xrCreateSpatialAnchorStoreConnectionMSFT",
                                pfnCreateSpatialAnchorStoreConnectionMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorStoreConnectionMSFT>(
        pfnCreateSpatialAnchorStoreConnectionMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorStoreConnectionMSFT (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorStoreConnectionMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorStoreConnectionMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorStoreConnectionMSFT>(
        pfnCreateSpatialAnchorStoreConnectionMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrDestroySpatialAnchorStoreConnectionMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialAnchorStoreConnectionMSFT
  getInstanceProcAddr_xrDestroySpatialAnchorStoreConnectionMSFT() {
    XrResult result = populate_("xrDestroySpatialAnchorStoreConnectionMSFT",
                                pfnDestroySpatialAnchorStoreConnectionMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialAnchorStoreConnectionMSFT>(
        pfnDestroySpatialAnchorStoreConnectionMSFT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpatialAnchorStoreConnectionMSFT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialAnchorStoreConnectionMSFT
  getInstanceProcAddr_xrDestroySpatialAnchorStoreConnectionMSFT() const {
    return (reinterpret_cast<PFN_xrDestroySpatialAnchorStoreConnectionMSFT>(
        pfnDestroySpatialAnchorStoreConnectionMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrPersistSpatialAnchorMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrPersistSpatialAnchorMSFT
  getInstanceProcAddr_xrPersistSpatialAnchorMSFT() {
    XrResult result = populate_("xrPersistSpatialAnchorMSFT", pfnPersistSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPersistSpatialAnchorMSFT>(pfnPersistSpatialAnchorMSFT));
  }
  /*!
   * @brief Return the function pointer for xrPersistSpatialAnchorMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPersistSpatialAnchorMSFT
  getInstanceProcAddr_xrPersistSpatialAnchorMSFT() const {
    return (reinterpret_cast<PFN_xrPersistSpatialAnchorMSFT>(pfnPersistSpatialAnchorMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrEnumeratePersistedSpatialAnchorNamesMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT
  getInstanceProcAddr_xrEnumeratePersistedSpatialAnchorNamesMSFT() {
    XrResult result = populate_("xrEnumeratePersistedSpatialAnchorNamesMSFT",
                                pfnEnumeratePersistedSpatialAnchorNamesMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT>(
        pfnEnumeratePersistedSpatialAnchorNamesMSFT));
  }
  /*!
   * @brief Return the function pointer for xrEnumeratePersistedSpatialAnchorNamesMSFT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT
  getInstanceProcAddr_xrEnumeratePersistedSpatialAnchorNamesMSFT() const {
    return (reinterpret_cast<PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT>(
        pfnEnumeratePersistedSpatialAnchorNamesMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorFromPersistedNameMSFT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorFromPersistedNameMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorFromPersistedNameMSFT() {
    XrResult result = populate_("xrCreateSpatialAnchorFromPersistedNameMSFT",
                                pfnCreateSpatialAnchorFromPersistedNameMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPersistedNameMSFT>(
        pfnCreateSpatialAnchorFromPersistedNameMSFT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorFromPersistedNameMSFT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorFromPersistedNameMSFT
  getInstanceProcAddr_xrCreateSpatialAnchorFromPersistedNameMSFT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorFromPersistedNameMSFT>(
        pfnCreateSpatialAnchorFromPersistedNameMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrUnpersistSpatialAnchorMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrUnpersistSpatialAnchorMSFT
  getInstanceProcAddr_xrUnpersistSpatialAnchorMSFT() {
    XrResult result = populate_("xrUnpersistSpatialAnchorMSFT", pfnUnpersistSpatialAnchorMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorMSFT>(pfnUnpersistSpatialAnchorMSFT));
  }
  /*!
   * @brief Return the function pointer for xrUnpersistSpatialAnchorMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUnpersistSpatialAnchorMSFT
  getInstanceProcAddr_xrUnpersistSpatialAnchorMSFT() const {
    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorMSFT>(pfnUnpersistSpatialAnchorMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_spatial_anchor_persistence
  /*!
   * @brief Return the function pointer for xrClearSpatialAnchorStoreMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrClearSpatialAnchorStoreMSFT
  getInstanceProcAddr_xrClearSpatialAnchorStoreMSFT() {
    XrResult result = populate_("xrClearSpatialAnchorStoreMSFT", pfnClearSpatialAnchorStoreMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrClearSpatialAnchorStoreMSFT>(pfnClearSpatialAnchorStoreMSFT));
  }
  /*!
   * @brief Return the function pointer for xrClearSpatialAnchorStoreMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrClearSpatialAnchorStoreMSFT
  getInstanceProcAddr_xrClearSpatialAnchorStoreMSFT() const {
    return (reinterpret_cast<PFN_xrClearSpatialAnchorStoreMSFT>(pfnClearSpatialAnchorStoreMSFT));
  }
#endif  // XR_MSFT_spatial_anchor_persistence

#ifdef XR_MSFT_scene_marker
  /*!
   * @brief Return the function pointer for xrGetSceneMarkerRawDataMSFT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneMarkerRawDataMSFT
  getInstanceProcAddr_xrGetSceneMarkerRawDataMSFT() {
    XrResult result = populate_("xrGetSceneMarkerRawDataMSFT", pfnGetSceneMarkerRawDataMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSceneMarkerRawDataMSFT>(pfnGetSceneMarkerRawDataMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetSceneMarkerRawDataMSFT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneMarkerRawDataMSFT
  getInstanceProcAddr_xrGetSceneMarkerRawDataMSFT() const {
    return (reinterpret_cast<PFN_xrGetSceneMarkerRawDataMSFT>(pfnGetSceneMarkerRawDataMSFT));
  }
#endif  // XR_MSFT_scene_marker

#ifdef XR_MSFT_scene_marker
  /*!
   * @brief Return the function pointer for xrGetSceneMarkerDecodedStringMSFT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneMarkerDecodedStringMSFT
  getInstanceProcAddr_xrGetSceneMarkerDecodedStringMSFT() {
    XrResult result =
        populate_("xrGetSceneMarkerDecodedStringMSFT", pfnGetSceneMarkerDecodedStringMSFT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSceneMarkerDecodedStringMSFT>(
        pfnGetSceneMarkerDecodedStringMSFT));
  }
  /*!
   * @brief Return the function pointer for xrGetSceneMarkerDecodedStringMSFT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSceneMarkerDecodedStringMSFT
  getInstanceProcAddr_xrGetSceneMarkerDecodedStringMSFT() const {
    return (reinterpret_cast<PFN_xrGetSceneMarkerDecodedStringMSFT>(
        pfnGetSceneMarkerDecodedStringMSFT));
  }
#endif  // XR_MSFT_scene_marker

#ifdef XR_FB_spatial_entity_query
  /*!
   * @brief Return the function pointer for xrQuerySpacesFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrQuerySpacesFB getInstanceProcAddr_xrQuerySpacesFB() {
    XrResult result = populate_("xrQuerySpacesFB", pfnQuerySpacesFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrQuerySpacesFB>(pfnQuerySpacesFB));
  }
  /*!
   * @brief Return the function pointer for xrQuerySpacesFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrQuerySpacesFB getInstanceProcAddr_xrQuerySpacesFB() const {
    return (reinterpret_cast<PFN_xrQuerySpacesFB>(pfnQuerySpacesFB));
  }
#endif  // XR_FB_spatial_entity_query

#ifdef XR_FB_spatial_entity_query
  /*!
   * @brief Return the function pointer for xrRetrieveSpaceQueryResultsFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrRetrieveSpaceQueryResultsFB
  getInstanceProcAddr_xrRetrieveSpaceQueryResultsFB() {
    XrResult result = populate_("xrRetrieveSpaceQueryResultsFB", pfnRetrieveSpaceQueryResultsFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrRetrieveSpaceQueryResultsFB>(pfnRetrieveSpaceQueryResultsFB));
  }
  /*!
   * @brief Return the function pointer for xrRetrieveSpaceQueryResultsFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrRetrieveSpaceQueryResultsFB
  getInstanceProcAddr_xrRetrieveSpaceQueryResultsFB() const {
    return (reinterpret_cast<PFN_xrRetrieveSpaceQueryResultsFB>(pfnRetrieveSpaceQueryResultsFB));
  }
#endif  // XR_FB_spatial_entity_query

#ifdef XR_FB_spatial_entity_storage
  /*!
   * @brief Return the function pointer for xrSaveSpaceFB, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSaveSpaceFB getInstanceProcAddr_xrSaveSpaceFB() {
    XrResult result = populate_("xrSaveSpaceFB", pfnSaveSpaceFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSaveSpaceFB>(pfnSaveSpaceFB));
  }
  /*!
   * @brief Return the function pointer for xrSaveSpaceFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSaveSpaceFB getInstanceProcAddr_xrSaveSpaceFB() const {
    return (reinterpret_cast<PFN_xrSaveSpaceFB>(pfnSaveSpaceFB));
  }
#endif  // XR_FB_spatial_entity_storage

#ifdef XR_FB_spatial_entity_storage
  /*!
   * @brief Return the function pointer for xrEraseSpaceFB, populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEraseSpaceFB getInstanceProcAddr_xrEraseSpaceFB() {
    XrResult result = populate_("xrEraseSpaceFB", pfnEraseSpaceFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEraseSpaceFB>(pfnEraseSpaceFB));
  }
  /*!
   * @brief Return the function pointer for xrEraseSpaceFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEraseSpaceFB getInstanceProcAddr_xrEraseSpaceFB() const {
    return (reinterpret_cast<PFN_xrEraseSpaceFB>(pfnEraseSpaceFB));
  }
#endif  // XR_FB_spatial_entity_storage

#ifdef XR_OCULUS_audio_device_guid
#if defined(XR_USE_PLATFORM_WIN32)
  /*!
   * @brief Return the function pointer for xrGetAudioOutputDeviceGuidOculus, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetAudioOutputDeviceGuidOculus
  getInstanceProcAddr_xrGetAudioOutputDeviceGuidOculus() {
    XrResult result =
        populate_("xrGetAudioOutputDeviceGuidOculus", pfnGetAudioOutputDeviceGuidOculus);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrGetAudioOutputDeviceGuidOculus>(pfnGetAudioOutputDeviceGuidOculus));
  }
  /*!
   * @brief Return the function pointer for xrGetAudioOutputDeviceGuidOculus (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetAudioOutputDeviceGuidOculus
  getInstanceProcAddr_xrGetAudioOutputDeviceGuidOculus() const {
    return (
        reinterpret_cast<PFN_xrGetAudioOutputDeviceGuidOculus>(pfnGetAudioOutputDeviceGuidOculus));
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_OCULUS_audio_device_guid

#ifdef XR_OCULUS_audio_device_guid
#if defined(XR_USE_PLATFORM_WIN32)
  /*!
   * @brief Return the function pointer for xrGetAudioInputDeviceGuidOculus, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetAudioInputDeviceGuidOculus
  getInstanceProcAddr_xrGetAudioInputDeviceGuidOculus() {
    XrResult result =
        populate_("xrGetAudioInputDeviceGuidOculus", pfnGetAudioInputDeviceGuidOculus);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrGetAudioInputDeviceGuidOculus>(pfnGetAudioInputDeviceGuidOculus));
  }
  /*!
   * @brief Return the function pointer for xrGetAudioInputDeviceGuidOculus (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetAudioInputDeviceGuidOculus
  getInstanceProcAddr_xrGetAudioInputDeviceGuidOculus() const {
    return (
        reinterpret_cast<PFN_xrGetAudioInputDeviceGuidOculus>(pfnGetAudioInputDeviceGuidOculus));
  }
#endif  // defined(XR_USE_PLATFORM_WIN32)
#endif  // XR_OCULUS_audio_device_guid

#ifdef XR_FB_spatial_entity_sharing
  /*!
   * @brief Return the function pointer for xrShareSpacesFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrShareSpacesFB getInstanceProcAddr_xrShareSpacesFB() {
    XrResult result = populate_("xrShareSpacesFB", pfnShareSpacesFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrShareSpacesFB>(pfnShareSpacesFB));
  }
  /*!
   * @brief Return the function pointer for xrShareSpacesFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrShareSpacesFB getInstanceProcAddr_xrShareSpacesFB() const {
    return (reinterpret_cast<PFN_xrShareSpacesFB>(pfnShareSpacesFB));
  }
#endif  // XR_FB_spatial_entity_sharing

#ifdef XR_FB_scene
  /*!
   * @brief Return the function pointer for xrGetSpaceBoundingBox2DFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceBoundingBox2DFB getInstanceProcAddr_xrGetSpaceBoundingBox2DFB() {
    XrResult result = populate_("xrGetSpaceBoundingBox2DFB", pfnGetSpaceBoundingBox2DFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpaceBoundingBox2DFB>(pfnGetSpaceBoundingBox2DFB));
  }
  /*!
   * @brief Return the function pointer for xrGetSpaceBoundingBox2DFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceBoundingBox2DFB
  getInstanceProcAddr_xrGetSpaceBoundingBox2DFB() const {
    return (reinterpret_cast<PFN_xrGetSpaceBoundingBox2DFB>(pfnGetSpaceBoundingBox2DFB));
  }
#endif  // XR_FB_scene

#ifdef XR_FB_scene
  /*!
   * @brief Return the function pointer for xrGetSpaceBoundingBox3DFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceBoundingBox3DFB getInstanceProcAddr_xrGetSpaceBoundingBox3DFB() {
    XrResult result = populate_("xrGetSpaceBoundingBox3DFB", pfnGetSpaceBoundingBox3DFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpaceBoundingBox3DFB>(pfnGetSpaceBoundingBox3DFB));
  }
  /*!
   * @brief Return the function pointer for xrGetSpaceBoundingBox3DFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceBoundingBox3DFB
  getInstanceProcAddr_xrGetSpaceBoundingBox3DFB() const {
    return (reinterpret_cast<PFN_xrGetSpaceBoundingBox3DFB>(pfnGetSpaceBoundingBox3DFB));
  }
#endif  // XR_FB_scene

#ifdef XR_FB_scene
  /*!
   * @brief Return the function pointer for xrGetSpaceSemanticLabelsFB, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceSemanticLabelsFB
  getInstanceProcAddr_xrGetSpaceSemanticLabelsFB() {
    XrResult result = populate_("xrGetSpaceSemanticLabelsFB", pfnGetSpaceSemanticLabelsFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpaceSemanticLabelsFB>(pfnGetSpaceSemanticLabelsFB));
  }
  /*!
   * @brief Return the function pointer for xrGetSpaceSemanticLabelsFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceSemanticLabelsFB
  getInstanceProcAddr_xrGetSpaceSemanticLabelsFB() const {
    return (reinterpret_cast<PFN_xrGetSpaceSemanticLabelsFB>(pfnGetSpaceSemanticLabelsFB));
  }
#endif  // XR_FB_scene

#ifdef XR_FB_scene
  /*!
   * @brief Return the function pointer for xrGetSpaceBoundary2DFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceBoundary2DFB getInstanceProcAddr_xrGetSpaceBoundary2DFB() {
    XrResult result = populate_("xrGetSpaceBoundary2DFB", pfnGetSpaceBoundary2DFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpaceBoundary2DFB>(pfnGetSpaceBoundary2DFB));
  }
  /*!
   * @brief Return the function pointer for xrGetSpaceBoundary2DFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceBoundary2DFB getInstanceProcAddr_xrGetSpaceBoundary2DFB() const {
    return (reinterpret_cast<PFN_xrGetSpaceBoundary2DFB>(pfnGetSpaceBoundary2DFB));
  }
#endif  // XR_FB_scene

#ifdef XR_FB_scene
  /*!
   * @brief Return the function pointer for xrGetSpaceRoomLayoutFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceRoomLayoutFB getInstanceProcAddr_xrGetSpaceRoomLayoutFB() {
    XrResult result = populate_("xrGetSpaceRoomLayoutFB", pfnGetSpaceRoomLayoutFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpaceRoomLayoutFB>(pfnGetSpaceRoomLayoutFB));
  }
  /*!
   * @brief Return the function pointer for xrGetSpaceRoomLayoutFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceRoomLayoutFB getInstanceProcAddr_xrGetSpaceRoomLayoutFB() const {
    return (reinterpret_cast<PFN_xrGetSpaceRoomLayoutFB>(pfnGetSpaceRoomLayoutFB));
  }
#endif  // XR_FB_scene

#ifdef XR_ALMALENCE_digital_lens_control
  /*!
   * @brief Return the function pointer for xrSetDigitalLensControlALMALENCE, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetDigitalLensControlALMALENCE
  getInstanceProcAddr_xrSetDigitalLensControlALMALENCE() {
    XrResult result =
        populate_("xrSetDigitalLensControlALMALENCE", pfnSetDigitalLensControlALMALENCE);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrSetDigitalLensControlALMALENCE>(pfnSetDigitalLensControlALMALENCE));
  }
  /*!
   * @brief Return the function pointer for xrSetDigitalLensControlALMALENCE (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetDigitalLensControlALMALENCE
  getInstanceProcAddr_xrSetDigitalLensControlALMALENCE() const {
    return (
        reinterpret_cast<PFN_xrSetDigitalLensControlALMALENCE>(pfnSetDigitalLensControlALMALENCE));
  }
#endif  // XR_ALMALENCE_digital_lens_control

#ifdef XR_FB_scene_capture
  /*!
   * @brief Return the function pointer for xrRequestSceneCaptureFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrRequestSceneCaptureFB getInstanceProcAddr_xrRequestSceneCaptureFB() {
    XrResult result = populate_("xrRequestSceneCaptureFB", pfnRequestSceneCaptureFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrRequestSceneCaptureFB>(pfnRequestSceneCaptureFB));
  }
  /*!
   * @brief Return the function pointer for xrRequestSceneCaptureFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrRequestSceneCaptureFB
  getInstanceProcAddr_xrRequestSceneCaptureFB() const {
    return (reinterpret_cast<PFN_xrRequestSceneCaptureFB>(pfnRequestSceneCaptureFB));
  }
#endif  // XR_FB_scene_capture

#ifdef XR_FB_spatial_entity_container
  /*!
   * @brief Return the function pointer for xrGetSpaceContainerFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceContainerFB getInstanceProcAddr_xrGetSpaceContainerFB() {
    XrResult result = populate_("xrGetSpaceContainerFB", pfnGetSpaceContainerFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpaceContainerFB>(pfnGetSpaceContainerFB));
  }
  /*!
   * @brief Return the function pointer for xrGetSpaceContainerFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceContainerFB getInstanceProcAddr_xrGetSpaceContainerFB() const {
    return (reinterpret_cast<PFN_xrGetSpaceContainerFB>(pfnGetSpaceContainerFB));
  }
#endif  // XR_FB_spatial_entity_container

#ifdef XR_META_foveation_eye_tracked
  /*!
   * @brief Return the function pointer for xrGetFoveationEyeTrackedStateMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetFoveationEyeTrackedStateMETA
  getInstanceProcAddr_xrGetFoveationEyeTrackedStateMETA() {
    XrResult result =
        populate_("xrGetFoveationEyeTrackedStateMETA", pfnGetFoveationEyeTrackedStateMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetFoveationEyeTrackedStateMETA>(
        pfnGetFoveationEyeTrackedStateMETA));
  }
  /*!
   * @brief Return the function pointer for xrGetFoveationEyeTrackedStateMETA (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetFoveationEyeTrackedStateMETA
  getInstanceProcAddr_xrGetFoveationEyeTrackedStateMETA() const {
    return (reinterpret_cast<PFN_xrGetFoveationEyeTrackedStateMETA>(
        pfnGetFoveationEyeTrackedStateMETA));
  }
#endif  // XR_META_foveation_eye_tracked

#ifdef XR_FB_face_tracking
  /*!
   * @brief Return the function pointer for xrCreateFaceTrackerFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateFaceTrackerFB getInstanceProcAddr_xrCreateFaceTrackerFB() {
    XrResult result = populate_("xrCreateFaceTrackerFB", pfnCreateFaceTrackerFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateFaceTrackerFB>(pfnCreateFaceTrackerFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateFaceTrackerFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateFaceTrackerFB getInstanceProcAddr_xrCreateFaceTrackerFB() const {
    return (reinterpret_cast<PFN_xrCreateFaceTrackerFB>(pfnCreateFaceTrackerFB));
  }
#endif  // XR_FB_face_tracking

#ifdef XR_FB_face_tracking
  /*!
   * @brief Return the function pointer for xrDestroyFaceTrackerFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFaceTrackerFB getInstanceProcAddr_xrDestroyFaceTrackerFB() {
    XrResult result = populate_("xrDestroyFaceTrackerFB", pfnDestroyFaceTrackerFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyFaceTrackerFB>(pfnDestroyFaceTrackerFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyFaceTrackerFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFaceTrackerFB getInstanceProcAddr_xrDestroyFaceTrackerFB() const {
    return (reinterpret_cast<PFN_xrDestroyFaceTrackerFB>(pfnDestroyFaceTrackerFB));
  }
#endif  // XR_FB_face_tracking

#ifdef XR_FB_face_tracking
  /*!
   * @brief Return the function pointer for xrGetFaceExpressionWeightsFB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetFaceExpressionWeightsFB
  getInstanceProcAddr_xrGetFaceExpressionWeightsFB() {
    XrResult result = populate_("xrGetFaceExpressionWeightsFB", pfnGetFaceExpressionWeightsFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetFaceExpressionWeightsFB>(pfnGetFaceExpressionWeightsFB));
  }
  /*!
   * @brief Return the function pointer for xrGetFaceExpressionWeightsFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetFaceExpressionWeightsFB
  getInstanceProcAddr_xrGetFaceExpressionWeightsFB() const {
    return (reinterpret_cast<PFN_xrGetFaceExpressionWeightsFB>(pfnGetFaceExpressionWeightsFB));
  }
#endif  // XR_FB_face_tracking

#ifdef XR_FB_eye_tracking_social
  /*!
   * @brief Return the function pointer for xrCreateEyeTrackerFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateEyeTrackerFB getInstanceProcAddr_xrCreateEyeTrackerFB() {
    XrResult result = populate_("xrCreateEyeTrackerFB", pfnCreateEyeTrackerFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateEyeTrackerFB>(pfnCreateEyeTrackerFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateEyeTrackerFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateEyeTrackerFB getInstanceProcAddr_xrCreateEyeTrackerFB() const {
    return (reinterpret_cast<PFN_xrCreateEyeTrackerFB>(pfnCreateEyeTrackerFB));
  }
#endif  // XR_FB_eye_tracking_social

#ifdef XR_FB_eye_tracking_social
  /*!
   * @brief Return the function pointer for xrDestroyEyeTrackerFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyEyeTrackerFB getInstanceProcAddr_xrDestroyEyeTrackerFB() {
    XrResult result = populate_("xrDestroyEyeTrackerFB", pfnDestroyEyeTrackerFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyEyeTrackerFB>(pfnDestroyEyeTrackerFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyEyeTrackerFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyEyeTrackerFB getInstanceProcAddr_xrDestroyEyeTrackerFB() const {
    return (reinterpret_cast<PFN_xrDestroyEyeTrackerFB>(pfnDestroyEyeTrackerFB));
  }
#endif  // XR_FB_eye_tracking_social

#ifdef XR_FB_eye_tracking_social
  /*!
   * @brief Return the function pointer for xrGetEyeGazesFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetEyeGazesFB getInstanceProcAddr_xrGetEyeGazesFB() {
    XrResult result = populate_("xrGetEyeGazesFB", pfnGetEyeGazesFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetEyeGazesFB>(pfnGetEyeGazesFB));
  }
  /*!
   * @brief Return the function pointer for xrGetEyeGazesFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetEyeGazesFB getInstanceProcAddr_xrGetEyeGazesFB() const {
    return (reinterpret_cast<PFN_xrGetEyeGazesFB>(pfnGetEyeGazesFB));
  }
#endif  // XR_FB_eye_tracking_social

#ifdef XR_FB_passthrough_keyboard_hands
  /*!
   * @brief Return the function pointer for xrPassthroughLayerSetKeyboardHandsIntensityFB,
   * populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB
  getInstanceProcAddr_xrPassthroughLayerSetKeyboardHandsIntensityFB() {
    XrResult result = populate_("xrPassthroughLayerSetKeyboardHandsIntensityFB",
                                pfnPassthroughLayerSetKeyboardHandsIntensityFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB>(
        pfnPassthroughLayerSetKeyboardHandsIntensityFB));
  }
  /*!
   * @brief Return the function pointer for xrPassthroughLayerSetKeyboardHandsIntensityFB (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB
  getInstanceProcAddr_xrPassthroughLayerSetKeyboardHandsIntensityFB() const {
    return (reinterpret_cast<PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB>(
        pfnPassthroughLayerSetKeyboardHandsIntensityFB));
  }
#endif  // XR_FB_passthrough_keyboard_hands

#ifdef XR_FB_haptic_pcm
  /*!
   * @brief Return the function pointer for xrGetDeviceSampleRateFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetDeviceSampleRateFB getInstanceProcAddr_xrGetDeviceSampleRateFB() {
    XrResult result = populate_("xrGetDeviceSampleRateFB", pfnGetDeviceSampleRateFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetDeviceSampleRateFB>(pfnGetDeviceSampleRateFB));
  }
  /*!
   * @brief Return the function pointer for xrGetDeviceSampleRateFB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetDeviceSampleRateFB
  getInstanceProcAddr_xrGetDeviceSampleRateFB() const {
    return (reinterpret_cast<PFN_xrGetDeviceSampleRateFB>(pfnGetDeviceSampleRateFB));
  }
#endif  // XR_FB_haptic_pcm

#ifdef XR_META_passthrough_preferences
  /*!
   * @brief Return the function pointer for xrGetPassthroughPreferencesMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetPassthroughPreferencesMETA
  getInstanceProcAddr_xrGetPassthroughPreferencesMETA() {
    XrResult result =
        populate_("xrGetPassthroughPreferencesMETA", pfnGetPassthroughPreferencesMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrGetPassthroughPreferencesMETA>(pfnGetPassthroughPreferencesMETA));
  }
  /*!
   * @brief Return the function pointer for xrGetPassthroughPreferencesMETA (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetPassthroughPreferencesMETA
  getInstanceProcAddr_xrGetPassthroughPreferencesMETA() const {
    return (
        reinterpret_cast<PFN_xrGetPassthroughPreferencesMETA>(pfnGetPassthroughPreferencesMETA));
  }
#endif  // XR_META_passthrough_preferences

#ifdef XR_META_virtual_keyboard
  /*!
   * @brief Return the function pointer for xrCreateVirtualKeyboardMETA, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateVirtualKeyboardMETA
  getInstanceProcAddr_xrCreateVirtualKeyboardMETA() {
    XrResult result = populate_("xrCreateVirtualKeyboardMETA", pfnCreateVirtualKeyboardMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateVirtualKeyboardMETA>(pfnCreateVirtualKeyboardMETA));
  }
  /*!
   * @brief Return the function pointer for xrCreateVirtualKeyboardMETA (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateVirtualKeyboardMETA
  getInstanceProcAddr_xrCreateVirtualKeyboardMETA() const {
    return (reinterpret_cast<PFN_xrCreateVirtualKeyboardMETA>(pfnCreateVirtualKeyboardMETA));
  }
#endif  // XR_META_virtual_keyboard

#ifdef XR_META_virtual_keyboard
  /*!
   * @brief Return the function pointer for xrDestroyVirtualKeyboardMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyVirtualKeyboardMETA
  getInstanceProcAddr_xrDestroyVirtualKeyboardMETA() {
    XrResult result = populate_("xrDestroyVirtualKeyboardMETA", pfnDestroyVirtualKeyboardMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyVirtualKeyboardMETA>(pfnDestroyVirtualKeyboardMETA));
  }
  /*!
   * @brief Return the function pointer for xrDestroyVirtualKeyboardMETA (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyVirtualKeyboardMETA
  getInstanceProcAddr_xrDestroyVirtualKeyboardMETA() const {
    return (reinterpret_cast<PFN_xrDestroyVirtualKeyboardMETA>(pfnDestroyVirtualKeyboardMETA));
  }
#endif  // XR_META_virtual_keyboard

#ifdef XR_META_virtual_keyboard
  /*!
   * @brief Return the function pointer for xrCreateVirtualKeyboardSpaceMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateVirtualKeyboardSpaceMETA
  getInstanceProcAddr_xrCreateVirtualKeyboardSpaceMETA() {
    XrResult result =
        populate_("xrCreateVirtualKeyboardSpaceMETA", pfnCreateVirtualKeyboardSpaceMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrCreateVirtualKeyboardSpaceMETA>(pfnCreateVirtualKeyboardSpaceMETA));
  }
  /*!
   * @brief Return the function pointer for xrCreateVirtualKeyboardSpaceMETA (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateVirtualKeyboardSpaceMETA
  getInstanceProcAddr_xrCreateVirtualKeyboardSpaceMETA() const {
    return (
        reinterpret_cast<PFN_xrCreateVirtualKeyboardSpaceMETA>(pfnCreateVirtualKeyboardSpaceMETA));
  }
#endif  // XR_META_virtual_keyboard

#ifdef XR_META_virtual_keyboard
  /*!
   * @brief Return the function pointer for xrSuggestVirtualKeyboardLocationMETA, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSuggestVirtualKeyboardLocationMETA
  getInstanceProcAddr_xrSuggestVirtualKeyboardLocationMETA() {
    XrResult result =
        populate_("xrSuggestVirtualKeyboardLocationMETA", pfnSuggestVirtualKeyboardLocationMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSuggestVirtualKeyboardLocationMETA>(
        pfnSuggestVirtualKeyboardLocationMETA));
  }
  /*!
   * @brief Return the function pointer for xrSuggestVirtualKeyboardLocationMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSuggestVirtualKeyboardLocationMETA
  getInstanceProcAddr_xrSuggestVirtualKeyboardLocationMETA() const {
    return (reinterpret_cast<PFN_xrSuggestVirtualKeyboardLocationMETA>(
        pfnSuggestVirtualKeyboardLocationMETA));
  }
#endif  // XR_META_virtual_keyboard

#ifdef XR_META_virtual_keyboard
  /*!
   * @brief Return the function pointer for xrGetVirtualKeyboardScaleMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVirtualKeyboardScaleMETA
  getInstanceProcAddr_xrGetVirtualKeyboardScaleMETA() {
    XrResult result = populate_("xrGetVirtualKeyboardScaleMETA", pfnGetVirtualKeyboardScaleMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVirtualKeyboardScaleMETA>(pfnGetVirtualKeyboardScaleMETA));
  }
  /*!
   * @brief Return the function pointer for xrGetVirtualKeyboardScaleMETA (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVirtualKeyboardScaleMETA
  getInstanceProcAddr_xrGetVirtualKeyboardScaleMETA() const {
    return (reinterpret_cast<PFN_xrGetVirtualKeyboardScaleMETA>(pfnGetVirtualKeyboardScaleMETA));
  }
#endif  // XR_META_virtual_keyboard

#ifdef XR_META_virtual_keyboard
  /*!
   * @brief Return the function pointer for xrSetVirtualKeyboardModelVisibilityMETA, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetVirtualKeyboardModelVisibilityMETA
  getInstanceProcAddr_xrSetVirtualKeyboardModelVisibilityMETA() {
    XrResult result = populate_("xrSetVirtualKeyboardModelVisibilityMETA",
                                pfnSetVirtualKeyboardModelVisibilityMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetVirtualKeyboardModelVisibilityMETA>(
        pfnSetVirtualKeyboardModelVisibilityMETA));
  }
  /*!
   * @brief Return the function pointer for xrSetVirtualKeyboardModelVisibilityMETA (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetVirtualKeyboardModelVisibilityMETA
  getInstanceProcAddr_xrSetVirtualKeyboardModelVisibilityMETA() const {
    return (reinterpret_cast<PFN_xrSetVirtualKeyboardModelVisibilityMETA>(
        pfnSetVirtualKeyboardModelVisibilityMETA));
  }
#endif  // XR_META_virtual_keyboard

#ifdef XR_META_virtual_keyboard
  /*!
   * @brief Return the function pointer for xrGetVirtualKeyboardModelAnimationStatesMETA, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVirtualKeyboardModelAnimationStatesMETA
  getInstanceProcAddr_xrGetVirtualKeyboardModelAnimationStatesMETA() {
    XrResult result = populate_("xrGetVirtualKeyboardModelAnimationStatesMETA",
                                pfnGetVirtualKeyboardModelAnimationStatesMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVirtualKeyboardModelAnimationStatesMETA>(
        pfnGetVirtualKeyboardModelAnimationStatesMETA));
  }
  /*!
   * @brief Return the function pointer for xrGetVirtualKeyboardModelAnimationStatesMETA (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVirtualKeyboardModelAnimationStatesMETA
  getInstanceProcAddr_xrGetVirtualKeyboardModelAnimationStatesMETA() const {
    return (reinterpret_cast<PFN_xrGetVirtualKeyboardModelAnimationStatesMETA>(
        pfnGetVirtualKeyboardModelAnimationStatesMETA));
  }
#endif  // XR_META_virtual_keyboard

#ifdef XR_META_virtual_keyboard
  /*!
   * @brief Return the function pointer for xrGetVirtualKeyboardDirtyTexturesMETA, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVirtualKeyboardDirtyTexturesMETA
  getInstanceProcAddr_xrGetVirtualKeyboardDirtyTexturesMETA() {
    XrResult result =
        populate_("xrGetVirtualKeyboardDirtyTexturesMETA", pfnGetVirtualKeyboardDirtyTexturesMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVirtualKeyboardDirtyTexturesMETA>(
        pfnGetVirtualKeyboardDirtyTexturesMETA));
  }
  /*!
   * @brief Return the function pointer for xrGetVirtualKeyboardDirtyTexturesMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVirtualKeyboardDirtyTexturesMETA
  getInstanceProcAddr_xrGetVirtualKeyboardDirtyTexturesMETA() const {
    return (reinterpret_cast<PFN_xrGetVirtualKeyboardDirtyTexturesMETA>(
        pfnGetVirtualKeyboardDirtyTexturesMETA));
  }
#endif  // XR_META_virtual_keyboard

#ifdef XR_META_virtual_keyboard
  /*!
   * @brief Return the function pointer for xrGetVirtualKeyboardTextureDataMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetVirtualKeyboardTextureDataMETA
  getInstanceProcAddr_xrGetVirtualKeyboardTextureDataMETA() {
    XrResult result =
        populate_("xrGetVirtualKeyboardTextureDataMETA", pfnGetVirtualKeyboardTextureDataMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetVirtualKeyboardTextureDataMETA>(
        pfnGetVirtualKeyboardTextureDataMETA));
  }
  /*!
   * @brief Return the function pointer for xrGetVirtualKeyboardTextureDataMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetVirtualKeyboardTextureDataMETA
  getInstanceProcAddr_xrGetVirtualKeyboardTextureDataMETA() const {
    return (reinterpret_cast<PFN_xrGetVirtualKeyboardTextureDataMETA>(
        pfnGetVirtualKeyboardTextureDataMETA));
  }
#endif  // XR_META_virtual_keyboard

#ifdef XR_META_virtual_keyboard
  /*!
   * @brief Return the function pointer for xrSendVirtualKeyboardInputMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSendVirtualKeyboardInputMETA
  getInstanceProcAddr_xrSendVirtualKeyboardInputMETA() {
    XrResult result = populate_("xrSendVirtualKeyboardInputMETA", pfnSendVirtualKeyboardInputMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSendVirtualKeyboardInputMETA>(pfnSendVirtualKeyboardInputMETA));
  }
  /*!
   * @brief Return the function pointer for xrSendVirtualKeyboardInputMETA (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSendVirtualKeyboardInputMETA
  getInstanceProcAddr_xrSendVirtualKeyboardInputMETA() const {
    return (reinterpret_cast<PFN_xrSendVirtualKeyboardInputMETA>(pfnSendVirtualKeyboardInputMETA));
  }
#endif  // XR_META_virtual_keyboard

#ifdef XR_META_virtual_keyboard
  /*!
   * @brief Return the function pointer for xrChangeVirtualKeyboardTextContextMETA, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrChangeVirtualKeyboardTextContextMETA
  getInstanceProcAddr_xrChangeVirtualKeyboardTextContextMETA() {
    XrResult result = populate_("xrChangeVirtualKeyboardTextContextMETA",
                                pfnChangeVirtualKeyboardTextContextMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrChangeVirtualKeyboardTextContextMETA>(
        pfnChangeVirtualKeyboardTextContextMETA));
  }
  /*!
   * @brief Return the function pointer for xrChangeVirtualKeyboardTextContextMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrChangeVirtualKeyboardTextContextMETA
  getInstanceProcAddr_xrChangeVirtualKeyboardTextContextMETA() const {
    return (reinterpret_cast<PFN_xrChangeVirtualKeyboardTextContextMETA>(
        pfnChangeVirtualKeyboardTextContextMETA));
  }
#endif  // XR_META_virtual_keyboard

#ifdef XR_OCULUS_external_camera
  /*!
   * @brief Return the function pointer for xrEnumerateExternalCamerasOCULUS, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateExternalCamerasOCULUS
  getInstanceProcAddr_xrEnumerateExternalCamerasOCULUS() {
    XrResult result =
        populate_("xrEnumerateExternalCamerasOCULUS", pfnEnumerateExternalCamerasOCULUS);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrEnumerateExternalCamerasOCULUS>(pfnEnumerateExternalCamerasOCULUS));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateExternalCamerasOCULUS (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateExternalCamerasOCULUS
  getInstanceProcAddr_xrEnumerateExternalCamerasOCULUS() const {
    return (
        reinterpret_cast<PFN_xrEnumerateExternalCamerasOCULUS>(pfnEnumerateExternalCamerasOCULUS));
  }
#endif  // XR_OCULUS_external_camera

#ifdef XR_META_performance_metrics
  /*!
   * @brief Return the function pointer for xrEnumeratePerformanceMetricsCounterPathsMETA,
   * populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumeratePerformanceMetricsCounterPathsMETA
  getInstanceProcAddr_xrEnumeratePerformanceMetricsCounterPathsMETA() {
    XrResult result = populate_("xrEnumeratePerformanceMetricsCounterPathsMETA",
                                pfnEnumeratePerformanceMetricsCounterPathsMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumeratePerformanceMetricsCounterPathsMETA>(
        pfnEnumeratePerformanceMetricsCounterPathsMETA));
  }
  /*!
   * @brief Return the function pointer for xrEnumeratePerformanceMetricsCounterPathsMETA (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumeratePerformanceMetricsCounterPathsMETA
  getInstanceProcAddr_xrEnumeratePerformanceMetricsCounterPathsMETA() const {
    return (reinterpret_cast<PFN_xrEnumeratePerformanceMetricsCounterPathsMETA>(
        pfnEnumeratePerformanceMetricsCounterPathsMETA));
  }
#endif  // XR_META_performance_metrics

#ifdef XR_META_performance_metrics
  /*!
   * @brief Return the function pointer for xrSetPerformanceMetricsStateMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetPerformanceMetricsStateMETA
  getInstanceProcAddr_xrSetPerformanceMetricsStateMETA() {
    XrResult result =
        populate_("xrSetPerformanceMetricsStateMETA", pfnSetPerformanceMetricsStateMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrSetPerformanceMetricsStateMETA>(pfnSetPerformanceMetricsStateMETA));
  }
  /*!
   * @brief Return the function pointer for xrSetPerformanceMetricsStateMETA (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetPerformanceMetricsStateMETA
  getInstanceProcAddr_xrSetPerformanceMetricsStateMETA() const {
    return (
        reinterpret_cast<PFN_xrSetPerformanceMetricsStateMETA>(pfnSetPerformanceMetricsStateMETA));
  }
#endif  // XR_META_performance_metrics

#ifdef XR_META_performance_metrics
  /*!
   * @brief Return the function pointer for xrGetPerformanceMetricsStateMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetPerformanceMetricsStateMETA
  getInstanceProcAddr_xrGetPerformanceMetricsStateMETA() {
    XrResult result =
        populate_("xrGetPerformanceMetricsStateMETA", pfnGetPerformanceMetricsStateMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrGetPerformanceMetricsStateMETA>(pfnGetPerformanceMetricsStateMETA));
  }
  /*!
   * @brief Return the function pointer for xrGetPerformanceMetricsStateMETA (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetPerformanceMetricsStateMETA
  getInstanceProcAddr_xrGetPerformanceMetricsStateMETA() const {
    return (
        reinterpret_cast<PFN_xrGetPerformanceMetricsStateMETA>(pfnGetPerformanceMetricsStateMETA));
  }
#endif  // XR_META_performance_metrics

#ifdef XR_META_performance_metrics
  /*!
   * @brief Return the function pointer for xrQueryPerformanceMetricsCounterMETA, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrQueryPerformanceMetricsCounterMETA
  getInstanceProcAddr_xrQueryPerformanceMetricsCounterMETA() {
    XrResult result =
        populate_("xrQueryPerformanceMetricsCounterMETA", pfnQueryPerformanceMetricsCounterMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrQueryPerformanceMetricsCounterMETA>(
        pfnQueryPerformanceMetricsCounterMETA));
  }
  /*!
   * @brief Return the function pointer for xrQueryPerformanceMetricsCounterMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrQueryPerformanceMetricsCounterMETA
  getInstanceProcAddr_xrQueryPerformanceMetricsCounterMETA() const {
    return (reinterpret_cast<PFN_xrQueryPerformanceMetricsCounterMETA>(
        pfnQueryPerformanceMetricsCounterMETA));
  }
#endif  // XR_META_performance_metrics

#ifdef XR_FB_spatial_entity_storage_batch
  /*!
   * @brief Return the function pointer for xrSaveSpaceListFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrSaveSpaceListFB getInstanceProcAddr_xrSaveSpaceListFB() {
    XrResult result = populate_("xrSaveSpaceListFB", pfnSaveSpaceListFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSaveSpaceListFB>(pfnSaveSpaceListFB));
  }
  /*!
   * @brief Return the function pointer for xrSaveSpaceListFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSaveSpaceListFB getInstanceProcAddr_xrSaveSpaceListFB() const {
    return (reinterpret_cast<PFN_xrSaveSpaceListFB>(pfnSaveSpaceListFB));
  }
#endif  // XR_FB_spatial_entity_storage_batch

#ifdef XR_FB_spatial_entity_user
  /*!
   * @brief Return the function pointer for xrCreateSpaceUserFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpaceUserFB getInstanceProcAddr_xrCreateSpaceUserFB() {
    XrResult result = populate_("xrCreateSpaceUserFB", pfnCreateSpaceUserFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpaceUserFB>(pfnCreateSpaceUserFB));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpaceUserFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpaceUserFB getInstanceProcAddr_xrCreateSpaceUserFB() const {
    return (reinterpret_cast<PFN_xrCreateSpaceUserFB>(pfnCreateSpaceUserFB));
  }
#endif  // XR_FB_spatial_entity_user

#ifdef XR_FB_spatial_entity_user
  /*!
   * @brief Return the function pointer for xrGetSpaceUserIdFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceUserIdFB getInstanceProcAddr_xrGetSpaceUserIdFB() {
    XrResult result = populate_("xrGetSpaceUserIdFB", pfnGetSpaceUserIdFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpaceUserIdFB>(pfnGetSpaceUserIdFB));
  }
  /*!
   * @brief Return the function pointer for xrGetSpaceUserIdFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceUserIdFB getInstanceProcAddr_xrGetSpaceUserIdFB() const {
    return (reinterpret_cast<PFN_xrGetSpaceUserIdFB>(pfnGetSpaceUserIdFB));
  }
#endif  // XR_FB_spatial_entity_user

#ifdef XR_FB_spatial_entity_user
  /*!
   * @brief Return the function pointer for xrDestroySpaceUserFB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpaceUserFB getInstanceProcAddr_xrDestroySpaceUserFB() {
    XrResult result = populate_("xrDestroySpaceUserFB", pfnDestroySpaceUserFB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySpaceUserFB>(pfnDestroySpaceUserFB));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpaceUserFB (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpaceUserFB getInstanceProcAddr_xrDestroySpaceUserFB() const {
    return (reinterpret_cast<PFN_xrDestroySpaceUserFB>(pfnDestroySpaceUserFB));
  }
#endif  // XR_FB_spatial_entity_user

#ifdef XR_META_recommended_layer_resolution
  /*!
   * @brief Return the function pointer for xrGetRecommendedLayerResolutionMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetRecommendedLayerResolutionMETA
  getInstanceProcAddr_xrGetRecommendedLayerResolutionMETA() {
    XrResult result =
        populate_("xrGetRecommendedLayerResolutionMETA", pfnGetRecommendedLayerResolutionMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetRecommendedLayerResolutionMETA>(
        pfnGetRecommendedLayerResolutionMETA));
  }
  /*!
   * @brief Return the function pointer for xrGetRecommendedLayerResolutionMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetRecommendedLayerResolutionMETA
  getInstanceProcAddr_xrGetRecommendedLayerResolutionMETA() const {
    return (reinterpret_cast<PFN_xrGetRecommendedLayerResolutionMETA>(
        pfnGetRecommendedLayerResolutionMETA));
  }
#endif  // XR_META_recommended_layer_resolution

#ifdef XR_META_passthrough_color_lut
  /*!
   * @brief Return the function pointer for xrCreatePassthroughColorLutMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreatePassthroughColorLutMETA
  getInstanceProcAddr_xrCreatePassthroughColorLutMETA() {
    XrResult result =
        populate_("xrCreatePassthroughColorLutMETA", pfnCreatePassthroughColorLutMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrCreatePassthroughColorLutMETA>(pfnCreatePassthroughColorLutMETA));
  }
  /*!
   * @brief Return the function pointer for xrCreatePassthroughColorLutMETA (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreatePassthroughColorLutMETA
  getInstanceProcAddr_xrCreatePassthroughColorLutMETA() const {
    return (
        reinterpret_cast<PFN_xrCreatePassthroughColorLutMETA>(pfnCreatePassthroughColorLutMETA));
  }
#endif  // XR_META_passthrough_color_lut

#ifdef XR_META_passthrough_color_lut
  /*!
   * @brief Return the function pointer for xrDestroyPassthroughColorLutMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPassthroughColorLutMETA
  getInstanceProcAddr_xrDestroyPassthroughColorLutMETA() {
    XrResult result =
        populate_("xrDestroyPassthroughColorLutMETA", pfnDestroyPassthroughColorLutMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrDestroyPassthroughColorLutMETA>(pfnDestroyPassthroughColorLutMETA));
  }
  /*!
   * @brief Return the function pointer for xrDestroyPassthroughColorLutMETA (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPassthroughColorLutMETA
  getInstanceProcAddr_xrDestroyPassthroughColorLutMETA() const {
    return (
        reinterpret_cast<PFN_xrDestroyPassthroughColorLutMETA>(pfnDestroyPassthroughColorLutMETA));
  }
#endif  // XR_META_passthrough_color_lut

#ifdef XR_META_passthrough_color_lut
  /*!
   * @brief Return the function pointer for xrUpdatePassthroughColorLutMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrUpdatePassthroughColorLutMETA
  getInstanceProcAddr_xrUpdatePassthroughColorLutMETA() {
    XrResult result =
        populate_("xrUpdatePassthroughColorLutMETA", pfnUpdatePassthroughColorLutMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrUpdatePassthroughColorLutMETA>(pfnUpdatePassthroughColorLutMETA));
  }
  /*!
   * @brief Return the function pointer for xrUpdatePassthroughColorLutMETA (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUpdatePassthroughColorLutMETA
  getInstanceProcAddr_xrUpdatePassthroughColorLutMETA() const {
    return (
        reinterpret_cast<PFN_xrUpdatePassthroughColorLutMETA>(pfnUpdatePassthroughColorLutMETA));
  }
#endif  // XR_META_passthrough_color_lut

#ifdef XR_META_spatial_entity_mesh
  /*!
   * @brief Return the function pointer for xrGetSpaceTriangleMeshMETA, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceTriangleMeshMETA
  getInstanceProcAddr_xrGetSpaceTriangleMeshMETA() {
    XrResult result = populate_("xrGetSpaceTriangleMeshMETA", pfnGetSpaceTriangleMeshMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpaceTriangleMeshMETA>(pfnGetSpaceTriangleMeshMETA));
  }
  /*!
   * @brief Return the function pointer for xrGetSpaceTriangleMeshMETA (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpaceTriangleMeshMETA
  getInstanceProcAddr_xrGetSpaceTriangleMeshMETA() const {
    return (reinterpret_cast<PFN_xrGetSpaceTriangleMeshMETA>(pfnGetSpaceTriangleMeshMETA));
  }
#endif  // XR_META_spatial_entity_mesh

#ifdef XR_FB_face_tracking2
  /*!
   * @brief Return the function pointer for xrCreateFaceTracker2FB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateFaceTracker2FB getInstanceProcAddr_xrCreateFaceTracker2FB() {
    XrResult result = populate_("xrCreateFaceTracker2FB", pfnCreateFaceTracker2FB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateFaceTracker2FB>(pfnCreateFaceTracker2FB));
  }
  /*!
   * @brief Return the function pointer for xrCreateFaceTracker2FB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateFaceTracker2FB getInstanceProcAddr_xrCreateFaceTracker2FB() const {
    return (reinterpret_cast<PFN_xrCreateFaceTracker2FB>(pfnCreateFaceTracker2FB));
  }
#endif  // XR_FB_face_tracking2

#ifdef XR_FB_face_tracking2
  /*!
   * @brief Return the function pointer for xrDestroyFaceTracker2FB, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFaceTracker2FB getInstanceProcAddr_xrDestroyFaceTracker2FB() {
    XrResult result = populate_("xrDestroyFaceTracker2FB", pfnDestroyFaceTracker2FB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyFaceTracker2FB>(pfnDestroyFaceTracker2FB));
  }
  /*!
   * @brief Return the function pointer for xrDestroyFaceTracker2FB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFaceTracker2FB
  getInstanceProcAddr_xrDestroyFaceTracker2FB() const {
    return (reinterpret_cast<PFN_xrDestroyFaceTracker2FB>(pfnDestroyFaceTracker2FB));
  }
#endif  // XR_FB_face_tracking2

#ifdef XR_FB_face_tracking2
  /*!
   * @brief Return the function pointer for xrGetFaceExpressionWeights2FB, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetFaceExpressionWeights2FB
  getInstanceProcAddr_xrGetFaceExpressionWeights2FB() {
    XrResult result = populate_("xrGetFaceExpressionWeights2FB", pfnGetFaceExpressionWeights2FB);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetFaceExpressionWeights2FB>(pfnGetFaceExpressionWeights2FB));
  }
  /*!
   * @brief Return the function pointer for xrGetFaceExpressionWeights2FB (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetFaceExpressionWeights2FB
  getInstanceProcAddr_xrGetFaceExpressionWeights2FB() const {
    return (reinterpret_cast<PFN_xrGetFaceExpressionWeights2FB>(pfnGetFaceExpressionWeights2FB));
  }
#endif  // XR_FB_face_tracking2

#ifdef XR_META_spatial_entity_sharing
  /*!
   * @brief Return the function pointer for xrShareSpacesMETA, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrShareSpacesMETA getInstanceProcAddr_xrShareSpacesMETA() {
    XrResult result = populate_("xrShareSpacesMETA", pfnShareSpacesMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrShareSpacesMETA>(pfnShareSpacesMETA));
  }
  /*!
   * @brief Return the function pointer for xrShareSpacesMETA (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrShareSpacesMETA getInstanceProcAddr_xrShareSpacesMETA() const {
    return (reinterpret_cast<PFN_xrShareSpacesMETA>(pfnShareSpacesMETA));
  }
#endif  // XR_META_spatial_entity_sharing

#ifdef XR_META_environment_depth
  /*!
   * @brief Return the function pointer for xrCreateEnvironmentDepthProviderMETA, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateEnvironmentDepthProviderMETA
  getInstanceProcAddr_xrCreateEnvironmentDepthProviderMETA() {
    XrResult result =
        populate_("xrCreateEnvironmentDepthProviderMETA", pfnCreateEnvironmentDepthProviderMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateEnvironmentDepthProviderMETA>(
        pfnCreateEnvironmentDepthProviderMETA));
  }
  /*!
   * @brief Return the function pointer for xrCreateEnvironmentDepthProviderMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateEnvironmentDepthProviderMETA
  getInstanceProcAddr_xrCreateEnvironmentDepthProviderMETA() const {
    return (reinterpret_cast<PFN_xrCreateEnvironmentDepthProviderMETA>(
        pfnCreateEnvironmentDepthProviderMETA));
  }
#endif  // XR_META_environment_depth

#ifdef XR_META_environment_depth
  /*!
   * @brief Return the function pointer for xrDestroyEnvironmentDepthProviderMETA, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyEnvironmentDepthProviderMETA
  getInstanceProcAddr_xrDestroyEnvironmentDepthProviderMETA() {
    XrResult result =
        populate_("xrDestroyEnvironmentDepthProviderMETA", pfnDestroyEnvironmentDepthProviderMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyEnvironmentDepthProviderMETA>(
        pfnDestroyEnvironmentDepthProviderMETA));
  }
  /*!
   * @brief Return the function pointer for xrDestroyEnvironmentDepthProviderMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyEnvironmentDepthProviderMETA
  getInstanceProcAddr_xrDestroyEnvironmentDepthProviderMETA() const {
    return (reinterpret_cast<PFN_xrDestroyEnvironmentDepthProviderMETA>(
        pfnDestroyEnvironmentDepthProviderMETA));
  }
#endif  // XR_META_environment_depth

#ifdef XR_META_environment_depth
  /*!
   * @brief Return the function pointer for xrStartEnvironmentDepthProviderMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrStartEnvironmentDepthProviderMETA
  getInstanceProcAddr_xrStartEnvironmentDepthProviderMETA() {
    XrResult result =
        populate_("xrStartEnvironmentDepthProviderMETA", pfnStartEnvironmentDepthProviderMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStartEnvironmentDepthProviderMETA>(
        pfnStartEnvironmentDepthProviderMETA));
  }
  /*!
   * @brief Return the function pointer for xrStartEnvironmentDepthProviderMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStartEnvironmentDepthProviderMETA
  getInstanceProcAddr_xrStartEnvironmentDepthProviderMETA() const {
    return (reinterpret_cast<PFN_xrStartEnvironmentDepthProviderMETA>(
        pfnStartEnvironmentDepthProviderMETA));
  }
#endif  // XR_META_environment_depth

#ifdef XR_META_environment_depth
  /*!
   * @brief Return the function pointer for xrStopEnvironmentDepthProviderMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrStopEnvironmentDepthProviderMETA
  getInstanceProcAddr_xrStopEnvironmentDepthProviderMETA() {
    XrResult result =
        populate_("xrStopEnvironmentDepthProviderMETA", pfnStopEnvironmentDepthProviderMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStopEnvironmentDepthProviderMETA>(
        pfnStopEnvironmentDepthProviderMETA));
  }
  /*!
   * @brief Return the function pointer for xrStopEnvironmentDepthProviderMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStopEnvironmentDepthProviderMETA
  getInstanceProcAddr_xrStopEnvironmentDepthProviderMETA() const {
    return (reinterpret_cast<PFN_xrStopEnvironmentDepthProviderMETA>(
        pfnStopEnvironmentDepthProviderMETA));
  }
#endif  // XR_META_environment_depth

#ifdef XR_META_environment_depth
  /*!
   * @brief Return the function pointer for xrCreateEnvironmentDepthSwapchainMETA, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateEnvironmentDepthSwapchainMETA
  getInstanceProcAddr_xrCreateEnvironmentDepthSwapchainMETA() {
    XrResult result =
        populate_("xrCreateEnvironmentDepthSwapchainMETA", pfnCreateEnvironmentDepthSwapchainMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateEnvironmentDepthSwapchainMETA>(
        pfnCreateEnvironmentDepthSwapchainMETA));
  }
  /*!
   * @brief Return the function pointer for xrCreateEnvironmentDepthSwapchainMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateEnvironmentDepthSwapchainMETA
  getInstanceProcAddr_xrCreateEnvironmentDepthSwapchainMETA() const {
    return (reinterpret_cast<PFN_xrCreateEnvironmentDepthSwapchainMETA>(
        pfnCreateEnvironmentDepthSwapchainMETA));
  }
#endif  // XR_META_environment_depth

#ifdef XR_META_environment_depth
  /*!
   * @brief Return the function pointer for xrDestroyEnvironmentDepthSwapchainMETA, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyEnvironmentDepthSwapchainMETA
  getInstanceProcAddr_xrDestroyEnvironmentDepthSwapchainMETA() {
    XrResult result = populate_("xrDestroyEnvironmentDepthSwapchainMETA",
                                pfnDestroyEnvironmentDepthSwapchainMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyEnvironmentDepthSwapchainMETA>(
        pfnDestroyEnvironmentDepthSwapchainMETA));
  }
  /*!
   * @brief Return the function pointer for xrDestroyEnvironmentDepthSwapchainMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyEnvironmentDepthSwapchainMETA
  getInstanceProcAddr_xrDestroyEnvironmentDepthSwapchainMETA() const {
    return (reinterpret_cast<PFN_xrDestroyEnvironmentDepthSwapchainMETA>(
        pfnDestroyEnvironmentDepthSwapchainMETA));
  }
#endif  // XR_META_environment_depth

#ifdef XR_META_environment_depth
  /*!
   * @brief Return the function pointer for xrEnumerateEnvironmentDepthSwapchainImagesMETA,
   * populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateEnvironmentDepthSwapchainImagesMETA
  getInstanceProcAddr_xrEnumerateEnvironmentDepthSwapchainImagesMETA() {
    XrResult result = populate_("xrEnumerateEnvironmentDepthSwapchainImagesMETA",
                                pfnEnumerateEnvironmentDepthSwapchainImagesMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateEnvironmentDepthSwapchainImagesMETA>(
        pfnEnumerateEnvironmentDepthSwapchainImagesMETA));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateEnvironmentDepthSwapchainImagesMETA (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateEnvironmentDepthSwapchainImagesMETA
  getInstanceProcAddr_xrEnumerateEnvironmentDepthSwapchainImagesMETA() const {
    return (reinterpret_cast<PFN_xrEnumerateEnvironmentDepthSwapchainImagesMETA>(
        pfnEnumerateEnvironmentDepthSwapchainImagesMETA));
  }
#endif  // XR_META_environment_depth

#ifdef XR_META_environment_depth
  /*!
   * @brief Return the function pointer for xrGetEnvironmentDepthSwapchainStateMETA, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetEnvironmentDepthSwapchainStateMETA
  getInstanceProcAddr_xrGetEnvironmentDepthSwapchainStateMETA() {
    XrResult result = populate_("xrGetEnvironmentDepthSwapchainStateMETA",
                                pfnGetEnvironmentDepthSwapchainStateMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetEnvironmentDepthSwapchainStateMETA>(
        pfnGetEnvironmentDepthSwapchainStateMETA));
  }
  /*!
   * @brief Return the function pointer for xrGetEnvironmentDepthSwapchainStateMETA (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetEnvironmentDepthSwapchainStateMETA
  getInstanceProcAddr_xrGetEnvironmentDepthSwapchainStateMETA() const {
    return (reinterpret_cast<PFN_xrGetEnvironmentDepthSwapchainStateMETA>(
        pfnGetEnvironmentDepthSwapchainStateMETA));
  }
#endif  // XR_META_environment_depth

#ifdef XR_META_environment_depth
  /*!
   * @brief Return the function pointer for xrAcquireEnvironmentDepthImageMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrAcquireEnvironmentDepthImageMETA
  getInstanceProcAddr_xrAcquireEnvironmentDepthImageMETA() {
    XrResult result =
        populate_("xrAcquireEnvironmentDepthImageMETA", pfnAcquireEnvironmentDepthImageMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrAcquireEnvironmentDepthImageMETA>(
        pfnAcquireEnvironmentDepthImageMETA));
  }
  /*!
   * @brief Return the function pointer for xrAcquireEnvironmentDepthImageMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrAcquireEnvironmentDepthImageMETA
  getInstanceProcAddr_xrAcquireEnvironmentDepthImageMETA() const {
    return (reinterpret_cast<PFN_xrAcquireEnvironmentDepthImageMETA>(
        pfnAcquireEnvironmentDepthImageMETA));
  }
#endif  // XR_META_environment_depth

#ifdef XR_META_environment_depth
  /*!
   * @brief Return the function pointer for xrSetEnvironmentDepthHandRemovalMETA, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetEnvironmentDepthHandRemovalMETA
  getInstanceProcAddr_xrSetEnvironmentDepthHandRemovalMETA() {
    XrResult result =
        populate_("xrSetEnvironmentDepthHandRemovalMETA", pfnSetEnvironmentDepthHandRemovalMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetEnvironmentDepthHandRemovalMETA>(
        pfnSetEnvironmentDepthHandRemovalMETA));
  }
  /*!
   * @brief Return the function pointer for xrSetEnvironmentDepthHandRemovalMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetEnvironmentDepthHandRemovalMETA
  getInstanceProcAddr_xrSetEnvironmentDepthHandRemovalMETA() const {
    return (reinterpret_cast<PFN_xrSetEnvironmentDepthHandRemovalMETA>(
        pfnSetEnvironmentDepthHandRemovalMETA));
  }
#endif  // XR_META_environment_depth

#ifdef XR_EXT_render_model
  /*!
   * @brief Return the function pointer for xrCreateRenderModelEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateRenderModelEXT getInstanceProcAddr_xrCreateRenderModelEXT() {
    XrResult result = populate_("xrCreateRenderModelEXT", pfnCreateRenderModelEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateRenderModelEXT>(pfnCreateRenderModelEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateRenderModelEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateRenderModelEXT getInstanceProcAddr_xrCreateRenderModelEXT() const {
    return (reinterpret_cast<PFN_xrCreateRenderModelEXT>(pfnCreateRenderModelEXT));
  }
#endif  // XR_EXT_render_model

#ifdef XR_EXT_render_model
  /*!
   * @brief Return the function pointer for xrDestroyRenderModelEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyRenderModelEXT getInstanceProcAddr_xrDestroyRenderModelEXT() {
    XrResult result = populate_("xrDestroyRenderModelEXT", pfnDestroyRenderModelEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyRenderModelEXT>(pfnDestroyRenderModelEXT));
  }
  /*!
   * @brief Return the function pointer for xrDestroyRenderModelEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyRenderModelEXT
  getInstanceProcAddr_xrDestroyRenderModelEXT() const {
    return (reinterpret_cast<PFN_xrDestroyRenderModelEXT>(pfnDestroyRenderModelEXT));
  }
#endif  // XR_EXT_render_model

#ifdef XR_EXT_render_model
  /*!
   * @brief Return the function pointer for xrGetRenderModelPropertiesEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelPropertiesEXT
  getInstanceProcAddr_xrGetRenderModelPropertiesEXT() {
    XrResult result = populate_("xrGetRenderModelPropertiesEXT", pfnGetRenderModelPropertiesEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelPropertiesEXT>(pfnGetRenderModelPropertiesEXT));
  }
  /*!
   * @brief Return the function pointer for xrGetRenderModelPropertiesEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelPropertiesEXT
  getInstanceProcAddr_xrGetRenderModelPropertiesEXT() const {
    return (reinterpret_cast<PFN_xrGetRenderModelPropertiesEXT>(pfnGetRenderModelPropertiesEXT));
  }
#endif  // XR_EXT_render_model

#ifdef XR_EXT_render_model
  /*!
   * @brief Return the function pointer for xrCreateRenderModelSpaceEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateRenderModelSpaceEXT
  getInstanceProcAddr_xrCreateRenderModelSpaceEXT() {
    XrResult result = populate_("xrCreateRenderModelSpaceEXT", pfnCreateRenderModelSpaceEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateRenderModelSpaceEXT>(pfnCreateRenderModelSpaceEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateRenderModelSpaceEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateRenderModelSpaceEXT
  getInstanceProcAddr_xrCreateRenderModelSpaceEXT() const {
    return (reinterpret_cast<PFN_xrCreateRenderModelSpaceEXT>(pfnCreateRenderModelSpaceEXT));
  }
#endif  // XR_EXT_render_model

#ifdef XR_EXT_render_model
  /*!
   * @brief Return the function pointer for xrCreateRenderModelAssetEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateRenderModelAssetEXT
  getInstanceProcAddr_xrCreateRenderModelAssetEXT() {
    XrResult result = populate_("xrCreateRenderModelAssetEXT", pfnCreateRenderModelAssetEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateRenderModelAssetEXT>(pfnCreateRenderModelAssetEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateRenderModelAssetEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateRenderModelAssetEXT
  getInstanceProcAddr_xrCreateRenderModelAssetEXT() const {
    return (reinterpret_cast<PFN_xrCreateRenderModelAssetEXT>(pfnCreateRenderModelAssetEXT));
  }
#endif  // XR_EXT_render_model

#ifdef XR_EXT_render_model
  /*!
   * @brief Return the function pointer for xrDestroyRenderModelAssetEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyRenderModelAssetEXT
  getInstanceProcAddr_xrDestroyRenderModelAssetEXT() {
    XrResult result = populate_("xrDestroyRenderModelAssetEXT", pfnDestroyRenderModelAssetEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyRenderModelAssetEXT>(pfnDestroyRenderModelAssetEXT));
  }
  /*!
   * @brief Return the function pointer for xrDestroyRenderModelAssetEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyRenderModelAssetEXT
  getInstanceProcAddr_xrDestroyRenderModelAssetEXT() const {
    return (reinterpret_cast<PFN_xrDestroyRenderModelAssetEXT>(pfnDestroyRenderModelAssetEXT));
  }
#endif  // XR_EXT_render_model

#ifdef XR_EXT_render_model
  /*!
   * @brief Return the function pointer for xrGetRenderModelAssetDataEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelAssetDataEXT
  getInstanceProcAddr_xrGetRenderModelAssetDataEXT() {
    XrResult result = populate_("xrGetRenderModelAssetDataEXT", pfnGetRenderModelAssetDataEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelAssetDataEXT>(pfnGetRenderModelAssetDataEXT));
  }
  /*!
   * @brief Return the function pointer for xrGetRenderModelAssetDataEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelAssetDataEXT
  getInstanceProcAddr_xrGetRenderModelAssetDataEXT() const {
    return (reinterpret_cast<PFN_xrGetRenderModelAssetDataEXT>(pfnGetRenderModelAssetDataEXT));
  }
#endif  // XR_EXT_render_model

#ifdef XR_EXT_render_model
  /*!
   * @brief Return the function pointer for xrGetRenderModelAssetPropertiesEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelAssetPropertiesEXT
  getInstanceProcAddr_xrGetRenderModelAssetPropertiesEXT() {
    XrResult result =
        populate_("xrGetRenderModelAssetPropertiesEXT", pfnGetRenderModelAssetPropertiesEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelAssetPropertiesEXT>(
        pfnGetRenderModelAssetPropertiesEXT));
  }
  /*!
   * @brief Return the function pointer for xrGetRenderModelAssetPropertiesEXT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelAssetPropertiesEXT
  getInstanceProcAddr_xrGetRenderModelAssetPropertiesEXT() const {
    return (reinterpret_cast<PFN_xrGetRenderModelAssetPropertiesEXT>(
        pfnGetRenderModelAssetPropertiesEXT));
  }
#endif  // XR_EXT_render_model

#ifdef XR_EXT_render_model
  /*!
   * @brief Return the function pointer for xrGetRenderModelStateEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelStateEXT getInstanceProcAddr_xrGetRenderModelStateEXT() {
    XrResult result = populate_("xrGetRenderModelStateEXT", pfnGetRenderModelStateEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelStateEXT>(pfnGetRenderModelStateEXT));
  }
  /*!
   * @brief Return the function pointer for xrGetRenderModelStateEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelStateEXT
  getInstanceProcAddr_xrGetRenderModelStateEXT() const {
    return (reinterpret_cast<PFN_xrGetRenderModelStateEXT>(pfnGetRenderModelStateEXT));
  }
#endif  // XR_EXT_render_model

#ifdef XR_EXT_interaction_render_model
  /*!
   * @brief Return the function pointer for xrEnumerateInteractionRenderModelIdsEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateInteractionRenderModelIdsEXT
  getInstanceProcAddr_xrEnumerateInteractionRenderModelIdsEXT() {
    XrResult result = populate_("xrEnumerateInteractionRenderModelIdsEXT",
                                pfnEnumerateInteractionRenderModelIdsEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateInteractionRenderModelIdsEXT>(
        pfnEnumerateInteractionRenderModelIdsEXT));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateInteractionRenderModelIdsEXT (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateInteractionRenderModelIdsEXT
  getInstanceProcAddr_xrEnumerateInteractionRenderModelIdsEXT() const {
    return (reinterpret_cast<PFN_xrEnumerateInteractionRenderModelIdsEXT>(
        pfnEnumerateInteractionRenderModelIdsEXT));
  }
#endif  // XR_EXT_interaction_render_model

#ifdef XR_EXT_interaction_render_model
  /*!
   * @brief Return the function pointer for xrEnumerateRenderModelSubactionPathsEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateRenderModelSubactionPathsEXT
  getInstanceProcAddr_xrEnumerateRenderModelSubactionPathsEXT() {
    XrResult result = populate_("xrEnumerateRenderModelSubactionPathsEXT",
                                pfnEnumerateRenderModelSubactionPathsEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateRenderModelSubactionPathsEXT>(
        pfnEnumerateRenderModelSubactionPathsEXT));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateRenderModelSubactionPathsEXT (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateRenderModelSubactionPathsEXT
  getInstanceProcAddr_xrEnumerateRenderModelSubactionPathsEXT() const {
    return (reinterpret_cast<PFN_xrEnumerateRenderModelSubactionPathsEXT>(
        pfnEnumerateRenderModelSubactionPathsEXT));
  }
#endif  // XR_EXT_interaction_render_model

#ifdef XR_EXT_interaction_render_model
  /*!
   * @brief Return the function pointer for xrGetRenderModelPoseTopLevelUserPathEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelPoseTopLevelUserPathEXT
  getInstanceProcAddr_xrGetRenderModelPoseTopLevelUserPathEXT() {
    XrResult result = populate_("xrGetRenderModelPoseTopLevelUserPathEXT",
                                pfnGetRenderModelPoseTopLevelUserPathEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetRenderModelPoseTopLevelUserPathEXT>(
        pfnGetRenderModelPoseTopLevelUserPathEXT));
  }
  /*!
   * @brief Return the function pointer for xrGetRenderModelPoseTopLevelUserPathEXT (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetRenderModelPoseTopLevelUserPathEXT
  getInstanceProcAddr_xrGetRenderModelPoseTopLevelUserPathEXT() const {
    return (reinterpret_cast<PFN_xrGetRenderModelPoseTopLevelUserPathEXT>(
        pfnGetRenderModelPoseTopLevelUserPathEXT));
  }
#endif  // XR_EXT_interaction_render_model

#ifdef XR_QCOM_tracking_optimization_settings
  /*!
   * @brief Return the function pointer for xrSetTrackingOptimizationSettingsHintQCOM, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetTrackingOptimizationSettingsHintQCOM
  getInstanceProcAddr_xrSetTrackingOptimizationSettingsHintQCOM() {
    XrResult result = populate_("xrSetTrackingOptimizationSettingsHintQCOM",
                                pfnSetTrackingOptimizationSettingsHintQCOM);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetTrackingOptimizationSettingsHintQCOM>(
        pfnSetTrackingOptimizationSettingsHintQCOM));
  }
  /*!
   * @brief Return the function pointer for xrSetTrackingOptimizationSettingsHintQCOM (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetTrackingOptimizationSettingsHintQCOM
  getInstanceProcAddr_xrSetTrackingOptimizationSettingsHintQCOM() const {
    return (reinterpret_cast<PFN_xrSetTrackingOptimizationSettingsHintQCOM>(
        pfnSetTrackingOptimizationSettingsHintQCOM));
  }
#endif  // XR_QCOM_tracking_optimization_settings

#ifdef XR_HTC_passthrough
  /*!
   * @brief Return the function pointer for xrCreatePassthroughHTC, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreatePassthroughHTC getInstanceProcAddr_xrCreatePassthroughHTC() {
    XrResult result = populate_("xrCreatePassthroughHTC", pfnCreatePassthroughHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreatePassthroughHTC>(pfnCreatePassthroughHTC));
  }
  /*!
   * @brief Return the function pointer for xrCreatePassthroughHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreatePassthroughHTC getInstanceProcAddr_xrCreatePassthroughHTC() const {
    return (reinterpret_cast<PFN_xrCreatePassthroughHTC>(pfnCreatePassthroughHTC));
  }
#endif  // XR_HTC_passthrough

#ifdef XR_HTC_passthrough
  /*!
   * @brief Return the function pointer for xrDestroyPassthroughHTC, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPassthroughHTC getInstanceProcAddr_xrDestroyPassthroughHTC() {
    XrResult result = populate_("xrDestroyPassthroughHTC", pfnDestroyPassthroughHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyPassthroughHTC>(pfnDestroyPassthroughHTC));
  }
  /*!
   * @brief Return the function pointer for xrDestroyPassthroughHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPassthroughHTC
  getInstanceProcAddr_xrDestroyPassthroughHTC() const {
    return (reinterpret_cast<PFN_xrDestroyPassthroughHTC>(pfnDestroyPassthroughHTC));
  }
#endif  // XR_HTC_passthrough

#ifdef XR_HTC_foveation
  /*!
   * @brief Return the function pointer for xrApplyFoveationHTC, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrApplyFoveationHTC getInstanceProcAddr_xrApplyFoveationHTC() {
    XrResult result = populate_("xrApplyFoveationHTC", pfnApplyFoveationHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrApplyFoveationHTC>(pfnApplyFoveationHTC));
  }
  /*!
   * @brief Return the function pointer for xrApplyFoveationHTC (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrApplyFoveationHTC getInstanceProcAddr_xrApplyFoveationHTC() const {
    return (reinterpret_cast<PFN_xrApplyFoveationHTC>(pfnApplyFoveationHTC));
  }
#endif  // XR_HTC_foveation

#ifdef XR_HTC_anchor
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorHTC, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorHTC getInstanceProcAddr_xrCreateSpatialAnchorHTC() {
    XrResult result = populate_("xrCreateSpatialAnchorHTC", pfnCreateSpatialAnchorHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorHTC>(pfnCreateSpatialAnchorHTC));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorHTC
  getInstanceProcAddr_xrCreateSpatialAnchorHTC() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorHTC>(pfnCreateSpatialAnchorHTC));
  }
#endif  // XR_HTC_anchor

#ifdef XR_HTC_anchor
  /*!
   * @brief Return the function pointer for xrGetSpatialAnchorNameHTC, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialAnchorNameHTC getInstanceProcAddr_xrGetSpatialAnchorNameHTC() {
    XrResult result = populate_("xrGetSpatialAnchorNameHTC", pfnGetSpatialAnchorNameHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpatialAnchorNameHTC>(pfnGetSpatialAnchorNameHTC));
  }
  /*!
   * @brief Return the function pointer for xrGetSpatialAnchorNameHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialAnchorNameHTC
  getInstanceProcAddr_xrGetSpatialAnchorNameHTC() const {
    return (reinterpret_cast<PFN_xrGetSpatialAnchorNameHTC>(pfnGetSpatialAnchorNameHTC));
  }
#endif  // XR_HTC_anchor

#ifdef XR_HTC_body_tracking
  /*!
   * @brief Return the function pointer for xrCreateBodyTrackerHTC, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateBodyTrackerHTC getInstanceProcAddr_xrCreateBodyTrackerHTC() {
    XrResult result = populate_("xrCreateBodyTrackerHTC", pfnCreateBodyTrackerHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateBodyTrackerHTC>(pfnCreateBodyTrackerHTC));
  }
  /*!
   * @brief Return the function pointer for xrCreateBodyTrackerHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateBodyTrackerHTC getInstanceProcAddr_xrCreateBodyTrackerHTC() const {
    return (reinterpret_cast<PFN_xrCreateBodyTrackerHTC>(pfnCreateBodyTrackerHTC));
  }
#endif  // XR_HTC_body_tracking

#ifdef XR_HTC_body_tracking
  /*!
   * @brief Return the function pointer for xrDestroyBodyTrackerHTC, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyBodyTrackerHTC getInstanceProcAddr_xrDestroyBodyTrackerHTC() {
    XrResult result = populate_("xrDestroyBodyTrackerHTC", pfnDestroyBodyTrackerHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyBodyTrackerHTC>(pfnDestroyBodyTrackerHTC));
  }
  /*!
   * @brief Return the function pointer for xrDestroyBodyTrackerHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyBodyTrackerHTC
  getInstanceProcAddr_xrDestroyBodyTrackerHTC() const {
    return (reinterpret_cast<PFN_xrDestroyBodyTrackerHTC>(pfnDestroyBodyTrackerHTC));
  }
#endif  // XR_HTC_body_tracking

#ifdef XR_HTC_body_tracking
  /*!
   * @brief Return the function pointer for xrLocateBodyJointsHTC, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateBodyJointsHTC getInstanceProcAddr_xrLocateBodyJointsHTC() {
    XrResult result = populate_("xrLocateBodyJointsHTC", pfnLocateBodyJointsHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateBodyJointsHTC>(pfnLocateBodyJointsHTC));
  }
  /*!
   * @brief Return the function pointer for xrLocateBodyJointsHTC (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateBodyJointsHTC getInstanceProcAddr_xrLocateBodyJointsHTC() const {
    return (reinterpret_cast<PFN_xrLocateBodyJointsHTC>(pfnLocateBodyJointsHTC));
  }
#endif  // XR_HTC_body_tracking

#ifdef XR_HTC_body_tracking
  /*!
   * @brief Return the function pointer for xrGetBodySkeletonHTC, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetBodySkeletonHTC getInstanceProcAddr_xrGetBodySkeletonHTC() {
    XrResult result = populate_("xrGetBodySkeletonHTC", pfnGetBodySkeletonHTC);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetBodySkeletonHTC>(pfnGetBodySkeletonHTC));
  }
  /*!
   * @brief Return the function pointer for xrGetBodySkeletonHTC (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetBodySkeletonHTC getInstanceProcAddr_xrGetBodySkeletonHTC() const {
    return (reinterpret_cast<PFN_xrGetBodySkeletonHTC>(pfnGetBodySkeletonHTC));
  }
#endif  // XR_HTC_body_tracking

#ifdef XR_MNDX_force_feedback_curl
  /*!
   * @brief Return the function pointer for xrApplyForceFeedbackCurlMNDX, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrApplyForceFeedbackCurlMNDX
  getInstanceProcAddr_xrApplyForceFeedbackCurlMNDX() {
    XrResult result = populate_("xrApplyForceFeedbackCurlMNDX", pfnApplyForceFeedbackCurlMNDX);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrApplyForceFeedbackCurlMNDX>(pfnApplyForceFeedbackCurlMNDX));
  }
  /*!
   * @brief Return the function pointer for xrApplyForceFeedbackCurlMNDX (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrApplyForceFeedbackCurlMNDX
  getInstanceProcAddr_xrApplyForceFeedbackCurlMNDX() const {
    return (reinterpret_cast<PFN_xrApplyForceFeedbackCurlMNDX>(pfnApplyForceFeedbackCurlMNDX));
  }
#endif  // XR_MNDX_force_feedback_curl

#ifdef XR_BD_body_tracking
  /*!
   * @brief Return the function pointer for xrCreateBodyTrackerBD, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateBodyTrackerBD getInstanceProcAddr_xrCreateBodyTrackerBD() {
    XrResult result = populate_("xrCreateBodyTrackerBD", pfnCreateBodyTrackerBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateBodyTrackerBD>(pfnCreateBodyTrackerBD));
  }
  /*!
   * @brief Return the function pointer for xrCreateBodyTrackerBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateBodyTrackerBD getInstanceProcAddr_xrCreateBodyTrackerBD() const {
    return (reinterpret_cast<PFN_xrCreateBodyTrackerBD>(pfnCreateBodyTrackerBD));
  }
#endif  // XR_BD_body_tracking

#ifdef XR_BD_body_tracking
  /*!
   * @brief Return the function pointer for xrDestroyBodyTrackerBD, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyBodyTrackerBD getInstanceProcAddr_xrDestroyBodyTrackerBD() {
    XrResult result = populate_("xrDestroyBodyTrackerBD", pfnDestroyBodyTrackerBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyBodyTrackerBD>(pfnDestroyBodyTrackerBD));
  }
  /*!
   * @brief Return the function pointer for xrDestroyBodyTrackerBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyBodyTrackerBD getInstanceProcAddr_xrDestroyBodyTrackerBD() const {
    return (reinterpret_cast<PFN_xrDestroyBodyTrackerBD>(pfnDestroyBodyTrackerBD));
  }
#endif  // XR_BD_body_tracking

#ifdef XR_BD_body_tracking
  /*!
   * @brief Return the function pointer for xrLocateBodyJointsBD, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrLocateBodyJointsBD getInstanceProcAddr_xrLocateBodyJointsBD() {
    XrResult result = populate_("xrLocateBodyJointsBD", pfnLocateBodyJointsBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrLocateBodyJointsBD>(pfnLocateBodyJointsBD));
  }
  /*!
   * @brief Return the function pointer for xrLocateBodyJointsBD (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrLocateBodyJointsBD getInstanceProcAddr_xrLocateBodyJointsBD() const {
    return (reinterpret_cast<PFN_xrLocateBodyJointsBD>(pfnLocateBodyJointsBD));
  }
#endif  // XR_BD_body_tracking

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrEnumerateSpatialEntityComponentTypesBD, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSpatialEntityComponentTypesBD
  getInstanceProcAddr_xrEnumerateSpatialEntityComponentTypesBD() {
    XrResult result = populate_("xrEnumerateSpatialEntityComponentTypesBD",
                                pfnEnumerateSpatialEntityComponentTypesBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateSpatialEntityComponentTypesBD>(
        pfnEnumerateSpatialEntityComponentTypesBD));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateSpatialEntityComponentTypesBD (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSpatialEntityComponentTypesBD
  getInstanceProcAddr_xrEnumerateSpatialEntityComponentTypesBD() const {
    return (reinterpret_cast<PFN_xrEnumerateSpatialEntityComponentTypesBD>(
        pfnEnumerateSpatialEntityComponentTypesBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrGetSpatialEntityUuidBD, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialEntityUuidBD getInstanceProcAddr_xrGetSpatialEntityUuidBD() {
    XrResult result = populate_("xrGetSpatialEntityUuidBD", pfnGetSpatialEntityUuidBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpatialEntityUuidBD>(pfnGetSpatialEntityUuidBD));
  }
  /*!
   * @brief Return the function pointer for xrGetSpatialEntityUuidBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialEntityUuidBD
  getInstanceProcAddr_xrGetSpatialEntityUuidBD() const {
    return (reinterpret_cast<PFN_xrGetSpatialEntityUuidBD>(pfnGetSpatialEntityUuidBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrGetSpatialEntityComponentDataBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialEntityComponentDataBD
  getInstanceProcAddr_xrGetSpatialEntityComponentDataBD() {
    XrResult result =
        populate_("xrGetSpatialEntityComponentDataBD", pfnGetSpatialEntityComponentDataBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpatialEntityComponentDataBD>(
        pfnGetSpatialEntityComponentDataBD));
  }
  /*!
   * @brief Return the function pointer for xrGetSpatialEntityComponentDataBD (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialEntityComponentDataBD
  getInstanceProcAddr_xrGetSpatialEntityComponentDataBD() const {
    return (reinterpret_cast<PFN_xrGetSpatialEntityComponentDataBD>(
        pfnGetSpatialEntityComponentDataBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrCreateSenseDataProviderBD, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSenseDataProviderBD
  getInstanceProcAddr_xrCreateSenseDataProviderBD() {
    XrResult result = populate_("xrCreateSenseDataProviderBD", pfnCreateSenseDataProviderBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSenseDataProviderBD>(pfnCreateSenseDataProviderBD));
  }
  /*!
   * @brief Return the function pointer for xrCreateSenseDataProviderBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSenseDataProviderBD
  getInstanceProcAddr_xrCreateSenseDataProviderBD() const {
    return (reinterpret_cast<PFN_xrCreateSenseDataProviderBD>(pfnCreateSenseDataProviderBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrStartSenseDataProviderAsyncBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrStartSenseDataProviderAsyncBD
  getInstanceProcAddr_xrStartSenseDataProviderAsyncBD() {
    XrResult result =
        populate_("xrStartSenseDataProviderAsyncBD", pfnStartSenseDataProviderAsyncBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrStartSenseDataProviderAsyncBD>(pfnStartSenseDataProviderAsyncBD));
  }
  /*!
   * @brief Return the function pointer for xrStartSenseDataProviderAsyncBD (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStartSenseDataProviderAsyncBD
  getInstanceProcAddr_xrStartSenseDataProviderAsyncBD() const {
    return (
        reinterpret_cast<PFN_xrStartSenseDataProviderAsyncBD>(pfnStartSenseDataProviderAsyncBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrStartSenseDataProviderCompleteBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrStartSenseDataProviderCompleteBD
  getInstanceProcAddr_xrStartSenseDataProviderCompleteBD() {
    XrResult result =
        populate_("xrStartSenseDataProviderCompleteBD", pfnStartSenseDataProviderCompleteBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStartSenseDataProviderCompleteBD>(
        pfnStartSenseDataProviderCompleteBD));
  }
  /*!
   * @brief Return the function pointer for xrStartSenseDataProviderCompleteBD (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStartSenseDataProviderCompleteBD
  getInstanceProcAddr_xrStartSenseDataProviderCompleteBD() const {
    return (reinterpret_cast<PFN_xrStartSenseDataProviderCompleteBD>(
        pfnStartSenseDataProviderCompleteBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrGetSenseDataProviderStateBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSenseDataProviderStateBD
  getInstanceProcAddr_xrGetSenseDataProviderStateBD() {
    XrResult result = populate_("xrGetSenseDataProviderStateBD", pfnGetSenseDataProviderStateBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSenseDataProviderStateBD>(pfnGetSenseDataProviderStateBD));
  }
  /*!
   * @brief Return the function pointer for xrGetSenseDataProviderStateBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSenseDataProviderStateBD
  getInstanceProcAddr_xrGetSenseDataProviderStateBD() const {
    return (reinterpret_cast<PFN_xrGetSenseDataProviderStateBD>(pfnGetSenseDataProviderStateBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrQuerySenseDataAsyncBD, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrQuerySenseDataAsyncBD getInstanceProcAddr_xrQuerySenseDataAsyncBD() {
    XrResult result = populate_("xrQuerySenseDataAsyncBD", pfnQuerySenseDataAsyncBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrQuerySenseDataAsyncBD>(pfnQuerySenseDataAsyncBD));
  }
  /*!
   * @brief Return the function pointer for xrQuerySenseDataAsyncBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrQuerySenseDataAsyncBD
  getInstanceProcAddr_xrQuerySenseDataAsyncBD() const {
    return (reinterpret_cast<PFN_xrQuerySenseDataAsyncBD>(pfnQuerySenseDataAsyncBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrQuerySenseDataCompleteBD, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrQuerySenseDataCompleteBD
  getInstanceProcAddr_xrQuerySenseDataCompleteBD() {
    XrResult result = populate_("xrQuerySenseDataCompleteBD", pfnQuerySenseDataCompleteBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrQuerySenseDataCompleteBD>(pfnQuerySenseDataCompleteBD));
  }
  /*!
   * @brief Return the function pointer for xrQuerySenseDataCompleteBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrQuerySenseDataCompleteBD
  getInstanceProcAddr_xrQuerySenseDataCompleteBD() const {
    return (reinterpret_cast<PFN_xrQuerySenseDataCompleteBD>(pfnQuerySenseDataCompleteBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrDestroySenseDataSnapshotBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySenseDataSnapshotBD
  getInstanceProcAddr_xrDestroySenseDataSnapshotBD() {
    XrResult result = populate_("xrDestroySenseDataSnapshotBD", pfnDestroySenseDataSnapshotBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySenseDataSnapshotBD>(pfnDestroySenseDataSnapshotBD));
  }
  /*!
   * @brief Return the function pointer for xrDestroySenseDataSnapshotBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySenseDataSnapshotBD
  getInstanceProcAddr_xrDestroySenseDataSnapshotBD() const {
    return (reinterpret_cast<PFN_xrDestroySenseDataSnapshotBD>(pfnDestroySenseDataSnapshotBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrGetQueriedSenseDataBD, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetQueriedSenseDataBD getInstanceProcAddr_xrGetQueriedSenseDataBD() {
    XrResult result = populate_("xrGetQueriedSenseDataBD", pfnGetQueriedSenseDataBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetQueriedSenseDataBD>(pfnGetQueriedSenseDataBD));
  }
  /*!
   * @brief Return the function pointer for xrGetQueriedSenseDataBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetQueriedSenseDataBD
  getInstanceProcAddr_xrGetQueriedSenseDataBD() const {
    return (reinterpret_cast<PFN_xrGetQueriedSenseDataBD>(pfnGetQueriedSenseDataBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrStopSenseDataProviderBD, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrStopSenseDataProviderBD getInstanceProcAddr_xrStopSenseDataProviderBD() {
    XrResult result = populate_("xrStopSenseDataProviderBD", pfnStopSenseDataProviderBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStopSenseDataProviderBD>(pfnStopSenseDataProviderBD));
  }
  /*!
   * @brief Return the function pointer for xrStopSenseDataProviderBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStopSenseDataProviderBD
  getInstanceProcAddr_xrStopSenseDataProviderBD() const {
    return (reinterpret_cast<PFN_xrStopSenseDataProviderBD>(pfnStopSenseDataProviderBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrDestroySenseDataProviderBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySenseDataProviderBD
  getInstanceProcAddr_xrDestroySenseDataProviderBD() {
    XrResult result = populate_("xrDestroySenseDataProviderBD", pfnDestroySenseDataProviderBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySenseDataProviderBD>(pfnDestroySenseDataProviderBD));
  }
  /*!
   * @brief Return the function pointer for xrDestroySenseDataProviderBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySenseDataProviderBD
  getInstanceProcAddr_xrDestroySenseDataProviderBD() const {
    return (reinterpret_cast<PFN_xrDestroySenseDataProviderBD>(pfnDestroySenseDataProviderBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrCreateSpatialEntityAnchorBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialEntityAnchorBD
  getInstanceProcAddr_xrCreateSpatialEntityAnchorBD() {
    XrResult result = populate_("xrCreateSpatialEntityAnchorBD", pfnCreateSpatialEntityAnchorBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialEntityAnchorBD>(pfnCreateSpatialEntityAnchorBD));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialEntityAnchorBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialEntityAnchorBD
  getInstanceProcAddr_xrCreateSpatialEntityAnchorBD() const {
    return (reinterpret_cast<PFN_xrCreateSpatialEntityAnchorBD>(pfnCreateSpatialEntityAnchorBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrDestroyAnchorBD, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyAnchorBD getInstanceProcAddr_xrDestroyAnchorBD() {
    XrResult result = populate_("xrDestroyAnchorBD", pfnDestroyAnchorBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyAnchorBD>(pfnDestroyAnchorBD));
  }
  /*!
   * @brief Return the function pointer for xrDestroyAnchorBD (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyAnchorBD getInstanceProcAddr_xrDestroyAnchorBD() const {
    return (reinterpret_cast<PFN_xrDestroyAnchorBD>(pfnDestroyAnchorBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrGetAnchorUuidBD, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetAnchorUuidBD getInstanceProcAddr_xrGetAnchorUuidBD() {
    XrResult result = populate_("xrGetAnchorUuidBD", pfnGetAnchorUuidBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetAnchorUuidBD>(pfnGetAnchorUuidBD));
  }
  /*!
   * @brief Return the function pointer for xrGetAnchorUuidBD (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetAnchorUuidBD getInstanceProcAddr_xrGetAnchorUuidBD() const {
    return (reinterpret_cast<PFN_xrGetAnchorUuidBD>(pfnGetAnchorUuidBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_sensing
  /*!
   * @brief Return the function pointer for xrCreateAnchorSpaceBD, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateAnchorSpaceBD getInstanceProcAddr_xrCreateAnchorSpaceBD() {
    XrResult result = populate_("xrCreateAnchorSpaceBD", pfnCreateAnchorSpaceBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateAnchorSpaceBD>(pfnCreateAnchorSpaceBD));
  }
  /*!
   * @brief Return the function pointer for xrCreateAnchorSpaceBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateAnchorSpaceBD getInstanceProcAddr_xrCreateAnchorSpaceBD() const {
    return (reinterpret_cast<PFN_xrCreateAnchorSpaceBD>(pfnCreateAnchorSpaceBD));
  }
#endif  // XR_BD_spatial_sensing

#ifdef XR_BD_spatial_anchor
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorAsyncBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorAsyncBD
  getInstanceProcAddr_xrCreateSpatialAnchorAsyncBD() {
    XrResult result = populate_("xrCreateSpatialAnchorAsyncBD", pfnCreateSpatialAnchorAsyncBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorAsyncBD>(pfnCreateSpatialAnchorAsyncBD));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorAsyncBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorAsyncBD
  getInstanceProcAddr_xrCreateSpatialAnchorAsyncBD() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorAsyncBD>(pfnCreateSpatialAnchorAsyncBD));
  }
#endif  // XR_BD_spatial_anchor

#ifdef XR_BD_spatial_anchor
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorCompleteBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorCompleteBD
  getInstanceProcAddr_xrCreateSpatialAnchorCompleteBD() {
    XrResult result =
        populate_("xrCreateSpatialAnchorCompleteBD", pfnCreateSpatialAnchorCompleteBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrCreateSpatialAnchorCompleteBD>(pfnCreateSpatialAnchorCompleteBD));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorCompleteBD (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorCompleteBD
  getInstanceProcAddr_xrCreateSpatialAnchorCompleteBD() const {
    return (
        reinterpret_cast<PFN_xrCreateSpatialAnchorCompleteBD>(pfnCreateSpatialAnchorCompleteBD));
  }
#endif  // XR_BD_spatial_anchor

#ifdef XR_BD_spatial_anchor
  /*!
   * @brief Return the function pointer for xrPersistSpatialAnchorAsyncBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPersistSpatialAnchorAsyncBD
  getInstanceProcAddr_xrPersistSpatialAnchorAsyncBD() {
    XrResult result = populate_("xrPersistSpatialAnchorAsyncBD", pfnPersistSpatialAnchorAsyncBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPersistSpatialAnchorAsyncBD>(pfnPersistSpatialAnchorAsyncBD));
  }
  /*!
   * @brief Return the function pointer for xrPersistSpatialAnchorAsyncBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPersistSpatialAnchorAsyncBD
  getInstanceProcAddr_xrPersistSpatialAnchorAsyncBD() const {
    return (reinterpret_cast<PFN_xrPersistSpatialAnchorAsyncBD>(pfnPersistSpatialAnchorAsyncBD));
  }
#endif  // XR_BD_spatial_anchor

#ifdef XR_BD_spatial_anchor
  /*!
   * @brief Return the function pointer for xrPersistSpatialAnchorCompleteBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPersistSpatialAnchorCompleteBD
  getInstanceProcAddr_xrPersistSpatialAnchorCompleteBD() {
    XrResult result =
        populate_("xrPersistSpatialAnchorCompleteBD", pfnPersistSpatialAnchorCompleteBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrPersistSpatialAnchorCompleteBD>(pfnPersistSpatialAnchorCompleteBD));
  }
  /*!
   * @brief Return the function pointer for xrPersistSpatialAnchorCompleteBD (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPersistSpatialAnchorCompleteBD
  getInstanceProcAddr_xrPersistSpatialAnchorCompleteBD() const {
    return (
        reinterpret_cast<PFN_xrPersistSpatialAnchorCompleteBD>(pfnPersistSpatialAnchorCompleteBD));
  }
#endif  // XR_BD_spatial_anchor

#ifdef XR_BD_spatial_anchor
  /*!
   * @brief Return the function pointer for xrUnpersistSpatialAnchorAsyncBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrUnpersistSpatialAnchorAsyncBD
  getInstanceProcAddr_xrUnpersistSpatialAnchorAsyncBD() {
    XrResult result =
        populate_("xrUnpersistSpatialAnchorAsyncBD", pfnUnpersistSpatialAnchorAsyncBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrUnpersistSpatialAnchorAsyncBD>(pfnUnpersistSpatialAnchorAsyncBD));
  }
  /*!
   * @brief Return the function pointer for xrUnpersistSpatialAnchorAsyncBD (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUnpersistSpatialAnchorAsyncBD
  getInstanceProcAddr_xrUnpersistSpatialAnchorAsyncBD() const {
    return (
        reinterpret_cast<PFN_xrUnpersistSpatialAnchorAsyncBD>(pfnUnpersistSpatialAnchorAsyncBD));
  }
#endif  // XR_BD_spatial_anchor

#ifdef XR_BD_spatial_anchor
  /*!
   * @brief Return the function pointer for xrUnpersistSpatialAnchorCompleteBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrUnpersistSpatialAnchorCompleteBD
  getInstanceProcAddr_xrUnpersistSpatialAnchorCompleteBD() {
    XrResult result =
        populate_("xrUnpersistSpatialAnchorCompleteBD", pfnUnpersistSpatialAnchorCompleteBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorCompleteBD>(
        pfnUnpersistSpatialAnchorCompleteBD));
  }
  /*!
   * @brief Return the function pointer for xrUnpersistSpatialAnchorCompleteBD (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUnpersistSpatialAnchorCompleteBD
  getInstanceProcAddr_xrUnpersistSpatialAnchorCompleteBD() const {
    return (reinterpret_cast<PFN_xrUnpersistSpatialAnchorCompleteBD>(
        pfnUnpersistSpatialAnchorCompleteBD));
  }
#endif  // XR_BD_spatial_anchor

#ifdef XR_BD_spatial_anchor_sharing
  /*!
   * @brief Return the function pointer for xrShareSpatialAnchorAsyncBD, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrShareSpatialAnchorAsyncBD
  getInstanceProcAddr_xrShareSpatialAnchorAsyncBD() {
    XrResult result = populate_("xrShareSpatialAnchorAsyncBD", pfnShareSpatialAnchorAsyncBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrShareSpatialAnchorAsyncBD>(pfnShareSpatialAnchorAsyncBD));
  }
  /*!
   * @brief Return the function pointer for xrShareSpatialAnchorAsyncBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrShareSpatialAnchorAsyncBD
  getInstanceProcAddr_xrShareSpatialAnchorAsyncBD() const {
    return (reinterpret_cast<PFN_xrShareSpatialAnchorAsyncBD>(pfnShareSpatialAnchorAsyncBD));
  }
#endif  // XR_BD_spatial_anchor_sharing

#ifdef XR_BD_spatial_anchor_sharing
  /*!
   * @brief Return the function pointer for xrShareSpatialAnchorCompleteBD, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrShareSpatialAnchorCompleteBD
  getInstanceProcAddr_xrShareSpatialAnchorCompleteBD() {
    XrResult result = populate_("xrShareSpatialAnchorCompleteBD", pfnShareSpatialAnchorCompleteBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrShareSpatialAnchorCompleteBD>(pfnShareSpatialAnchorCompleteBD));
  }
  /*!
   * @brief Return the function pointer for xrShareSpatialAnchorCompleteBD (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrShareSpatialAnchorCompleteBD
  getInstanceProcAddr_xrShareSpatialAnchorCompleteBD() const {
    return (reinterpret_cast<PFN_xrShareSpatialAnchorCompleteBD>(pfnShareSpatialAnchorCompleteBD));
  }
#endif  // XR_BD_spatial_anchor_sharing

#ifdef XR_BD_spatial_anchor_sharing
  /*!
   * @brief Return the function pointer for xrDownloadSharedSpatialAnchorAsyncBD, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDownloadSharedSpatialAnchorAsyncBD
  getInstanceProcAddr_xrDownloadSharedSpatialAnchorAsyncBD() {
    XrResult result =
        populate_("xrDownloadSharedSpatialAnchorAsyncBD", pfnDownloadSharedSpatialAnchorAsyncBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDownloadSharedSpatialAnchorAsyncBD>(
        pfnDownloadSharedSpatialAnchorAsyncBD));
  }
  /*!
   * @brief Return the function pointer for xrDownloadSharedSpatialAnchorAsyncBD (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDownloadSharedSpatialAnchorAsyncBD
  getInstanceProcAddr_xrDownloadSharedSpatialAnchorAsyncBD() const {
    return (reinterpret_cast<PFN_xrDownloadSharedSpatialAnchorAsyncBD>(
        pfnDownloadSharedSpatialAnchorAsyncBD));
  }
#endif  // XR_BD_spatial_anchor_sharing

#ifdef XR_BD_spatial_anchor_sharing
  /*!
   * @brief Return the function pointer for xrDownloadSharedSpatialAnchorCompleteBD, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDownloadSharedSpatialAnchorCompleteBD
  getInstanceProcAddr_xrDownloadSharedSpatialAnchorCompleteBD() {
    XrResult result = populate_("xrDownloadSharedSpatialAnchorCompleteBD",
                                pfnDownloadSharedSpatialAnchorCompleteBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDownloadSharedSpatialAnchorCompleteBD>(
        pfnDownloadSharedSpatialAnchorCompleteBD));
  }
  /*!
   * @brief Return the function pointer for xrDownloadSharedSpatialAnchorCompleteBD (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDownloadSharedSpatialAnchorCompleteBD
  getInstanceProcAddr_xrDownloadSharedSpatialAnchorCompleteBD() const {
    return (reinterpret_cast<PFN_xrDownloadSharedSpatialAnchorCompleteBD>(
        pfnDownloadSharedSpatialAnchorCompleteBD));
  }
#endif  // XR_BD_spatial_anchor_sharing

#ifdef XR_BD_spatial_scene
  /*!
   * @brief Return the function pointer for xrCaptureSceneAsyncBD, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCaptureSceneAsyncBD getInstanceProcAddr_xrCaptureSceneAsyncBD() {
    XrResult result = populate_("xrCaptureSceneAsyncBD", pfnCaptureSceneAsyncBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCaptureSceneAsyncBD>(pfnCaptureSceneAsyncBD));
  }
  /*!
   * @brief Return the function pointer for xrCaptureSceneAsyncBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCaptureSceneAsyncBD getInstanceProcAddr_xrCaptureSceneAsyncBD() const {
    return (reinterpret_cast<PFN_xrCaptureSceneAsyncBD>(pfnCaptureSceneAsyncBD));
  }
#endif  // XR_BD_spatial_scene

#ifdef XR_BD_spatial_scene
  /*!
   * @brief Return the function pointer for xrCaptureSceneCompleteBD, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCaptureSceneCompleteBD getInstanceProcAddr_xrCaptureSceneCompleteBD() {
    XrResult result = populate_("xrCaptureSceneCompleteBD", pfnCaptureSceneCompleteBD);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCaptureSceneCompleteBD>(pfnCaptureSceneCompleteBD));
  }
  /*!
   * @brief Return the function pointer for xrCaptureSceneCompleteBD (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCaptureSceneCompleteBD
  getInstanceProcAddr_xrCaptureSceneCompleteBD() const {
    return (reinterpret_cast<PFN_xrCaptureSceneCompleteBD>(pfnCaptureSceneCompleteBD));
  }
#endif  // XR_BD_spatial_scene

#ifdef XR_EXT_plane_detection
  /*!
   * @brief Return the function pointer for xrCreatePlaneDetectorEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreatePlaneDetectorEXT getInstanceProcAddr_xrCreatePlaneDetectorEXT() {
    XrResult result = populate_("xrCreatePlaneDetectorEXT", pfnCreatePlaneDetectorEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreatePlaneDetectorEXT>(pfnCreatePlaneDetectorEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreatePlaneDetectorEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreatePlaneDetectorEXT
  getInstanceProcAddr_xrCreatePlaneDetectorEXT() const {
    return (reinterpret_cast<PFN_xrCreatePlaneDetectorEXT>(pfnCreatePlaneDetectorEXT));
  }
#endif  // XR_EXT_plane_detection

#ifdef XR_EXT_plane_detection
  /*!
   * @brief Return the function pointer for xrDestroyPlaneDetectorEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPlaneDetectorEXT getInstanceProcAddr_xrDestroyPlaneDetectorEXT() {
    XrResult result = populate_("xrDestroyPlaneDetectorEXT", pfnDestroyPlaneDetectorEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyPlaneDetectorEXT>(pfnDestroyPlaneDetectorEXT));
  }
  /*!
   * @brief Return the function pointer for xrDestroyPlaneDetectorEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyPlaneDetectorEXT
  getInstanceProcAddr_xrDestroyPlaneDetectorEXT() const {
    return (reinterpret_cast<PFN_xrDestroyPlaneDetectorEXT>(pfnDestroyPlaneDetectorEXT));
  }
#endif  // XR_EXT_plane_detection

#ifdef XR_EXT_plane_detection
  /*!
   * @brief Return the function pointer for xrBeginPlaneDetectionEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrBeginPlaneDetectionEXT getInstanceProcAddr_xrBeginPlaneDetectionEXT() {
    XrResult result = populate_("xrBeginPlaneDetectionEXT", pfnBeginPlaneDetectionEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrBeginPlaneDetectionEXT>(pfnBeginPlaneDetectionEXT));
  }
  /*!
   * @brief Return the function pointer for xrBeginPlaneDetectionEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrBeginPlaneDetectionEXT
  getInstanceProcAddr_xrBeginPlaneDetectionEXT() const {
    return (reinterpret_cast<PFN_xrBeginPlaneDetectionEXT>(pfnBeginPlaneDetectionEXT));
  }
#endif  // XR_EXT_plane_detection

#ifdef XR_EXT_plane_detection
  /*!
   * @brief Return the function pointer for xrGetPlaneDetectionStateEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetPlaneDetectionStateEXT
  getInstanceProcAddr_xrGetPlaneDetectionStateEXT() {
    XrResult result = populate_("xrGetPlaneDetectionStateEXT", pfnGetPlaneDetectionStateEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetPlaneDetectionStateEXT>(pfnGetPlaneDetectionStateEXT));
  }
  /*!
   * @brief Return the function pointer for xrGetPlaneDetectionStateEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetPlaneDetectionStateEXT
  getInstanceProcAddr_xrGetPlaneDetectionStateEXT() const {
    return (reinterpret_cast<PFN_xrGetPlaneDetectionStateEXT>(pfnGetPlaneDetectionStateEXT));
  }
#endif  // XR_EXT_plane_detection

#ifdef XR_EXT_plane_detection
  /*!
   * @brief Return the function pointer for xrGetPlaneDetectionsEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrGetPlaneDetectionsEXT getInstanceProcAddr_xrGetPlaneDetectionsEXT() {
    XrResult result = populate_("xrGetPlaneDetectionsEXT", pfnGetPlaneDetectionsEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetPlaneDetectionsEXT>(pfnGetPlaneDetectionsEXT));
  }
  /*!
   * @brief Return the function pointer for xrGetPlaneDetectionsEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetPlaneDetectionsEXT
  getInstanceProcAddr_xrGetPlaneDetectionsEXT() const {
    return (reinterpret_cast<PFN_xrGetPlaneDetectionsEXT>(pfnGetPlaneDetectionsEXT));
  }
#endif  // XR_EXT_plane_detection

#ifdef XR_EXT_plane_detection
  /*!
   * @brief Return the function pointer for xrGetPlanePolygonBufferEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetPlanePolygonBufferEXT
  getInstanceProcAddr_xrGetPlanePolygonBufferEXT() {
    XrResult result = populate_("xrGetPlanePolygonBufferEXT", pfnGetPlanePolygonBufferEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetPlanePolygonBufferEXT>(pfnGetPlanePolygonBufferEXT));
  }
  /*!
   * @brief Return the function pointer for xrGetPlanePolygonBufferEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetPlanePolygonBufferEXT
  getInstanceProcAddr_xrGetPlanePolygonBufferEXT() const {
    return (reinterpret_cast<PFN_xrGetPlanePolygonBufferEXT>(pfnGetPlanePolygonBufferEXT));
  }
#endif  // XR_EXT_plane_detection

#ifdef XR_EXT_future
  /*!
   * @brief Return the function pointer for xrPollFutureEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrPollFutureEXT getInstanceProcAddr_xrPollFutureEXT() {
    XrResult result = populate_("xrPollFutureEXT", pfnPollFutureEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPollFutureEXT>(pfnPollFutureEXT));
  }
  /*!
   * @brief Return the function pointer for xrPollFutureEXT (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPollFutureEXT getInstanceProcAddr_xrPollFutureEXT() const {
    return (reinterpret_cast<PFN_xrPollFutureEXT>(pfnPollFutureEXT));
  }
#endif  // XR_EXT_future

#ifdef XR_EXT_future
  /*!
   * @brief Return the function pointer for xrCancelFutureEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCancelFutureEXT getInstanceProcAddr_xrCancelFutureEXT() {
    XrResult result = populate_("xrCancelFutureEXT", pfnCancelFutureEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCancelFutureEXT>(pfnCancelFutureEXT));
  }
  /*!
   * @brief Return the function pointer for xrCancelFutureEXT (const overload - does not populate
   * function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCancelFutureEXT getInstanceProcAddr_xrCancelFutureEXT() const {
    return (reinterpret_cast<PFN_xrCancelFutureEXT>(pfnCancelFutureEXT));
  }
#endif  // XR_EXT_future

#ifdef XR_ML_user_calibration
  /*!
   * @brief Return the function pointer for xrEnableUserCalibrationEventsML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnableUserCalibrationEventsML
  getInstanceProcAddr_xrEnableUserCalibrationEventsML() {
    XrResult result =
        populate_("xrEnableUserCalibrationEventsML", pfnEnableUserCalibrationEventsML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrEnableUserCalibrationEventsML>(pfnEnableUserCalibrationEventsML));
  }
  /*!
   * @brief Return the function pointer for xrEnableUserCalibrationEventsML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnableUserCalibrationEventsML
  getInstanceProcAddr_xrEnableUserCalibrationEventsML() const {
    return (
        reinterpret_cast<PFN_xrEnableUserCalibrationEventsML>(pfnEnableUserCalibrationEventsML));
  }
#endif  // XR_ML_user_calibration

#ifdef XR_ML_system_notifications
  /*!
   * @brief Return the function pointer for xrSetSystemNotificationsML, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrSetSystemNotificationsML
  getInstanceProcAddr_xrSetSystemNotificationsML() {
    XrResult result = populate_("xrSetSystemNotificationsML", pfnSetSystemNotificationsML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrSetSystemNotificationsML>(pfnSetSystemNotificationsML));
  }
  /*!
   * @brief Return the function pointer for xrSetSystemNotificationsML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrSetSystemNotificationsML
  getInstanceProcAddr_xrSetSystemNotificationsML() const {
    return (reinterpret_cast<PFN_xrSetSystemNotificationsML>(pfnSetSystemNotificationsML));
  }
#endif  // XR_ML_system_notifications

#ifdef XR_ML_world_mesh_detection
  /*!
   * @brief Return the function pointer for xrCreateWorldMeshDetectorML, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateWorldMeshDetectorML
  getInstanceProcAddr_xrCreateWorldMeshDetectorML() {
    XrResult result = populate_("xrCreateWorldMeshDetectorML", pfnCreateWorldMeshDetectorML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateWorldMeshDetectorML>(pfnCreateWorldMeshDetectorML));
  }
  /*!
   * @brief Return the function pointer for xrCreateWorldMeshDetectorML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateWorldMeshDetectorML
  getInstanceProcAddr_xrCreateWorldMeshDetectorML() const {
    return (reinterpret_cast<PFN_xrCreateWorldMeshDetectorML>(pfnCreateWorldMeshDetectorML));
  }
#endif  // XR_ML_world_mesh_detection

#ifdef XR_ML_world_mesh_detection
  /*!
   * @brief Return the function pointer for xrDestroyWorldMeshDetectorML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyWorldMeshDetectorML
  getInstanceProcAddr_xrDestroyWorldMeshDetectorML() {
    XrResult result = populate_("xrDestroyWorldMeshDetectorML", pfnDestroyWorldMeshDetectorML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyWorldMeshDetectorML>(pfnDestroyWorldMeshDetectorML));
  }
  /*!
   * @brief Return the function pointer for xrDestroyWorldMeshDetectorML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyWorldMeshDetectorML
  getInstanceProcAddr_xrDestroyWorldMeshDetectorML() const {
    return (reinterpret_cast<PFN_xrDestroyWorldMeshDetectorML>(pfnDestroyWorldMeshDetectorML));
  }
#endif  // XR_ML_world_mesh_detection

#ifdef XR_ML_world_mesh_detection
  /*!
   * @brief Return the function pointer for xrRequestWorldMeshStateAsyncML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrRequestWorldMeshStateAsyncML
  getInstanceProcAddr_xrRequestWorldMeshStateAsyncML() {
    XrResult result = populate_("xrRequestWorldMeshStateAsyncML", pfnRequestWorldMeshStateAsyncML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrRequestWorldMeshStateAsyncML>(pfnRequestWorldMeshStateAsyncML));
  }
  /*!
   * @brief Return the function pointer for xrRequestWorldMeshStateAsyncML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrRequestWorldMeshStateAsyncML
  getInstanceProcAddr_xrRequestWorldMeshStateAsyncML() const {
    return (reinterpret_cast<PFN_xrRequestWorldMeshStateAsyncML>(pfnRequestWorldMeshStateAsyncML));
  }
#endif  // XR_ML_world_mesh_detection

#ifdef XR_ML_world_mesh_detection
  /*!
   * @brief Return the function pointer for xrRequestWorldMeshStateCompleteML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrRequestWorldMeshStateCompleteML
  getInstanceProcAddr_xrRequestWorldMeshStateCompleteML() {
    XrResult result =
        populate_("xrRequestWorldMeshStateCompleteML", pfnRequestWorldMeshStateCompleteML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrRequestWorldMeshStateCompleteML>(
        pfnRequestWorldMeshStateCompleteML));
  }
  /*!
   * @brief Return the function pointer for xrRequestWorldMeshStateCompleteML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrRequestWorldMeshStateCompleteML
  getInstanceProcAddr_xrRequestWorldMeshStateCompleteML() const {
    return (reinterpret_cast<PFN_xrRequestWorldMeshStateCompleteML>(
        pfnRequestWorldMeshStateCompleteML));
  }
#endif  // XR_ML_world_mesh_detection

#ifdef XR_ML_world_mesh_detection
  /*!
   * @brief Return the function pointer for xrGetWorldMeshBufferRecommendSizeML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetWorldMeshBufferRecommendSizeML
  getInstanceProcAddr_xrGetWorldMeshBufferRecommendSizeML() {
    XrResult result =
        populate_("xrGetWorldMeshBufferRecommendSizeML", pfnGetWorldMeshBufferRecommendSizeML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetWorldMeshBufferRecommendSizeML>(
        pfnGetWorldMeshBufferRecommendSizeML));
  }
  /*!
   * @brief Return the function pointer for xrGetWorldMeshBufferRecommendSizeML (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetWorldMeshBufferRecommendSizeML
  getInstanceProcAddr_xrGetWorldMeshBufferRecommendSizeML() const {
    return (reinterpret_cast<PFN_xrGetWorldMeshBufferRecommendSizeML>(
        pfnGetWorldMeshBufferRecommendSizeML));
  }
#endif  // XR_ML_world_mesh_detection

#ifdef XR_ML_world_mesh_detection
  /*!
   * @brief Return the function pointer for xrAllocateWorldMeshBufferML, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrAllocateWorldMeshBufferML
  getInstanceProcAddr_xrAllocateWorldMeshBufferML() {
    XrResult result = populate_("xrAllocateWorldMeshBufferML", pfnAllocateWorldMeshBufferML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrAllocateWorldMeshBufferML>(pfnAllocateWorldMeshBufferML));
  }
  /*!
   * @brief Return the function pointer for xrAllocateWorldMeshBufferML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrAllocateWorldMeshBufferML
  getInstanceProcAddr_xrAllocateWorldMeshBufferML() const {
    return (reinterpret_cast<PFN_xrAllocateWorldMeshBufferML>(pfnAllocateWorldMeshBufferML));
  }
#endif  // XR_ML_world_mesh_detection

#ifdef XR_ML_world_mesh_detection
  /*!
   * @brief Return the function pointer for xrFreeWorldMeshBufferML, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrFreeWorldMeshBufferML getInstanceProcAddr_xrFreeWorldMeshBufferML() {
    XrResult result = populate_("xrFreeWorldMeshBufferML", pfnFreeWorldMeshBufferML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrFreeWorldMeshBufferML>(pfnFreeWorldMeshBufferML));
  }
  /*!
   * @brief Return the function pointer for xrFreeWorldMeshBufferML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrFreeWorldMeshBufferML
  getInstanceProcAddr_xrFreeWorldMeshBufferML() const {
    return (reinterpret_cast<PFN_xrFreeWorldMeshBufferML>(pfnFreeWorldMeshBufferML));
  }
#endif  // XR_ML_world_mesh_detection

#ifdef XR_ML_world_mesh_detection
  /*!
   * @brief Return the function pointer for xrRequestWorldMeshAsyncML, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrRequestWorldMeshAsyncML getInstanceProcAddr_xrRequestWorldMeshAsyncML() {
    XrResult result = populate_("xrRequestWorldMeshAsyncML", pfnRequestWorldMeshAsyncML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrRequestWorldMeshAsyncML>(pfnRequestWorldMeshAsyncML));
  }
  /*!
   * @brief Return the function pointer for xrRequestWorldMeshAsyncML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrRequestWorldMeshAsyncML
  getInstanceProcAddr_xrRequestWorldMeshAsyncML() const {
    return (reinterpret_cast<PFN_xrRequestWorldMeshAsyncML>(pfnRequestWorldMeshAsyncML));
  }
#endif  // XR_ML_world_mesh_detection

#ifdef XR_ML_world_mesh_detection
  /*!
   * @brief Return the function pointer for xrRequestWorldMeshCompleteML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrRequestWorldMeshCompleteML
  getInstanceProcAddr_xrRequestWorldMeshCompleteML() {
    XrResult result = populate_("xrRequestWorldMeshCompleteML", pfnRequestWorldMeshCompleteML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrRequestWorldMeshCompleteML>(pfnRequestWorldMeshCompleteML));
  }
  /*!
   * @brief Return the function pointer for xrRequestWorldMeshCompleteML (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrRequestWorldMeshCompleteML
  getInstanceProcAddr_xrRequestWorldMeshCompleteML() const {
    return (reinterpret_cast<PFN_xrRequestWorldMeshCompleteML>(pfnRequestWorldMeshCompleteML));
  }
#endif  // XR_ML_world_mesh_detection

#ifdef XR_ML_facial_expression
  /*!
   * @brief Return the function pointer for xrCreateFacialExpressionClientML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateFacialExpressionClientML
  getInstanceProcAddr_xrCreateFacialExpressionClientML() {
    XrResult result =
        populate_("xrCreateFacialExpressionClientML", pfnCreateFacialExpressionClientML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrCreateFacialExpressionClientML>(pfnCreateFacialExpressionClientML));
  }
  /*!
   * @brief Return the function pointer for xrCreateFacialExpressionClientML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateFacialExpressionClientML
  getInstanceProcAddr_xrCreateFacialExpressionClientML() const {
    return (
        reinterpret_cast<PFN_xrCreateFacialExpressionClientML>(pfnCreateFacialExpressionClientML));
  }
#endif  // XR_ML_facial_expression

#ifdef XR_ML_facial_expression
  /*!
   * @brief Return the function pointer for xrDestroyFacialExpressionClientML, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFacialExpressionClientML
  getInstanceProcAddr_xrDestroyFacialExpressionClientML() {
    XrResult result =
        populate_("xrDestroyFacialExpressionClientML", pfnDestroyFacialExpressionClientML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroyFacialExpressionClientML>(
        pfnDestroyFacialExpressionClientML));
  }
  /*!
   * @brief Return the function pointer for xrDestroyFacialExpressionClientML (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroyFacialExpressionClientML
  getInstanceProcAddr_xrDestroyFacialExpressionClientML() const {
    return (reinterpret_cast<PFN_xrDestroyFacialExpressionClientML>(
        pfnDestroyFacialExpressionClientML));
  }
#endif  // XR_ML_facial_expression

#ifdef XR_ML_facial_expression
  /*!
   * @brief Return the function pointer for xrGetFacialExpressionBlendShapePropertiesML, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetFacialExpressionBlendShapePropertiesML
  getInstanceProcAddr_xrGetFacialExpressionBlendShapePropertiesML() {
    XrResult result = populate_("xrGetFacialExpressionBlendShapePropertiesML",
                                pfnGetFacialExpressionBlendShapePropertiesML);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetFacialExpressionBlendShapePropertiesML>(
        pfnGetFacialExpressionBlendShapePropertiesML));
  }
  /*!
   * @brief Return the function pointer for xrGetFacialExpressionBlendShapePropertiesML (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetFacialExpressionBlendShapePropertiesML
  getInstanceProcAddr_xrGetFacialExpressionBlendShapePropertiesML() const {
    return (reinterpret_cast<PFN_xrGetFacialExpressionBlendShapePropertiesML>(
        pfnGetFacialExpressionBlendShapePropertiesML));
  }
#endif  // XR_ML_facial_expression

#ifdef XR_META_simultaneous_hands_and_controllers
  /*!
   * @brief Return the function pointer for xrResumeSimultaneousHandsAndControllersTrackingMETA,
   * populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrResumeSimultaneousHandsAndControllersTrackingMETA
  getInstanceProcAddr_xrResumeSimultaneousHandsAndControllersTrackingMETA() {
    XrResult result = populate_("xrResumeSimultaneousHandsAndControllersTrackingMETA",
                                pfnResumeSimultaneousHandsAndControllersTrackingMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrResumeSimultaneousHandsAndControllersTrackingMETA>(
        pfnResumeSimultaneousHandsAndControllersTrackingMETA));
  }
  /*!
   * @brief Return the function pointer for xrResumeSimultaneousHandsAndControllersTrackingMETA
   * (const overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrResumeSimultaneousHandsAndControllersTrackingMETA
  getInstanceProcAddr_xrResumeSimultaneousHandsAndControllersTrackingMETA() const {
    return (reinterpret_cast<PFN_xrResumeSimultaneousHandsAndControllersTrackingMETA>(
        pfnResumeSimultaneousHandsAndControllersTrackingMETA));
  }
#endif  // XR_META_simultaneous_hands_and_controllers

#ifdef XR_META_simultaneous_hands_and_controllers
  /*!
   * @brief Return the function pointer for xrPauseSimultaneousHandsAndControllersTrackingMETA,
   * populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPauseSimultaneousHandsAndControllersTrackingMETA
  getInstanceProcAddr_xrPauseSimultaneousHandsAndControllersTrackingMETA() {
    XrResult result = populate_("xrPauseSimultaneousHandsAndControllersTrackingMETA",
                                pfnPauseSimultaneousHandsAndControllersTrackingMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPauseSimultaneousHandsAndControllersTrackingMETA>(
        pfnPauseSimultaneousHandsAndControllersTrackingMETA));
  }
  /*!
   * @brief Return the function pointer for xrPauseSimultaneousHandsAndControllersTrackingMETA
   * (const overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPauseSimultaneousHandsAndControllersTrackingMETA
  getInstanceProcAddr_xrPauseSimultaneousHandsAndControllersTrackingMETA() const {
    return (reinterpret_cast<PFN_xrPauseSimultaneousHandsAndControllersTrackingMETA>(
        pfnPauseSimultaneousHandsAndControllersTrackingMETA));
  }
#endif  // XR_META_simultaneous_hands_and_controllers

#ifdef XR_META_colocation_discovery
  /*!
   * @brief Return the function pointer for xrStartColocationDiscoveryMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrStartColocationDiscoveryMETA
  getInstanceProcAddr_xrStartColocationDiscoveryMETA() {
    XrResult result = populate_("xrStartColocationDiscoveryMETA", pfnStartColocationDiscoveryMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStartColocationDiscoveryMETA>(pfnStartColocationDiscoveryMETA));
  }
  /*!
   * @brief Return the function pointer for xrStartColocationDiscoveryMETA (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStartColocationDiscoveryMETA
  getInstanceProcAddr_xrStartColocationDiscoveryMETA() const {
    return (reinterpret_cast<PFN_xrStartColocationDiscoveryMETA>(pfnStartColocationDiscoveryMETA));
  }
#endif  // XR_META_colocation_discovery

#ifdef XR_META_colocation_discovery
  /*!
   * @brief Return the function pointer for xrStopColocationDiscoveryMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrStopColocationDiscoveryMETA
  getInstanceProcAddr_xrStopColocationDiscoveryMETA() {
    XrResult result = populate_("xrStopColocationDiscoveryMETA", pfnStopColocationDiscoveryMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStopColocationDiscoveryMETA>(pfnStopColocationDiscoveryMETA));
  }
  /*!
   * @brief Return the function pointer for xrStopColocationDiscoveryMETA (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStopColocationDiscoveryMETA
  getInstanceProcAddr_xrStopColocationDiscoveryMETA() const {
    return (reinterpret_cast<PFN_xrStopColocationDiscoveryMETA>(pfnStopColocationDiscoveryMETA));
  }
#endif  // XR_META_colocation_discovery

#ifdef XR_META_colocation_discovery
  /*!
   * @brief Return the function pointer for xrStartColocationAdvertisementMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrStartColocationAdvertisementMETA
  getInstanceProcAddr_xrStartColocationAdvertisementMETA() {
    XrResult result =
        populate_("xrStartColocationAdvertisementMETA", pfnStartColocationAdvertisementMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStartColocationAdvertisementMETA>(
        pfnStartColocationAdvertisementMETA));
  }
  /*!
   * @brief Return the function pointer for xrStartColocationAdvertisementMETA (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStartColocationAdvertisementMETA
  getInstanceProcAddr_xrStartColocationAdvertisementMETA() const {
    return (reinterpret_cast<PFN_xrStartColocationAdvertisementMETA>(
        pfnStartColocationAdvertisementMETA));
  }
#endif  // XR_META_colocation_discovery

#ifdef XR_META_colocation_discovery
  /*!
   * @brief Return the function pointer for xrStopColocationAdvertisementMETA, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrStopColocationAdvertisementMETA
  getInstanceProcAddr_xrStopColocationAdvertisementMETA() {
    XrResult result =
        populate_("xrStopColocationAdvertisementMETA", pfnStopColocationAdvertisementMETA);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrStopColocationAdvertisementMETA>(
        pfnStopColocationAdvertisementMETA));
  }
  /*!
   * @brief Return the function pointer for xrStopColocationAdvertisementMETA (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrStopColocationAdvertisementMETA
  getInstanceProcAddr_xrStopColocationAdvertisementMETA() const {
    return (reinterpret_cast<PFN_xrStopColocationAdvertisementMETA>(
        pfnStopColocationAdvertisementMETA));
  }
#endif  // XR_META_colocation_discovery

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrEnumerateSpatialCapabilitiesEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSpatialCapabilitiesEXT
  getInstanceProcAddr_xrEnumerateSpatialCapabilitiesEXT() {
    XrResult result =
        populate_("xrEnumerateSpatialCapabilitiesEXT", pfnEnumerateSpatialCapabilitiesEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateSpatialCapabilitiesEXT>(
        pfnEnumerateSpatialCapabilitiesEXT));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateSpatialCapabilitiesEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSpatialCapabilitiesEXT
  getInstanceProcAddr_xrEnumerateSpatialCapabilitiesEXT() const {
    return (reinterpret_cast<PFN_xrEnumerateSpatialCapabilitiesEXT>(
        pfnEnumerateSpatialCapabilitiesEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrEnumerateSpatialCapabilityComponentTypesEXT,
   * populating function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSpatialCapabilityComponentTypesEXT
  getInstanceProcAddr_xrEnumerateSpatialCapabilityComponentTypesEXT() {
    XrResult result = populate_("xrEnumerateSpatialCapabilityComponentTypesEXT",
                                pfnEnumerateSpatialCapabilityComponentTypesEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateSpatialCapabilityComponentTypesEXT>(
        pfnEnumerateSpatialCapabilityComponentTypesEXT));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateSpatialCapabilityComponentTypesEXT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSpatialCapabilityComponentTypesEXT
  getInstanceProcAddr_xrEnumerateSpatialCapabilityComponentTypesEXT() const {
    return (reinterpret_cast<PFN_xrEnumerateSpatialCapabilityComponentTypesEXT>(
        pfnEnumerateSpatialCapabilityComponentTypesEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrEnumerateSpatialCapabilityFeaturesEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSpatialCapabilityFeaturesEXT
  getInstanceProcAddr_xrEnumerateSpatialCapabilityFeaturesEXT() {
    XrResult result = populate_("xrEnumerateSpatialCapabilityFeaturesEXT",
                                pfnEnumerateSpatialCapabilityFeaturesEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateSpatialCapabilityFeaturesEXT>(
        pfnEnumerateSpatialCapabilityFeaturesEXT));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateSpatialCapabilityFeaturesEXT (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSpatialCapabilityFeaturesEXT
  getInstanceProcAddr_xrEnumerateSpatialCapabilityFeaturesEXT() const {
    return (reinterpret_cast<PFN_xrEnumerateSpatialCapabilityFeaturesEXT>(
        pfnEnumerateSpatialCapabilityFeaturesEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrCreateSpatialContextAsyncEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialContextAsyncEXT
  getInstanceProcAddr_xrCreateSpatialContextAsyncEXT() {
    XrResult result = populate_("xrCreateSpatialContextAsyncEXT", pfnCreateSpatialContextAsyncEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialContextAsyncEXT>(pfnCreateSpatialContextAsyncEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialContextAsyncEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialContextAsyncEXT
  getInstanceProcAddr_xrCreateSpatialContextAsyncEXT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialContextAsyncEXT>(pfnCreateSpatialContextAsyncEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrCreateSpatialContextCompleteEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialContextCompleteEXT
  getInstanceProcAddr_xrCreateSpatialContextCompleteEXT() {
    XrResult result =
        populate_("xrCreateSpatialContextCompleteEXT", pfnCreateSpatialContextCompleteEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialContextCompleteEXT>(
        pfnCreateSpatialContextCompleteEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialContextCompleteEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialContextCompleteEXT
  getInstanceProcAddr_xrCreateSpatialContextCompleteEXT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialContextCompleteEXT>(
        pfnCreateSpatialContextCompleteEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrDestroySpatialContextEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialContextEXT
  getInstanceProcAddr_xrDestroySpatialContextEXT() {
    XrResult result = populate_("xrDestroySpatialContextEXT", pfnDestroySpatialContextEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialContextEXT>(pfnDestroySpatialContextEXT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpatialContextEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialContextEXT
  getInstanceProcAddr_xrDestroySpatialContextEXT() const {
    return (reinterpret_cast<PFN_xrDestroySpatialContextEXT>(pfnDestroySpatialContextEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrCreateSpatialDiscoverySnapshotAsyncEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialDiscoverySnapshotAsyncEXT
  getInstanceProcAddr_xrCreateSpatialDiscoverySnapshotAsyncEXT() {
    XrResult result = populate_("xrCreateSpatialDiscoverySnapshotAsyncEXT",
                                pfnCreateSpatialDiscoverySnapshotAsyncEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialDiscoverySnapshotAsyncEXT>(
        pfnCreateSpatialDiscoverySnapshotAsyncEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialDiscoverySnapshotAsyncEXT (const overload
   * - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialDiscoverySnapshotAsyncEXT
  getInstanceProcAddr_xrCreateSpatialDiscoverySnapshotAsyncEXT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialDiscoverySnapshotAsyncEXT>(
        pfnCreateSpatialDiscoverySnapshotAsyncEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrCreateSpatialDiscoverySnapshotCompleteEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialDiscoverySnapshotCompleteEXT
  getInstanceProcAddr_xrCreateSpatialDiscoverySnapshotCompleteEXT() {
    XrResult result = populate_("xrCreateSpatialDiscoverySnapshotCompleteEXT",
                                pfnCreateSpatialDiscoverySnapshotCompleteEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialDiscoverySnapshotCompleteEXT>(
        pfnCreateSpatialDiscoverySnapshotCompleteEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialDiscoverySnapshotCompleteEXT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialDiscoverySnapshotCompleteEXT
  getInstanceProcAddr_xrCreateSpatialDiscoverySnapshotCompleteEXT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialDiscoverySnapshotCompleteEXT>(
        pfnCreateSpatialDiscoverySnapshotCompleteEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrQuerySpatialComponentDataEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrQuerySpatialComponentDataEXT
  getInstanceProcAddr_xrQuerySpatialComponentDataEXT() {
    XrResult result = populate_("xrQuerySpatialComponentDataEXT", pfnQuerySpatialComponentDataEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrQuerySpatialComponentDataEXT>(pfnQuerySpatialComponentDataEXT));
  }
  /*!
   * @brief Return the function pointer for xrQuerySpatialComponentDataEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrQuerySpatialComponentDataEXT
  getInstanceProcAddr_xrQuerySpatialComponentDataEXT() const {
    return (reinterpret_cast<PFN_xrQuerySpatialComponentDataEXT>(pfnQuerySpatialComponentDataEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrDestroySpatialSnapshotEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialSnapshotEXT
  getInstanceProcAddr_xrDestroySpatialSnapshotEXT() {
    XrResult result = populate_("xrDestroySpatialSnapshotEXT", pfnDestroySpatialSnapshotEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialSnapshotEXT>(pfnDestroySpatialSnapshotEXT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpatialSnapshotEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialSnapshotEXT
  getInstanceProcAddr_xrDestroySpatialSnapshotEXT() const {
    return (reinterpret_cast<PFN_xrDestroySpatialSnapshotEXT>(pfnDestroySpatialSnapshotEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrCreateSpatialEntityFromIdEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialEntityFromIdEXT
  getInstanceProcAddr_xrCreateSpatialEntityFromIdEXT() {
    XrResult result = populate_("xrCreateSpatialEntityFromIdEXT", pfnCreateSpatialEntityFromIdEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialEntityFromIdEXT>(pfnCreateSpatialEntityFromIdEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialEntityFromIdEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialEntityFromIdEXT
  getInstanceProcAddr_xrCreateSpatialEntityFromIdEXT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialEntityFromIdEXT>(pfnCreateSpatialEntityFromIdEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrDestroySpatialEntityEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialEntityEXT getInstanceProcAddr_xrDestroySpatialEntityEXT() {
    XrResult result = populate_("xrDestroySpatialEntityEXT", pfnDestroySpatialEntityEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialEntityEXT>(pfnDestroySpatialEntityEXT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpatialEntityEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialEntityEXT
  getInstanceProcAddr_xrDestroySpatialEntityEXT() const {
    return (reinterpret_cast<PFN_xrDestroySpatialEntityEXT>(pfnDestroySpatialEntityEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrCreateSpatialUpdateSnapshotEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialUpdateSnapshotEXT
  getInstanceProcAddr_xrCreateSpatialUpdateSnapshotEXT() {
    XrResult result =
        populate_("xrCreateSpatialUpdateSnapshotEXT", pfnCreateSpatialUpdateSnapshotEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrCreateSpatialUpdateSnapshotEXT>(pfnCreateSpatialUpdateSnapshotEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialUpdateSnapshotEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialUpdateSnapshotEXT
  getInstanceProcAddr_xrCreateSpatialUpdateSnapshotEXT() const {
    return (
        reinterpret_cast<PFN_xrCreateSpatialUpdateSnapshotEXT>(pfnCreateSpatialUpdateSnapshotEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferStringEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferStringEXT
  getInstanceProcAddr_xrGetSpatialBufferStringEXT() {
    XrResult result = populate_("xrGetSpatialBufferStringEXT", pfnGetSpatialBufferStringEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferStringEXT>(pfnGetSpatialBufferStringEXT));
  }
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferStringEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferStringEXT
  getInstanceProcAddr_xrGetSpatialBufferStringEXT() const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferStringEXT>(pfnGetSpatialBufferStringEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferUint8EXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferUint8EXT
  getInstanceProcAddr_xrGetSpatialBufferUint8EXT() {
    XrResult result = populate_("xrGetSpatialBufferUint8EXT", pfnGetSpatialBufferUint8EXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferUint8EXT>(pfnGetSpatialBufferUint8EXT));
  }
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferUint8EXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferUint8EXT
  getInstanceProcAddr_xrGetSpatialBufferUint8EXT() const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferUint8EXT>(pfnGetSpatialBufferUint8EXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferUint16EXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferUint16EXT
  getInstanceProcAddr_xrGetSpatialBufferUint16EXT() {
    XrResult result = populate_("xrGetSpatialBufferUint16EXT", pfnGetSpatialBufferUint16EXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferUint16EXT>(pfnGetSpatialBufferUint16EXT));
  }
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferUint16EXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferUint16EXT
  getInstanceProcAddr_xrGetSpatialBufferUint16EXT() const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferUint16EXT>(pfnGetSpatialBufferUint16EXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferUint32EXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferUint32EXT
  getInstanceProcAddr_xrGetSpatialBufferUint32EXT() {
    XrResult result = populate_("xrGetSpatialBufferUint32EXT", pfnGetSpatialBufferUint32EXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferUint32EXT>(pfnGetSpatialBufferUint32EXT));
  }
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferUint32EXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferUint32EXT
  getInstanceProcAddr_xrGetSpatialBufferUint32EXT() const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferUint32EXT>(pfnGetSpatialBufferUint32EXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferFloatEXT, populating function pointer
   * if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferFloatEXT
  getInstanceProcAddr_xrGetSpatialBufferFloatEXT() {
    XrResult result = populate_("xrGetSpatialBufferFloatEXT", pfnGetSpatialBufferFloatEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferFloatEXT>(pfnGetSpatialBufferFloatEXT));
  }
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferFloatEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferFloatEXT
  getInstanceProcAddr_xrGetSpatialBufferFloatEXT() const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferFloatEXT>(pfnGetSpatialBufferFloatEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferVector2fEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferVector2fEXT
  getInstanceProcAddr_xrGetSpatialBufferVector2fEXT() {
    XrResult result = populate_("xrGetSpatialBufferVector2fEXT", pfnGetSpatialBufferVector2fEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferVector2fEXT>(pfnGetSpatialBufferVector2fEXT));
  }
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferVector2fEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferVector2fEXT
  getInstanceProcAddr_xrGetSpatialBufferVector2fEXT() const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferVector2fEXT>(pfnGetSpatialBufferVector2fEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_entity
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferVector3fEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferVector3fEXT
  getInstanceProcAddr_xrGetSpatialBufferVector3fEXT() {
    XrResult result = populate_("xrGetSpatialBufferVector3fEXT", pfnGetSpatialBufferVector3fEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrGetSpatialBufferVector3fEXT>(pfnGetSpatialBufferVector3fEXT));
  }
  /*!
   * @brief Return the function pointer for xrGetSpatialBufferVector3fEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrGetSpatialBufferVector3fEXT
  getInstanceProcAddr_xrGetSpatialBufferVector3fEXT() const {
    return (reinterpret_cast<PFN_xrGetSpatialBufferVector3fEXT>(pfnGetSpatialBufferVector3fEXT));
  }
#endif  // XR_EXT_spatial_entity

#ifdef XR_EXT_spatial_anchor
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorEXT, populating function pointer if
   * required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorEXT getInstanceProcAddr_xrCreateSpatialAnchorEXT() {
    XrResult result = populate_("xrCreateSpatialAnchorEXT", pfnCreateSpatialAnchorEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialAnchorEXT>(pfnCreateSpatialAnchorEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialAnchorEXT (const overload - does not
   * populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialAnchorEXT
  getInstanceProcAddr_xrCreateSpatialAnchorEXT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialAnchorEXT>(pfnCreateSpatialAnchorEXT));
  }
#endif  // XR_EXT_spatial_anchor

#ifdef XR_EXT_spatial_persistence
  /*!
   * @brief Return the function pointer for xrEnumerateSpatialPersistenceScopesEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSpatialPersistenceScopesEXT
  getInstanceProcAddr_xrEnumerateSpatialPersistenceScopesEXT() {
    XrResult result = populate_("xrEnumerateSpatialPersistenceScopesEXT",
                                pfnEnumerateSpatialPersistenceScopesEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrEnumerateSpatialPersistenceScopesEXT>(
        pfnEnumerateSpatialPersistenceScopesEXT));
  }
  /*!
   * @brief Return the function pointer for xrEnumerateSpatialPersistenceScopesEXT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrEnumerateSpatialPersistenceScopesEXT
  getInstanceProcAddr_xrEnumerateSpatialPersistenceScopesEXT() const {
    return (reinterpret_cast<PFN_xrEnumerateSpatialPersistenceScopesEXT>(
        pfnEnumerateSpatialPersistenceScopesEXT));
  }
#endif  // XR_EXT_spatial_persistence

#ifdef XR_EXT_spatial_persistence
  /*!
   * @brief Return the function pointer for xrCreateSpatialPersistenceContextAsyncEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialPersistenceContextAsyncEXT
  getInstanceProcAddr_xrCreateSpatialPersistenceContextAsyncEXT() {
    XrResult result = populate_("xrCreateSpatialPersistenceContextAsyncEXT",
                                pfnCreateSpatialPersistenceContextAsyncEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialPersistenceContextAsyncEXT>(
        pfnCreateSpatialPersistenceContextAsyncEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialPersistenceContextAsyncEXT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialPersistenceContextAsyncEXT
  getInstanceProcAddr_xrCreateSpatialPersistenceContextAsyncEXT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialPersistenceContextAsyncEXT>(
        pfnCreateSpatialPersistenceContextAsyncEXT));
  }
#endif  // XR_EXT_spatial_persistence

#ifdef XR_EXT_spatial_persistence
  /*!
   * @brief Return the function pointer for xrCreateSpatialPersistenceContextCompleteEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialPersistenceContextCompleteEXT
  getInstanceProcAddr_xrCreateSpatialPersistenceContextCompleteEXT() {
    XrResult result = populate_("xrCreateSpatialPersistenceContextCompleteEXT",
                                pfnCreateSpatialPersistenceContextCompleteEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrCreateSpatialPersistenceContextCompleteEXT>(
        pfnCreateSpatialPersistenceContextCompleteEXT));
  }
  /*!
   * @brief Return the function pointer for xrCreateSpatialPersistenceContextCompleteEXT (const
   * overload - does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrCreateSpatialPersistenceContextCompleteEXT
  getInstanceProcAddr_xrCreateSpatialPersistenceContextCompleteEXT() const {
    return (reinterpret_cast<PFN_xrCreateSpatialPersistenceContextCompleteEXT>(
        pfnCreateSpatialPersistenceContextCompleteEXT));
  }
#endif  // XR_EXT_spatial_persistence

#ifdef XR_EXT_spatial_persistence
  /*!
   * @brief Return the function pointer for xrDestroySpatialPersistenceContextEXT, populating
   * function pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialPersistenceContextEXT
  getInstanceProcAddr_xrDestroySpatialPersistenceContextEXT() {
    XrResult result =
        populate_("xrDestroySpatialPersistenceContextEXT", pfnDestroySpatialPersistenceContextEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrDestroySpatialPersistenceContextEXT>(
        pfnDestroySpatialPersistenceContextEXT));
  }
  /*!
   * @brief Return the function pointer for xrDestroySpatialPersistenceContextEXT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrDestroySpatialPersistenceContextEXT
  getInstanceProcAddr_xrDestroySpatialPersistenceContextEXT() const {
    return (reinterpret_cast<PFN_xrDestroySpatialPersistenceContextEXT>(
        pfnDestroySpatialPersistenceContextEXT));
  }
#endif  // XR_EXT_spatial_persistence

#ifdef XR_EXT_spatial_persistence_operations
  /*!
   * @brief Return the function pointer for xrPersistSpatialEntityAsyncEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPersistSpatialEntityAsyncEXT
  getInstanceProcAddr_xrPersistSpatialEntityAsyncEXT() {
    XrResult result = populate_("xrPersistSpatialEntityAsyncEXT", pfnPersistSpatialEntityAsyncEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPersistSpatialEntityAsyncEXT>(pfnPersistSpatialEntityAsyncEXT));
  }
  /*!
   * @brief Return the function pointer for xrPersistSpatialEntityAsyncEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPersistSpatialEntityAsyncEXT
  getInstanceProcAddr_xrPersistSpatialEntityAsyncEXT() const {
    return (reinterpret_cast<PFN_xrPersistSpatialEntityAsyncEXT>(pfnPersistSpatialEntityAsyncEXT));
  }
#endif  // XR_EXT_spatial_persistence_operations

#ifdef XR_EXT_spatial_persistence_operations
  /*!
   * @brief Return the function pointer for xrPersistSpatialEntityCompleteEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrPersistSpatialEntityCompleteEXT
  getInstanceProcAddr_xrPersistSpatialEntityCompleteEXT() {
    XrResult result =
        populate_("xrPersistSpatialEntityCompleteEXT", pfnPersistSpatialEntityCompleteEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrPersistSpatialEntityCompleteEXT>(
        pfnPersistSpatialEntityCompleteEXT));
  }
  /*!
   * @brief Return the function pointer for xrPersistSpatialEntityCompleteEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrPersistSpatialEntityCompleteEXT
  getInstanceProcAddr_xrPersistSpatialEntityCompleteEXT() const {
    return (reinterpret_cast<PFN_xrPersistSpatialEntityCompleteEXT>(
        pfnPersistSpatialEntityCompleteEXT));
  }
#endif  // XR_EXT_spatial_persistence_operations

#ifdef XR_EXT_spatial_persistence_operations
  /*!
   * @brief Return the function pointer for xrUnpersistSpatialEntityAsyncEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrUnpersistSpatialEntityAsyncEXT
  getInstanceProcAddr_xrUnpersistSpatialEntityAsyncEXT() {
    XrResult result =
        populate_("xrUnpersistSpatialEntityAsyncEXT", pfnUnpersistSpatialEntityAsyncEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (
        reinterpret_cast<PFN_xrUnpersistSpatialEntityAsyncEXT>(pfnUnpersistSpatialEntityAsyncEXT));
  }
  /*!
   * @brief Return the function pointer for xrUnpersistSpatialEntityAsyncEXT (const overload - does
   * not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUnpersistSpatialEntityAsyncEXT
  getInstanceProcAddr_xrUnpersistSpatialEntityAsyncEXT() const {
    return (
        reinterpret_cast<PFN_xrUnpersistSpatialEntityAsyncEXT>(pfnUnpersistSpatialEntityAsyncEXT));
  }
#endif  // XR_EXT_spatial_persistence_operations

#ifdef XR_EXT_spatial_persistence_operations
  /*!
   * @brief Return the function pointer for xrUnpersistSpatialEntityCompleteEXT, populating function
   * pointer if required.
   */
  OPENXR_HPP_INLINE PFN_xrUnpersistSpatialEntityCompleteEXT
  getInstanceProcAddr_xrUnpersistSpatialEntityCompleteEXT() {
    XrResult result =
        populate_("xrUnpersistSpatialEntityCompleteEXT", pfnUnpersistSpatialEntityCompleteEXT);
    if (XR_FAILED(result)) {
      return nullptr;
    }

    return (reinterpret_cast<PFN_xrUnpersistSpatialEntityCompleteEXT>(
        pfnUnpersistSpatialEntityCompleteEXT));
  }
  /*!
   * @brief Return the function pointer for xrUnpersistSpatialEntityCompleteEXT (const overload -
   * does not populate function pointer)
   */
  OPENXR_HPP_INLINE PFN_xrUnpersistSpatialEntityCompleteEXT
  getInstanceProcAddr_xrUnpersistSpatialEntityCompleteEXT() const {
    return (reinterpret_cast<PFN_xrUnpersistSpatialEntityCompleteEXT>(
        pfnUnpersistSpatialEntityCompleteEXT));
  }
#endif  // XR_EXT_spatial_persistence_operations

  //! @}
private:
  //! @brief Internal utility function to populate a function pointer if it is nullptr.
  OPENXR_HPP_INLINE XrResult populate_(const char* function_name, PFN_xrVoidFunction& pfn) {
    if (pfn == nullptr) {
      // Not exactly the right error, but not sure what's better.
      if (isEmpty()) return XR_ERROR_HANDLE_INVALID;
      return reinterpret_cast<PFN_xrGetInstanceProcAddr>(pfnGetInstanceProcAddr)(
          m_instance, function_name, &pfn);
    }
    return XR_SUCCESS;
  }
  XrInstance m_instance;
  PFN_xrVoidFunction pfnGetInstanceProcAddr{};
  PFN_xrVoidFunction pfnEnumerateApiLayerProperties{};
  PFN_xrVoidFunction pfnEnumerateInstanceExtensionProperties{};
  PFN_xrVoidFunction pfnCreateInstance{};
  PFN_xrVoidFunction pfnDestroyInstance{};
  PFN_xrVoidFunction pfnGetInstanceProperties{};
  PFN_xrVoidFunction pfnPollEvent{};
  PFN_xrVoidFunction pfnResultToString{};
  PFN_xrVoidFunction pfnStructureTypeToString{};
  PFN_xrVoidFunction pfnGetSystem{};
  PFN_xrVoidFunction pfnGetSystemProperties{};
  PFN_xrVoidFunction pfnEnumerateEnvironmentBlendModes{};
  PFN_xrVoidFunction pfnCreateSession{};
  PFN_xrVoidFunction pfnDestroySession{};
  PFN_xrVoidFunction pfnEnumerateReferenceSpaces{};
  PFN_xrVoidFunction pfnCreateReferenceSpace{};
  PFN_xrVoidFunction pfnGetReferenceSpaceBoundsRect{};
  PFN_xrVoidFunction pfnCreateActionSpace{};
  PFN_xrVoidFunction pfnLocateSpace{};
  PFN_xrVoidFunction pfnDestroySpace{};
  PFN_xrVoidFunction pfnEnumerateViewConfigurations{};
  PFN_xrVoidFunction pfnGetViewConfigurationProperties{};
  PFN_xrVoidFunction pfnEnumerateViewConfigurationViews{};
  PFN_xrVoidFunction pfnEnumerateSwapchainFormats{};
  PFN_xrVoidFunction pfnCreateSwapchain{};
  PFN_xrVoidFunction pfnDestroySwapchain{};
  PFN_xrVoidFunction pfnEnumerateSwapchainImages{};
  PFN_xrVoidFunction pfnAcquireSwapchainImage{};
  PFN_xrVoidFunction pfnWaitSwapchainImage{};
  PFN_xrVoidFunction pfnReleaseSwapchainImage{};
  PFN_xrVoidFunction pfnBeginSession{};
  PFN_xrVoidFunction pfnEndSession{};
  PFN_xrVoidFunction pfnRequestExitSession{};
  PFN_xrVoidFunction pfnWaitFrame{};
  PFN_xrVoidFunction pfnBeginFrame{};
  PFN_xrVoidFunction pfnEndFrame{};
  PFN_xrVoidFunction pfnLocateViews{};
  PFN_xrVoidFunction pfnStringToPath{};
  PFN_xrVoidFunction pfnPathToString{};
  PFN_xrVoidFunction pfnCreateActionSet{};
  PFN_xrVoidFunction pfnDestroyActionSet{};
  PFN_xrVoidFunction pfnCreateAction{};
  PFN_xrVoidFunction pfnDestroyAction{};
  PFN_xrVoidFunction pfnSuggestInteractionProfileBindings{};
  PFN_xrVoidFunction pfnAttachSessionActionSets{};
  PFN_xrVoidFunction pfnGetCurrentInteractionProfile{};
  PFN_xrVoidFunction pfnGetActionStateBoolean{};
  PFN_xrVoidFunction pfnGetActionStateFloat{};
  PFN_xrVoidFunction pfnGetActionStateVector2f{};
  PFN_xrVoidFunction pfnGetActionStatePose{};
  PFN_xrVoidFunction pfnSyncActions{};
  PFN_xrVoidFunction pfnEnumerateBoundSourcesForAction{};
  PFN_xrVoidFunction pfnGetInputSourceLocalizedName{};
  PFN_xrVoidFunction pfnApplyHapticFeedback{};
  PFN_xrVoidFunction pfnStopHapticFeedback{};
  PFN_xrVoidFunction pfnCreateApiLayerInstance{};
  PFN_xrVoidFunction pfnNegotiateLoaderRuntimeInterface{};
  PFN_xrVoidFunction pfnNegotiateLoaderApiLayerInterface{};
  PFN_xrVoidFunction pfnLocateSpaces{};
  PFN_xrVoidFunction pfnSetAndroidApplicationThreadKHR{};
  PFN_xrVoidFunction pfnCreateSwapchainAndroidSurfaceKHR{};
  PFN_xrVoidFunction pfnGetOpenGLGraphicsRequirementsKHR{};
  PFN_xrVoidFunction pfnGetOpenGLESGraphicsRequirementsKHR{};
  PFN_xrVoidFunction pfnGetVulkanInstanceExtensionsKHR{};
  PFN_xrVoidFunction pfnGetVulkanDeviceExtensionsKHR{};
  PFN_xrVoidFunction pfnGetVulkanGraphicsDeviceKHR{};
  PFN_xrVoidFunction pfnGetVulkanGraphicsRequirementsKHR{};
  PFN_xrVoidFunction pfnGetD3D11GraphicsRequirementsKHR{};
  PFN_xrVoidFunction pfnGetD3D12GraphicsRequirementsKHR{};
  PFN_xrVoidFunction pfnGetMetalGraphicsRequirementsKHR{};
  PFN_xrVoidFunction pfnGetVisibilityMaskKHR{};
  PFN_xrVoidFunction pfnConvertWin32PerformanceCounterToTimeKHR{};
  PFN_xrVoidFunction pfnConvertTimeToWin32PerformanceCounterKHR{};
  PFN_xrVoidFunction pfnConvertTimespecTimeToTimeKHR{};
  PFN_xrVoidFunction pfnConvertTimeToTimespecTimeKHR{};
  PFN_xrVoidFunction pfnInitializeLoaderKHR{};
  PFN_xrVoidFunction pfnCreateVulkanInstanceKHR{};
  PFN_xrVoidFunction pfnCreateVulkanDeviceKHR{};
  PFN_xrVoidFunction pfnGetVulkanGraphicsDevice2KHR{};
  PFN_xrVoidFunction pfnGetVulkanGraphicsRequirements2KHR{};
  PFN_xrVoidFunction pfnStructureTypeToString2KHR{};
  PFN_xrVoidFunction pfnLocateSpacesKHR{};
  PFN_xrVoidFunction pfnPerfSettingsSetPerformanceLevelEXT{};
  PFN_xrVoidFunction pfnThermalGetTemperatureTrendEXT{};
  PFN_xrVoidFunction pfnSetDebugUtilsObjectNameEXT{};
  PFN_xrVoidFunction pfnCreateDebugUtilsMessengerEXT{};
  PFN_xrVoidFunction pfnDestroyDebugUtilsMessengerEXT{};
  PFN_xrVoidFunction pfnSubmitDebugUtilsMessageEXT{};
  PFN_xrVoidFunction pfnSessionBeginDebugUtilsLabelRegionEXT{};
  PFN_xrVoidFunction pfnSessionEndDebugUtilsLabelRegionEXT{};
  PFN_xrVoidFunction pfnSessionInsertDebugUtilsLabelEXT{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorMSFT{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorSpaceMSFT{};
  PFN_xrVoidFunction pfnDestroySpatialAnchorMSFT{};
  PFN_xrVoidFunction pfnSetInputDeviceActiveEXT{};
  PFN_xrVoidFunction pfnSetInputDeviceStateBoolEXT{};
  PFN_xrVoidFunction pfnSetInputDeviceStateFloatEXT{};
  PFN_xrVoidFunction pfnSetInputDeviceStateVector2fEXT{};
  PFN_xrVoidFunction pfnSetInputDeviceLocationEXT{};
  PFN_xrVoidFunction pfnCreateSpatialGraphNodeSpaceMSFT{};
  PFN_xrVoidFunction pfnTryCreateSpatialGraphStaticNodeBindingMSFT{};
  PFN_xrVoidFunction pfnDestroySpatialGraphNodeBindingMSFT{};
  PFN_xrVoidFunction pfnGetSpatialGraphNodeBindingPropertiesMSFT{};
  PFN_xrVoidFunction pfnCreateHandTrackerEXT{};
  PFN_xrVoidFunction pfnDestroyHandTrackerEXT{};
  PFN_xrVoidFunction pfnLocateHandJointsEXT{};
  PFN_xrVoidFunction pfnCreateHandMeshSpaceMSFT{};
  PFN_xrVoidFunction pfnUpdateHandMeshMSFT{};
  PFN_xrVoidFunction pfnGetControllerModelKeyMSFT{};
  PFN_xrVoidFunction pfnLoadControllerModelMSFT{};
  PFN_xrVoidFunction pfnGetControllerModelPropertiesMSFT{};
  PFN_xrVoidFunction pfnGetControllerModelStateMSFT{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorFromPerceptionAnchorMSFT{};
  PFN_xrVoidFunction pfnTryGetPerceptionAnchorFromSpatialAnchorMSFT{};
  PFN_xrVoidFunction pfnEnumerateReprojectionModesMSFT{};
  PFN_xrVoidFunction pfnUpdateSwapchainFB{};
  PFN_xrVoidFunction pfnGetSwapchainStateFB{};
  PFN_xrVoidFunction pfnCreateBodyTrackerFB{};
  PFN_xrVoidFunction pfnDestroyBodyTrackerFB{};
  PFN_xrVoidFunction pfnLocateBodyJointsFB{};
  PFN_xrVoidFunction pfnGetBodySkeletonFB{};
  PFN_xrVoidFunction pfnEnumerateSceneComputeFeaturesMSFT{};
  PFN_xrVoidFunction pfnCreateSceneObserverMSFT{};
  PFN_xrVoidFunction pfnDestroySceneObserverMSFT{};
  PFN_xrVoidFunction pfnCreateSceneMSFT{};
  PFN_xrVoidFunction pfnDestroySceneMSFT{};
  PFN_xrVoidFunction pfnComputeNewSceneMSFT{};
  PFN_xrVoidFunction pfnGetSceneComputeStateMSFT{};
  PFN_xrVoidFunction pfnGetSceneComponentsMSFT{};
  PFN_xrVoidFunction pfnLocateSceneComponentsMSFT{};
  PFN_xrVoidFunction pfnGetSceneMeshBuffersMSFT{};
  PFN_xrVoidFunction pfnDeserializeSceneMSFT{};
  PFN_xrVoidFunction pfnGetSerializedSceneFragmentDataMSFT{};
  PFN_xrVoidFunction pfnEnumerateDisplayRefreshRatesFB{};
  PFN_xrVoidFunction pfnGetDisplayRefreshRateFB{};
  PFN_xrVoidFunction pfnRequestDisplayRefreshRateFB{};
  PFN_xrVoidFunction pfnEnumerateViveTrackerPathsHTCX{};
  PFN_xrVoidFunction pfnCreateFacialTrackerHTC{};
  PFN_xrVoidFunction pfnDestroyFacialTrackerHTC{};
  PFN_xrVoidFunction pfnGetFacialExpressionsHTC{};
  PFN_xrVoidFunction pfnEnumerateColorSpacesFB{};
  PFN_xrVoidFunction pfnSetColorSpaceFB{};
  PFN_xrVoidFunction pfnGetHandMeshFB{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorFB{};
  PFN_xrVoidFunction pfnGetSpaceUuidFB{};
  PFN_xrVoidFunction pfnEnumerateSpaceSupportedComponentsFB{};
  PFN_xrVoidFunction pfnSetSpaceComponentStatusFB{};
  PFN_xrVoidFunction pfnGetSpaceComponentStatusFB{};
  PFN_xrVoidFunction pfnCreateFoveationProfileFB{};
  PFN_xrVoidFunction pfnDestroyFoveationProfileFB{};
  PFN_xrVoidFunction pfnQuerySystemTrackedKeyboardFB{};
  PFN_xrVoidFunction pfnCreateKeyboardSpaceFB{};
  PFN_xrVoidFunction pfnCreateTriangleMeshFB{};
  PFN_xrVoidFunction pfnDestroyTriangleMeshFB{};
  PFN_xrVoidFunction pfnTriangleMeshGetVertexBufferFB{};
  PFN_xrVoidFunction pfnTriangleMeshGetIndexBufferFB{};
  PFN_xrVoidFunction pfnTriangleMeshBeginUpdateFB{};
  PFN_xrVoidFunction pfnTriangleMeshEndUpdateFB{};
  PFN_xrVoidFunction pfnTriangleMeshBeginVertexBufferUpdateFB{};
  PFN_xrVoidFunction pfnTriangleMeshEndVertexBufferUpdateFB{};
  PFN_xrVoidFunction pfnCreatePassthroughFB{};
  PFN_xrVoidFunction pfnDestroyPassthroughFB{};
  PFN_xrVoidFunction pfnPassthroughStartFB{};
  PFN_xrVoidFunction pfnPassthroughPauseFB{};
  PFN_xrVoidFunction pfnCreatePassthroughLayerFB{};
  PFN_xrVoidFunction pfnDestroyPassthroughLayerFB{};
  PFN_xrVoidFunction pfnPassthroughLayerPauseFB{};
  PFN_xrVoidFunction pfnPassthroughLayerResumeFB{};
  PFN_xrVoidFunction pfnPassthroughLayerSetStyleFB{};
  PFN_xrVoidFunction pfnCreateGeometryInstanceFB{};
  PFN_xrVoidFunction pfnDestroyGeometryInstanceFB{};
  PFN_xrVoidFunction pfnGeometryInstanceSetTransformFB{};
  PFN_xrVoidFunction pfnEnumerateRenderModelPathsFB{};
  PFN_xrVoidFunction pfnGetRenderModelPropertiesFB{};
  PFN_xrVoidFunction pfnLoadRenderModelFB{};
  PFN_xrVoidFunction pfnSetEnvironmentDepthEstimationVARJO{};
  PFN_xrVoidFunction pfnSetMarkerTrackingVARJO{};
  PFN_xrVoidFunction pfnSetMarkerTrackingTimeoutVARJO{};
  PFN_xrVoidFunction pfnSetMarkerTrackingPredictionVARJO{};
  PFN_xrVoidFunction pfnGetMarkerSizeVARJO{};
  PFN_xrVoidFunction pfnCreateMarkerSpaceVARJO{};
  PFN_xrVoidFunction pfnSetViewOffsetVARJO{};
  PFN_xrVoidFunction pfnCreateSpaceFromCoordinateFrameUIDML{};
  PFN_xrVoidFunction pfnCreateMarkerDetectorML{};
  PFN_xrVoidFunction pfnDestroyMarkerDetectorML{};
  PFN_xrVoidFunction pfnSnapshotMarkerDetectorML{};
  PFN_xrVoidFunction pfnGetMarkerDetectorStateML{};
  PFN_xrVoidFunction pfnGetMarkersML{};
  PFN_xrVoidFunction pfnGetMarkerReprojectionErrorML{};
  PFN_xrVoidFunction pfnGetMarkerLengthML{};
  PFN_xrVoidFunction pfnGetMarkerNumberML{};
  PFN_xrVoidFunction pfnGetMarkerStringML{};
  PFN_xrVoidFunction pfnCreateMarkerSpaceML{};
  PFN_xrVoidFunction pfnEnableLocalizationEventsML{};
  PFN_xrVoidFunction pfnQueryLocalizationMapsML{};
  PFN_xrVoidFunction pfnRequestMapLocalizationML{};
  PFN_xrVoidFunction pfnImportLocalizationMapML{};
  PFN_xrVoidFunction pfnCreateExportedLocalizationMapML{};
  PFN_xrVoidFunction pfnDestroyExportedLocalizationMapML{};
  PFN_xrVoidFunction pfnGetExportedLocalizationMapDataML{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorsAsyncML{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorsCompleteML{};
  PFN_xrVoidFunction pfnGetSpatialAnchorStateML{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorsStorageML{};
  PFN_xrVoidFunction pfnDestroySpatialAnchorsStorageML{};
  PFN_xrVoidFunction pfnQuerySpatialAnchorsAsyncML{};
  PFN_xrVoidFunction pfnQuerySpatialAnchorsCompleteML{};
  PFN_xrVoidFunction pfnPublishSpatialAnchorsAsyncML{};
  PFN_xrVoidFunction pfnPublishSpatialAnchorsCompleteML{};
  PFN_xrVoidFunction pfnDeleteSpatialAnchorsAsyncML{};
  PFN_xrVoidFunction pfnDeleteSpatialAnchorsCompleteML{};
  PFN_xrVoidFunction pfnUpdateSpatialAnchorsExpirationAsyncML{};
  PFN_xrVoidFunction pfnUpdateSpatialAnchorsExpirationCompleteML{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorStoreConnectionMSFT{};
  PFN_xrVoidFunction pfnDestroySpatialAnchorStoreConnectionMSFT{};
  PFN_xrVoidFunction pfnPersistSpatialAnchorMSFT{};
  PFN_xrVoidFunction pfnEnumeratePersistedSpatialAnchorNamesMSFT{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorFromPersistedNameMSFT{};
  PFN_xrVoidFunction pfnUnpersistSpatialAnchorMSFT{};
  PFN_xrVoidFunction pfnClearSpatialAnchorStoreMSFT{};
  PFN_xrVoidFunction pfnGetSceneMarkerRawDataMSFT{};
  PFN_xrVoidFunction pfnGetSceneMarkerDecodedStringMSFT{};
  PFN_xrVoidFunction pfnQuerySpacesFB{};
  PFN_xrVoidFunction pfnRetrieveSpaceQueryResultsFB{};
  PFN_xrVoidFunction pfnSaveSpaceFB{};
  PFN_xrVoidFunction pfnEraseSpaceFB{};
  PFN_xrVoidFunction pfnGetAudioOutputDeviceGuidOculus{};
  PFN_xrVoidFunction pfnGetAudioInputDeviceGuidOculus{};
  PFN_xrVoidFunction pfnShareSpacesFB{};
  PFN_xrVoidFunction pfnGetSpaceBoundingBox2DFB{};
  PFN_xrVoidFunction pfnGetSpaceBoundingBox3DFB{};
  PFN_xrVoidFunction pfnGetSpaceSemanticLabelsFB{};
  PFN_xrVoidFunction pfnGetSpaceBoundary2DFB{};
  PFN_xrVoidFunction pfnGetSpaceRoomLayoutFB{};
  PFN_xrVoidFunction pfnSetDigitalLensControlALMALENCE{};
  PFN_xrVoidFunction pfnRequestSceneCaptureFB{};
  PFN_xrVoidFunction pfnGetSpaceContainerFB{};
  PFN_xrVoidFunction pfnGetFoveationEyeTrackedStateMETA{};
  PFN_xrVoidFunction pfnCreateFaceTrackerFB{};
  PFN_xrVoidFunction pfnDestroyFaceTrackerFB{};
  PFN_xrVoidFunction pfnGetFaceExpressionWeightsFB{};
  PFN_xrVoidFunction pfnCreateEyeTrackerFB{};
  PFN_xrVoidFunction pfnDestroyEyeTrackerFB{};
  PFN_xrVoidFunction pfnGetEyeGazesFB{};
  PFN_xrVoidFunction pfnPassthroughLayerSetKeyboardHandsIntensityFB{};
  PFN_xrVoidFunction pfnGetDeviceSampleRateFB{};
  PFN_xrVoidFunction pfnGetPassthroughPreferencesMETA{};
  PFN_xrVoidFunction pfnCreateVirtualKeyboardMETA{};
  PFN_xrVoidFunction pfnDestroyVirtualKeyboardMETA{};
  PFN_xrVoidFunction pfnCreateVirtualKeyboardSpaceMETA{};
  PFN_xrVoidFunction pfnSuggestVirtualKeyboardLocationMETA{};
  PFN_xrVoidFunction pfnGetVirtualKeyboardScaleMETA{};
  PFN_xrVoidFunction pfnSetVirtualKeyboardModelVisibilityMETA{};
  PFN_xrVoidFunction pfnGetVirtualKeyboardModelAnimationStatesMETA{};
  PFN_xrVoidFunction pfnGetVirtualKeyboardDirtyTexturesMETA{};
  PFN_xrVoidFunction pfnGetVirtualKeyboardTextureDataMETA{};
  PFN_xrVoidFunction pfnSendVirtualKeyboardInputMETA{};
  PFN_xrVoidFunction pfnChangeVirtualKeyboardTextContextMETA{};
  PFN_xrVoidFunction pfnEnumerateExternalCamerasOCULUS{};
  PFN_xrVoidFunction pfnEnumeratePerformanceMetricsCounterPathsMETA{};
  PFN_xrVoidFunction pfnSetPerformanceMetricsStateMETA{};
  PFN_xrVoidFunction pfnGetPerformanceMetricsStateMETA{};
  PFN_xrVoidFunction pfnQueryPerformanceMetricsCounterMETA{};
  PFN_xrVoidFunction pfnSaveSpaceListFB{};
  PFN_xrVoidFunction pfnCreateSpaceUserFB{};
  PFN_xrVoidFunction pfnGetSpaceUserIdFB{};
  PFN_xrVoidFunction pfnDestroySpaceUserFB{};
  PFN_xrVoidFunction pfnGetRecommendedLayerResolutionMETA{};
  PFN_xrVoidFunction pfnCreatePassthroughColorLutMETA{};
  PFN_xrVoidFunction pfnDestroyPassthroughColorLutMETA{};
  PFN_xrVoidFunction pfnUpdatePassthroughColorLutMETA{};
  PFN_xrVoidFunction pfnGetSpaceTriangleMeshMETA{};
  PFN_xrVoidFunction pfnCreateFaceTracker2FB{};
  PFN_xrVoidFunction pfnDestroyFaceTracker2FB{};
  PFN_xrVoidFunction pfnGetFaceExpressionWeights2FB{};
  PFN_xrVoidFunction pfnShareSpacesMETA{};
  PFN_xrVoidFunction pfnCreateEnvironmentDepthProviderMETA{};
  PFN_xrVoidFunction pfnDestroyEnvironmentDepthProviderMETA{};
  PFN_xrVoidFunction pfnStartEnvironmentDepthProviderMETA{};
  PFN_xrVoidFunction pfnStopEnvironmentDepthProviderMETA{};
  PFN_xrVoidFunction pfnCreateEnvironmentDepthSwapchainMETA{};
  PFN_xrVoidFunction pfnDestroyEnvironmentDepthSwapchainMETA{};
  PFN_xrVoidFunction pfnEnumerateEnvironmentDepthSwapchainImagesMETA{};
  PFN_xrVoidFunction pfnGetEnvironmentDepthSwapchainStateMETA{};
  PFN_xrVoidFunction pfnAcquireEnvironmentDepthImageMETA{};
  PFN_xrVoidFunction pfnSetEnvironmentDepthHandRemovalMETA{};
  PFN_xrVoidFunction pfnCreateRenderModelEXT{};
  PFN_xrVoidFunction pfnDestroyRenderModelEXT{};
  PFN_xrVoidFunction pfnGetRenderModelPropertiesEXT{};
  PFN_xrVoidFunction pfnCreateRenderModelSpaceEXT{};
  PFN_xrVoidFunction pfnCreateRenderModelAssetEXT{};
  PFN_xrVoidFunction pfnDestroyRenderModelAssetEXT{};
  PFN_xrVoidFunction pfnGetRenderModelAssetDataEXT{};
  PFN_xrVoidFunction pfnGetRenderModelAssetPropertiesEXT{};
  PFN_xrVoidFunction pfnGetRenderModelStateEXT{};
  PFN_xrVoidFunction pfnEnumerateInteractionRenderModelIdsEXT{};
  PFN_xrVoidFunction pfnEnumerateRenderModelSubactionPathsEXT{};
  PFN_xrVoidFunction pfnGetRenderModelPoseTopLevelUserPathEXT{};
  PFN_xrVoidFunction pfnSetTrackingOptimizationSettingsHintQCOM{};
  PFN_xrVoidFunction pfnCreatePassthroughHTC{};
  PFN_xrVoidFunction pfnDestroyPassthroughHTC{};
  PFN_xrVoidFunction pfnApplyFoveationHTC{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorHTC{};
  PFN_xrVoidFunction pfnGetSpatialAnchorNameHTC{};
  PFN_xrVoidFunction pfnCreateBodyTrackerHTC{};
  PFN_xrVoidFunction pfnDestroyBodyTrackerHTC{};
  PFN_xrVoidFunction pfnLocateBodyJointsHTC{};
  PFN_xrVoidFunction pfnGetBodySkeletonHTC{};
  PFN_xrVoidFunction pfnApplyForceFeedbackCurlMNDX{};
  PFN_xrVoidFunction pfnCreateBodyTrackerBD{};
  PFN_xrVoidFunction pfnDestroyBodyTrackerBD{};
  PFN_xrVoidFunction pfnLocateBodyJointsBD{};
  PFN_xrVoidFunction pfnEnumerateSpatialEntityComponentTypesBD{};
  PFN_xrVoidFunction pfnGetSpatialEntityUuidBD{};
  PFN_xrVoidFunction pfnGetSpatialEntityComponentDataBD{};
  PFN_xrVoidFunction pfnCreateSenseDataProviderBD{};
  PFN_xrVoidFunction pfnStartSenseDataProviderAsyncBD{};
  PFN_xrVoidFunction pfnStartSenseDataProviderCompleteBD{};
  PFN_xrVoidFunction pfnGetSenseDataProviderStateBD{};
  PFN_xrVoidFunction pfnQuerySenseDataAsyncBD{};
  PFN_xrVoidFunction pfnQuerySenseDataCompleteBD{};
  PFN_xrVoidFunction pfnDestroySenseDataSnapshotBD{};
  PFN_xrVoidFunction pfnGetQueriedSenseDataBD{};
  PFN_xrVoidFunction pfnStopSenseDataProviderBD{};
  PFN_xrVoidFunction pfnDestroySenseDataProviderBD{};
  PFN_xrVoidFunction pfnCreateSpatialEntityAnchorBD{};
  PFN_xrVoidFunction pfnDestroyAnchorBD{};
  PFN_xrVoidFunction pfnGetAnchorUuidBD{};
  PFN_xrVoidFunction pfnCreateAnchorSpaceBD{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorAsyncBD{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorCompleteBD{};
  PFN_xrVoidFunction pfnPersistSpatialAnchorAsyncBD{};
  PFN_xrVoidFunction pfnPersistSpatialAnchorCompleteBD{};
  PFN_xrVoidFunction pfnUnpersistSpatialAnchorAsyncBD{};
  PFN_xrVoidFunction pfnUnpersistSpatialAnchorCompleteBD{};
  PFN_xrVoidFunction pfnShareSpatialAnchorAsyncBD{};
  PFN_xrVoidFunction pfnShareSpatialAnchorCompleteBD{};
  PFN_xrVoidFunction pfnDownloadSharedSpatialAnchorAsyncBD{};
  PFN_xrVoidFunction pfnDownloadSharedSpatialAnchorCompleteBD{};
  PFN_xrVoidFunction pfnCaptureSceneAsyncBD{};
  PFN_xrVoidFunction pfnCaptureSceneCompleteBD{};
  PFN_xrVoidFunction pfnCreatePlaneDetectorEXT{};
  PFN_xrVoidFunction pfnDestroyPlaneDetectorEXT{};
  PFN_xrVoidFunction pfnBeginPlaneDetectionEXT{};
  PFN_xrVoidFunction pfnGetPlaneDetectionStateEXT{};
  PFN_xrVoidFunction pfnGetPlaneDetectionsEXT{};
  PFN_xrVoidFunction pfnGetPlanePolygonBufferEXT{};
  PFN_xrVoidFunction pfnPollFutureEXT{};
  PFN_xrVoidFunction pfnCancelFutureEXT{};
  PFN_xrVoidFunction pfnEnableUserCalibrationEventsML{};
  PFN_xrVoidFunction pfnSetSystemNotificationsML{};
  PFN_xrVoidFunction pfnCreateWorldMeshDetectorML{};
  PFN_xrVoidFunction pfnDestroyWorldMeshDetectorML{};
  PFN_xrVoidFunction pfnRequestWorldMeshStateAsyncML{};
  PFN_xrVoidFunction pfnRequestWorldMeshStateCompleteML{};
  PFN_xrVoidFunction pfnGetWorldMeshBufferRecommendSizeML{};
  PFN_xrVoidFunction pfnAllocateWorldMeshBufferML{};
  PFN_xrVoidFunction pfnFreeWorldMeshBufferML{};
  PFN_xrVoidFunction pfnRequestWorldMeshAsyncML{};
  PFN_xrVoidFunction pfnRequestWorldMeshCompleteML{};
  PFN_xrVoidFunction pfnCreateFacialExpressionClientML{};
  PFN_xrVoidFunction pfnDestroyFacialExpressionClientML{};
  PFN_xrVoidFunction pfnGetFacialExpressionBlendShapePropertiesML{};
  PFN_xrVoidFunction pfnResumeSimultaneousHandsAndControllersTrackingMETA{};
  PFN_xrVoidFunction pfnPauseSimultaneousHandsAndControllersTrackingMETA{};
  PFN_xrVoidFunction pfnStartColocationDiscoveryMETA{};
  PFN_xrVoidFunction pfnStopColocationDiscoveryMETA{};
  PFN_xrVoidFunction pfnStartColocationAdvertisementMETA{};
  PFN_xrVoidFunction pfnStopColocationAdvertisementMETA{};
  PFN_xrVoidFunction pfnEnumerateSpatialCapabilitiesEXT{};
  PFN_xrVoidFunction pfnEnumerateSpatialCapabilityComponentTypesEXT{};
  PFN_xrVoidFunction pfnEnumerateSpatialCapabilityFeaturesEXT{};
  PFN_xrVoidFunction pfnCreateSpatialContextAsyncEXT{};
  PFN_xrVoidFunction pfnCreateSpatialContextCompleteEXT{};
  PFN_xrVoidFunction pfnDestroySpatialContextEXT{};
  PFN_xrVoidFunction pfnCreateSpatialDiscoverySnapshotAsyncEXT{};
  PFN_xrVoidFunction pfnCreateSpatialDiscoverySnapshotCompleteEXT{};
  PFN_xrVoidFunction pfnQuerySpatialComponentDataEXT{};
  PFN_xrVoidFunction pfnDestroySpatialSnapshotEXT{};
  PFN_xrVoidFunction pfnCreateSpatialEntityFromIdEXT{};
  PFN_xrVoidFunction pfnDestroySpatialEntityEXT{};
  PFN_xrVoidFunction pfnCreateSpatialUpdateSnapshotEXT{};
  PFN_xrVoidFunction pfnGetSpatialBufferStringEXT{};
  PFN_xrVoidFunction pfnGetSpatialBufferUint8EXT{};
  PFN_xrVoidFunction pfnGetSpatialBufferUint16EXT{};
  PFN_xrVoidFunction pfnGetSpatialBufferUint32EXT{};
  PFN_xrVoidFunction pfnGetSpatialBufferFloatEXT{};
  PFN_xrVoidFunction pfnGetSpatialBufferVector2fEXT{};
  PFN_xrVoidFunction pfnGetSpatialBufferVector3fEXT{};
  PFN_xrVoidFunction pfnCreateSpatialAnchorEXT{};
  PFN_xrVoidFunction pfnEnumerateSpatialPersistenceScopesEXT{};
  PFN_xrVoidFunction pfnCreateSpatialPersistenceContextAsyncEXT{};
  PFN_xrVoidFunction pfnCreateSpatialPersistenceContextCompleteEXT{};
  PFN_xrVoidFunction pfnDestroySpatialPersistenceContextEXT{};
  PFN_xrVoidFunction pfnPersistSpatialEntityAsyncEXT{};
  PFN_xrVoidFunction pfnPersistSpatialEntityCompleteEXT{};
  PFN_xrVoidFunction pfnUnpersistSpatialEntityAsyncEXT{};
  PFN_xrVoidFunction pfnUnpersistSpatialEntityCompleteEXT{};
};

#ifndef OPENXR_HPP_DOXYGEN
// forward declare and manually defining trait to avoid include
namespace traits {
  template <typename T>
  struct is_dispatch;
  template <>
  struct is_dispatch<::OPENXR_HPP_NAMESPACE::DispatchLoaderDynamic> : std::true_type {};
}  // namespace traits
#endif  // !OPENXR_HPP_DOXYGEN

}  // namespace OPENXR_HPP_NAMESPACE

#endif  // ifndef OPENXR_DISPATCH_DYNAMIC_HPP_
